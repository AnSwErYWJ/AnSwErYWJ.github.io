{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/wechat_public_qdode.png","path":"images/wechat_public_qdode.png","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/website_icon.ico","path":"images/website_icon.ico","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/gitmint.js","path":"js/src/gitmint.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/gitment.js","path":"js/src/gitment.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"38d4e2a55e6a6d59148807d0c06b6789dba021cf","modified":1582267955236},{"_id":"source/commonweal.html","hash":"a0974ad21b9ad9dfa80a2737ef6eafc37ea2a245","modified":1582269045035},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1555922650039},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1555922650039},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1555922650039},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1555922650079},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1555922650079},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1555922650095},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1555922650095},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1555922650115},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1555922650115},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1555922650123},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1555922650123},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1555922650123},{"_id":"themes/next/_config.yml","hash":"53ef15ef4a1ec2ffdc2bb9a32321a6fa24c32e40","modified":1614847794889},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1555922650123},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1555922650123},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1555922650251},{"_id":"source/_posts/backup-of-blog-with-hexo-and-github.md","hash":"b826763e94de11dad5a39dafb0c0826cf658f410","modified":1563938004075},{"_id":"source/_posts/big-little-endian.md","hash":"4b1a4d9ac5b25e3a0d5bc77d0ded39d6955f2afd","modified":1563938143997},{"_id":"source/_posts/binary-to-object-file.md","hash":"3728413a8a6a449f7acf2689d02812fe8c56653f","modified":1563954057774},{"_id":"source/_posts/badges-of-github.md","hash":"6f271d4970a238ad6fb658fff02bbd052539113f","modified":1595295607125},{"_id":"source/_posts/cjson.md","hash":"e874cd4e8009b50a6f5a76749dbb7b5793b5af4e","modified":1595295607125},{"_id":"source/_posts/connect-in-unix.md","hash":"ad7d6fa6bd1d218e1c721beea9ed9b9b3935df38","modified":1595295607137},{"_id":"source/_posts/condition-variables-of-thread-synchronization.md","hash":"50ba842f66a17a770304f86ed8a709367b543cd5","modified":1595295607137},{"_id":"source/_posts/debug-macro.md","hash":"77dc15d8e10fc012771c8413bbd8de105ad85499","modified":1563938879006},{"_id":"source/_posts/debug-for-shell-script.md","hash":"77b68aa5c3ee14f3c88c37b8a721d643093ad42b","modified":1595295607137},{"_id":"source/_posts/empty-file-in-shell.md","hash":"21277d571aacc761a00ba3a4aa0bf7fec68373d0","modified":1595295607137},{"_id":"source/_posts/coverage-of-code.md","hash":"537b778ce316496406631572ce63ed5de9314053","modified":1563938340895},{"_id":"source/_posts/floating-point-operation-in-script.md","hash":"e940cfe579fe292ac8a4fcbb1074ab5e5bf22ef9","modified":1595295607137},{"_id":"source/_posts/difference-between-RPATH-and-RUNPATH.md","hash":"2525417f3fad5cb10ea9be66b2b97bd3ae2f8908","modified":1613989878825},{"_id":"source/_posts/fork-bomb.md","hash":"4d3982c09bd3f1b767abdf00d69ece58d21a7d4d","modified":1595295607137},{"_id":"source/_posts/gcc-compilation-of-arm-articles.md","hash":"db333404df87fc692910f0eb00879cbbd0161b3e","modified":1595295607137},{"_id":"source/_posts/generate-random-numbers.md","hash":"701b781d83a7d1f5176784a76438ffa9d7b1bede","modified":1563938824254},{"_id":"source/_posts/getw-and-putw.md","hash":"fcd6078f23baab3f6efa9724f1ab5c620c9a2d19","modified":1563938819895},{"_id":"source/_posts/git-clone-extra-large-project.md","hash":"fc29ebb33bc22b73b1aa784b473ef353b20bff96","modified":1568026651028},{"_id":"source/_posts/gudie-of-technical-resume.md","hash":"c3f1217a6a85591a2470be13e3fc54bbfc8b7d10","modified":1595495974519},{"_id":"source/_posts/git-help-v2.md","hash":"1fdb58eab9a110e85ba5ef05bcfa777a6f33bc49","modified":1571283115165},{"_id":"source/_posts/hide-symbol-of-static-library.md","hash":"61c27d24132dc4dc6a61bcbd3cf61a7a108d7b7c","modified":1595295607161},{"_id":"source/_posts/git-help-v3.md","hash":"a15b89c46e1ac8cb3be8245346533888cc96f25d","modified":1605152826174},{"_id":"source/_posts/introduction-to-four-service-of-cloud-computing.md","hash":"65d67ee630d94561dc77cb762240c9581905abf0","modified":1563938716194},{"_id":"source/_posts/homebrew-in-mac.md","hash":"d440fdd39dfafe2a4b6a10dadf59bb3dcd3b5db0","modified":1595295607161},{"_id":"source/_posts/io-model.md","hash":"48192aaa1594b12c693fcb216f2e3e84850713ba","modified":1595295607161},{"_id":"source/_posts/keepalive-of-socket.md","hash":"4cf19bae97239aae296b339f197a80073345bf44","modified":1595295607161},{"_id":"source/_posts/jq.md","hash":"99b8d7849df71d0bc3dc95304558b0e5a1aabe75","modified":1595295607161},{"_id":"source/_posts/ld-hash-style.md","hash":"258a404d0276bbf43516f85b41b49ca7a1d503e1","modified":1595295607197},{"_id":"source/_posts/link-in-linux.md","hash":"a730b0c1bb9105d048f308f96a15c24cbf1837cf","modified":1595295607197},{"_id":"source/_posts/listen-in-unix.md","hash":"a1690a1859270ffb09854f2a648e0bd9d4bac047","modified":1595295607213},{"_id":"source/_posts/safe-read-and-write.md","hash":"e595b81de376d50417e88c4c6ab97613b6f6ebe0","modified":1595295607213},{"_id":"source/_posts/note-of-openresty-study.md","hash":"079f71ec0f21c3991258067b4dfdbacc6331bc0b","modified":1595295607213},{"_id":"source/_posts/script-and-scriptreplay.md","hash":"a871871f01ff29b8c390e208fb374a77db997197","modified":1595295607213},{"_id":"source/_posts/man-strtok.md","hash":"e8abbcc2b9c2d5c6ff87fe2e58aea05f812e0bf1","modified":1563938664354},{"_id":"source/_posts/standard-of-headphone.md","hash":"c48ac17d7e08bafa00f073a88c84e0e855c219f3","modified":1563938731174},{"_id":"source/_posts/speex.md","hash":"20464cae8aaf4ef69ce06b8ab7efadc0d4428876","modified":1595295607213},{"_id":"source/_posts/table-encode-as-array-or-object.md","hash":"288307a1c786120fd9440223cf65260ad6a7f41f","modified":1555922649951},{"_id":"source/_posts/usage-of-core-in-linux.md","hash":"80d8a158cd6decb817b7973f2d1bfcb5a78ac93e","modified":1563938553657},{"_id":"source/_posts/use-dynamic-and-static-library.md","hash":"185597ce09f67f5376224125db726ef705b7e787","modified":1595295607277},{"_id":"source/_posts/wav.md","hash":"456cdba8eea0acf3234ed8e238b58fc29555c0f7","modified":1595295607281},{"_id":"source/_posts/what-is-sysroot.md","hash":"5bc9f78da0a092c1c9a8de48d352f9d8d112842a","modified":1595295607281},{"_id":"source/about/index.md","hash":"7871ee479c168089bcf4686a82039f42c3a9caba","modified":1582266102190},{"_id":"source/categories/index.md","hash":"62fabc77e6f459f612668fb086d994459898dba3","modified":1555922649995},{"_id":"source/images/avatar.png","hash":"8e9318448603822ae329ce0cfb435757987a4529","modified":1582185753537},{"_id":"source/images/wechat_public_qdode.png","hash":"3ff46821a249809d24cdcf6cabe8c25a0a48c3b2","modified":1582185748505},{"_id":"source/tags/index.md","hash":"ae3fe07516fd25cd7fec3b40e24cd26c37784847","modified":1555922649995},{"_id":"themes/next/.github-bak/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1555922650055},{"_id":"themes/next/.github-bak/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1555922650051},{"_id":"themes/next/.github-bak/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1555922650055},{"_id":"themes/next/.github-bak/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1555922650071},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1555922650131},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1555922650139},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1555922650139},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1555922650151},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1555922650151},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1555922650151},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1555922650151},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1555922650151},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1555922650151},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1555922650155},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1555922650155},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1555922650155},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1555922650155},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0d21249ff82f62dfab34545dfabb2c7fa62579b6","modified":1582255191225},{"_id":"themes/next/languages/zh-hk.yml","hash":"0f286bbd9f70378eb11b10d4e0f6328c444dd4f3","modified":1582255194549},{"_id":"themes/next/languages/zh-tw.yml","hash":"fcdfa52e8931a461b4c9cf1c07d0cfda2ec97327","modified":1582255197497},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1555922650195},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1555922650251},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1555922650251},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1555922650251},{"_id":"themes/next/layout/page.swig","hash":"152e5c933633db31381e32b79e3ba6724e37ba64","modified":1582269060039},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1555922650251},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1555922650251},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1555922650251},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1555922650251},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1555922650251},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1555922650403},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1555922650403},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1555922650403},{"_id":"source/_posts/solution-of-adb-devices-no-permissions.md","hash":"c8dfb0a0c8b09b13404849504ff00ccf5528b8ce","modified":1595295607213},{"_id":"source/images/alipay.jpg","hash":"4f2863cd8c574e750883cde1ea466d7514b9b4ce","modified":1555922649995},{"_id":"source/images/website_icon.ico","hash":"d7a1be326c974a1aa24181a1628b7cd2e455bf53","modified":1555922649995},{"_id":"source/images/wechatpay.jpg","hash":"d492da1302b3e9e74305ac8de33ae361ef7559df","modified":1555922649995},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555922650363},{"_id":"source/_posts/big-little-endian/big-little-endian.png","hash":"cb8c7bd337f3af69ebccc6364188e80de2ba2460","modified":1555922649803},{"_id":"source/_posts/cjson/cjson-tree.png","hash":"4e164f571eca409223c887d51bb4e8b4a0b24135","modified":1555922649811},{"_id":"source/_posts/floating-point-operation-in-script/awk.png","hash":"942bf0b15ac677fddc19a1739c3a93ce164d021a","modified":1555922649843},{"_id":"source/_posts/coverage-of-code/gcovr_xxx.png","hash":"77efd3b478dae55d64c66b395d1cc0b0e9cb843f","modified":1555922649827},{"_id":"source/_posts/coverage-of-code/gcovr_xxx_detail.png","hash":"f047da16d2aef613bdd7347dabcc9e1feb192fbf","modified":1555922649827},{"_id":"source/_posts/floating-point-operation-in-script/bc.png","hash":"12f5c602a8a6c30e37c746f6ba704ae77fc5732f","modified":1555922649847},{"_id":"source/_posts/git-help-v2/git-work-flow.jpg","hash":"9452cdd7f9ebbf71739bfdaeb562c7301f4379c0","modified":1555922649879},{"_id":"source/_posts/git-help-v3/git-work-flow.jpg","hash":"9452cdd7f9ebbf71739bfdaeb562c7301f4379c0","modified":1601364095502},{"_id":"source/_posts/git-clone-extra-large-project/source_code.png","hash":"64af4185b8a6984982364254c2cc41d2c69a3505","modified":1568012318183},{"_id":"source/_posts/io-model/multi-io.png","hash":"ccf2023af478b48e30137f2df8658d56ea92c5da","modified":1555922649895},{"_id":"source/_posts/io-model/io-model.png","hash":"40dab4441c9461043939887feb4b852f5373fe5f","modified":1555922649895},{"_id":"source/_posts/io-model/blocking-io.png","hash":"146448880afc567708a992a47feb127e76208c8a","modified":1555922649895},{"_id":"source/_posts/io-model/asyn-io.png","hash":"e35c0215cb1e99c42e0b0cc6cb6e93acc4b638a1","modified":1555922649895},{"_id":"source/_posts/io-model/signal-io.png","hash":"b8cacfd5a5f295019b03b1b68c5075e03578d1c7","modified":1555922649895},{"_id":"source/_posts/speex/aec.png","hash":"4f37f2c1e397c1599a32dc53b38475d4fe734438","modified":1555922649943},{"_id":"source/_posts/wav/audio_code.txt","hash":"635e9f8a05e25d5ef57427f06f1ea30369a86e29","modified":1560134378043},{"_id":"source/_posts/wav/wav_header.txt","hash":"e114330df62670af0ae57526a89bada21a973d24","modified":1560134383210},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555922650191},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555922650191},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1555922650195},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1555922650195},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1555922650211},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"d7488d7c204ef5bfd890210e81265bb91715d40f","modified":1582253241091},{"_id":"themes/next/layout/_macro/post.swig","hash":"4aa7eda227587e8a33d477c77e7d3ae463c0de18","modified":1614847815185},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1555922650215},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"4893c0444429bde7b0538a97d408677b89832dc0","modified":1582253241091},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1555922650215},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1555922650211},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1555922650211},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1555922650215},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1555922650211},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1555922650211},{"_id":"themes/next/layout/_partials/header.swig","hash":"2059e3bf6bb98330ce29792c0612897c4f22fe4f","modified":1582267154956},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1555922650211},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1555922650211},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1555922650231},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1555922650231},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1555922650239},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1555922650239},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1555922650239},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1555922650239},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1555922650239},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1555922650255},{"_id":"themes/next/source/css/main.styl","hash":"cd58b45d3e2b606d11a74c6fd1219d959cf868fc","modified":1555922650363},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1555922650255},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1555922650255},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1555922650255},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1555922650255},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1555922650255},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1555922650255},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1555922650255},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1555922650255},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555922650363},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555922650363},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1555922650363},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555922650363},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555922650363},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555922650363},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555922650363},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555922650363},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555922650363},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555922650363},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555922650363},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555922650363},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555922650363},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555922650363},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555922650363},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555922650363},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555922650363},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1555922650363},{"_id":"source/_posts/coverage-of-code/gcovr_xxx_main.png","hash":"43b50b8acf04d5b80e0c8085726fbe951252c4ff","modified":1555922649827},{"_id":"source/_posts/introduction-to-four-service-of-cloud-computing/Introduction-to-four-service-of-cloud-computing.jpg","hash":"ba128fe1ffafd8b0e5e90c5b3ed039a06ce5a0a8","modified":1555922649883},{"_id":"source/_posts/io-model/no-blocking-io.png","hash":"d56f288ec9f3a10a8a1a89d596ba2a29a93cda19","modified":1555922649895},{"_id":"source/_posts/standard-of-headphone/headset.png","hash":"7873b89a4697aa08742a2b4e7b2ac1493537fc08","modified":1555922649951},{"_id":"source/_posts/wav/audio_code.png","hash":"8dce8fbb17875a6c9365f8c0850bf890343a160f","modified":1560134327796},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555922650215},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555922650215},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555922650311},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555922650311},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555922650311},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555922650351},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555922650351},{"_id":"source/_posts/io-model/compare-io.png","hash":"ad5899920019da434f7d831281b6b7c73330275f","modified":1555922649895},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1555922650215},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1555922650215},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1555922650215},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1555922650211},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1555922650211},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1555922650211},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1555922650211},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1555922650211},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1555922650211},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"21c61afb90934d23243994f8ef34b3ba04721fef","modified":1555922650215},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1555922650215},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1555922650215},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1555922650219},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1555922650227},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1555922650227},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1555922650219},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1555922650227},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1555922650227},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1555922650227},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"1e430951b6eedb818fe980f5bf4bd5d87f87c11e","modified":1555922650227},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1555922650227},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1555922650227},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1555922650231},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1555922650227},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1555922650227},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1555922650251},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1555922650247},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1555922650251},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1555922650251},{"_id":"themes/next/source/css/_gitment/gitment.styl","hash":"c245680e6900ca43514d2023bf1f0e1b539992dc","modified":1555922650311},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1555922650307},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1555922650311},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1555922650311},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1555922650311},{"_id":"themes/next/source/css/_gitmint/gitmint.styl","hash":"c245680e6900ca43514d2023bf1f0e1b539992dc","modified":1555922650311},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1555922650351},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1555922650351},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1555922650351},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1555922650351},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1555922650363},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1555922650363},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1555922650363},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1555922650367},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1555922650367},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1555922650367},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1555922650367},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1555922650367},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1555922650367},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1555922650367},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1555922650367},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1555922650371},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1555922650371},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1555922650371},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1555828651194},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1555828651194},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1555922650375},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1555922650375},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1555922650375},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1555922650375},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1555922650383},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1555922650383},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1555922650383},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555922650383},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1555922650383},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1555922650395},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1555922650395},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1555922650395},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1555922650395},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1555922650395},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1555922650395},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1555922650395},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1555922650395},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1555922650395},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1555922650395},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1555922650395},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1555922650395},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1555922650395},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1555922650399},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1555922650399},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555922650403},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555922650403},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555922650403},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1555922650395},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1555922650395},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555922650395},{"_id":"source/_posts/wav/wav_header.png","hash":"f1faf3d709bde15b0f338b122dfa94f4ad2b64fc","modified":1560134327804},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1555922650239},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1555922650247},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1555922650255},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1555922650255},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1555922650255},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1555922650255},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1555922650255},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1555922650287},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1555922650307},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1555922650307},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1555922650307},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1555922650307},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1555922650307},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1555922650307},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1555922650307},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1555922650311},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1555922650311},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1555922650311},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1555922650311},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1555922650311},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1555922650327},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1555922650327},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1555922650327},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1555922650351},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1555922650351},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1555922650367},{"_id":"themes/next/source/js/src/gitmint.js","hash":"edf6d163bdd332db933fa092c1e3b39315da792b","modified":1555922650367},{"_id":"themes/next/source/js/src/gitment.js","hash":"49878321b4bd8f3b8f8cd537c7965732f527c149","modified":1555922650367},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1555922650367},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1555922650371},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1555922650371},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555922650371},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555922650371},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555922650371},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555922650371},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555922650371},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555922650371},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1555922650375},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1555922650375},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1555922650375},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1555922650375},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1555922650375},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555922650383},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555922650383},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555922650383},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1555922650399},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1555922650399},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1555922650371},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555922650391},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555922650391},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555922650403},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1555922650271},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1555922650287},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1555922650299},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1555922650299},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1555922650299},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1555922650299},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1555922650303},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1555922650307},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1555922650327},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555922650327},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555922650351},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1555922650367},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1555922650367},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1555922650367},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1555922650367},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1555922650367},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555922650375},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555922650375},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1555922650375},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555922650375},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1555922650375},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1555922650375},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1555922650387},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555922650387},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1555922650391},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1555922650371},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1555922650391},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1555922650399},{"_id":"public/atom.xml","hash":"bdfb8f29b2fb6e57a1c93264d35ad8d9a01a0f07","modified":1614847896203},{"_id":"public/search.xml","hash":"9627363b77e21d4e9d0eacb2a5553ced0846c2d1","modified":1614847896203},{"_id":"public/sitemap.xml","hash":"86adc05d4ae6fdb2c2132dcb4036ed08d24c690f","modified":1614847896257},{"_id":"public/commonweal.html","hash":"26554192b544a5fa756f575cc0d2a5ae6898f84e","modified":1614847896265},{"_id":"public/about/index.html","hash":"7b668647c426d9c687bdc3072d7d36573175e1a1","modified":1614847896265},{"_id":"public/categories/index.html","hash":"3705cbfcb75fb327ca6ef2867501a68d4d833d2d","modified":1614847896265},{"_id":"public/tags/index.html","hash":"a18f53ae4ef9af2ad491f35374b0ac43c3155ece","modified":1614847896265},{"_id":"public/2021/02/22/difference-between-RPATH-and-RUNPATH/index.html","hash":"9e2138e8b7e2bf7461475d2016e57641f9ad5160","modified":1614847896265},{"_id":"public/2020/09/29/git-help-v3/index.html","hash":"fc077e59459130d920e4eb06901e2c34100f6521","modified":1614847896265},{"_id":"public/2020/07/03/gudie-of-technical-resume/index.html","hash":"dd3ee8b211eebb3c514e8c81a846125947224a81","modified":1614847896265},{"_id":"public/2020/05/14/ld-hash-style/index.html","hash":"7c205472fed7ab991fc8033167d29637e251bfda","modified":1614847896266},{"_id":"public/2020/02/17/homebrew-in-mac/index.html","hash":"6cae7ca43b35a5050427418b90e885cbe6c08b4b","modified":1614847896266},{"_id":"public/2019/09/09/git-clone-extra-large-project/index.html","hash":"10c342b2857ae838b49a6d546aebf8b7a92e07b2","modified":1614847896266},{"_id":"public/2019/07/24/binary-to-object-file/index.html","hash":"6bacb2fc5e08003399b64187c9446250bae12427","modified":1614847896266},{"_id":"public/2019/06/03/wav/index.html","hash":"65fe4d4adf3375c6e1517543d0ae5f47d9a24c7e","modified":1614847896266},{"_id":"public/2019/05/21/man-strtok/index.html","hash":"6b46899d2f02e6590cc0d28e77e2a0c6348fecd1","modified":1614847896266},{"_id":"public/2019/04/26/what-is-sysroot/index.html","hash":"aa0b2af2d83cbf29de0ad6b48de9f601134e2867","modified":1614847896266},{"_id":"public/2019/04/13/hide-symbol-of-static-library/index.html","hash":"b5f1eebf853554f7b056bc1ea9f2d7e5e718ea7d","modified":1614847896266},{"_id":"public/2019/02/12/git-help-v2/index.html","hash":"277bb309ae9102fe48ec5296eecccc857db94011","modified":1614847896266},{"_id":"public/2018/09/25/coverage-of-code/index.html","hash":"473d53802a32118a533c8f9b7d1fa1b619121be0","modified":1614847896266},{"_id":"public/2018/05/03/cjson/index.html","hash":"d0d67d6fb2f4d60b9fb590e1d231ea35576ad41d","modified":1614847896266},{"_id":"public/2018/03/07/usage-of-core-in-linux/index.html","hash":"0ed70e69242c1fb2f30b83eb23803d0dc423283d","modified":1614847896266},{"_id":"public/2017/12/29/speex/index.html","hash":"8af1819cd6b47c0f2acc2d0f701000fec5339419","modified":1614847896266},{"_id":"public/2017/12/15/condition-variables-of-thread-synchronization/index.html","hash":"dac1e84d28f76080e385c4bd0a7b769697735087","modified":1614847896266},{"_id":"public/2017/08/04/gcc-compilation-of-arm-articles/index.html","hash":"e1d0c627405579ee26faa59bd3cf530202218cd2","modified":1614847896266},{"_id":"public/2017/06/27/io-model/index.html","hash":"3e13d0720726722e63a4a360a538a3652d9d5bff","modified":1614847896266},{"_id":"public/2017/06/20/note-of-openresty-study/index.html","hash":"ec68db2e83268e43586b6def3ad7528ec9ee3349","modified":1614847896266},{"_id":"public/2017/06/16/table-encode-as-array-or-object/index.html","hash":"8c4367cc1e9a6becc3152b1eb085820ebba70a3d","modified":1614847896266},{"_id":"public/2017/03/23/introduction-to-four-service-of-cloud-computing/index.html","hash":"809f7150463fa927f16949ed1533a492cb9471ba","modified":1614847896267},{"_id":"public/2017/02/23/listen-in-unix/index.html","hash":"37659f6d0f5e2ce146fa06ca42d31525120e3104","modified":1614847896267},{"_id":"public/2016/12/07/big-little-endian/index.html","hash":"ac38f0010962eb25d93eb11d0c575f268d7f39b5","modified":1614847896267},{"_id":"public/2016/12/06/getw-and-putw/index.html","hash":"9f6be57132ccf8095147e9edc13dbc812646094a","modified":1614847896267},{"_id":"public/2016/10/10/use-dynamic-and-static-library/index.html","hash":"8bbab4ad9e580b3e717fbc353fbac7237a8e1fa3","modified":1614847896267},{"_id":"public/2016/10/10/jq/index.html","hash":"1b9aaac22f1395e3e43f07aa15c233684808c639","modified":1614847896267},{"_id":"public/2016/09/20/standard-of-headphone/index.html","hash":"8fbd4efa3d469cc469befa58828825c42ed54398","modified":1614847896267},{"_id":"public/2016/09/05/floating-point-operation-in-script/index.html","hash":"3da467f4ce09700fe66ee364334afd604ff37300","modified":1614847896267},{"_id":"public/2016/09/05/empty-file-in-shell/index.html","hash":"813cd0918b7699547de092c76c911d1f2e996754","modified":1614847896267},{"_id":"public/2016/08/10/backup-of-blog-with-hexo-and-github/index.html","hash":"89212e3a09f0f183396792bcafd13157012c2cc5","modified":1614847896267},{"_id":"public/2016/08/02/link-in-linux/index.html","hash":"66e4a8db418288000e2800e984dba80d5e558d32","modified":1614847896267},{"_id":"public/2016/07/14/keepalive-of-socket/index.html","hash":"1f745766d542fed08c98cb1ca113e50b3aaab77e","modified":1614847896267},{"_id":"public/2016/07/14/connect-in-unix/index.html","hash":"b183c871a1db02441bbb9e99223fe47e07a0631d","modified":1614847896267},{"_id":"public/2016/07/14/debug-macro/index.html","hash":"bb9fe45d86ead7491170c2072367ae8cb70db959","modified":1614847896267},{"_id":"public/2016/07/14/safe-read-and-write/index.html","hash":"989ca30fdfa6c342a25b82044431c2b578ebb810","modified":1614847896267},{"_id":"public/2016/07/14/generate-random-numbers/index.html","hash":"aba4913e9a56d1cbeacba02a0733991426fc3349","modified":1614847896267},{"_id":"public/2016/07/14/debug-for-shell-script/index.html","hash":"8cc996a8265ea1f3052791456d535489c1ec4de0","modified":1614847896267},{"_id":"public/2016/07/14/solution-of-adb-devices-no-permissions/index.html","hash":"ff194de054518362cb068e0fdd314e06dc1f9694","modified":1614847896267},{"_id":"public/2016/07/14/script-and-scriptreplay/index.html","hash":"2b4e8ad9b951f649171e08222be825a86b1a9c09","modified":1614847896267},{"_id":"public/2016/07/14/fork-bomb/index.html","hash":"e364ada9bcff0d03bc03feff1e9dbaf8ae16783b","modified":1614847896267},{"_id":"public/2016/07/08/badges-of-github/index.html","hash":"cd078e9149c4b1e2941c3a1a70fa7721cfab0f51","modified":1614847896267},{"_id":"public/archives/index.html","hash":"b6c31c151422ca5b5bcaec958a8ac51766b6a1a4","modified":1614847896267},{"_id":"public/archives/page/2/index.html","hash":"f43f936a2fbd73cafe17d8219c25056e42fc9fd3","modified":1614847896268},{"_id":"public/archives/page/3/index.html","hash":"a30e472f4e9b348e2e5868605ede9524a98a5231","modified":1614847896268},{"_id":"public/archives/page/4/index.html","hash":"e447a2e4b6224cd222a07f75f2ce0f5bcb1394ee","modified":1614847896268},{"_id":"public/archives/page/5/index.html","hash":"91395e2efbd3aa3213e82902aa49775488bf0a3f","modified":1614847896268},{"_id":"public/archives/2016/index.html","hash":"3f18f025d9b01dd0680ad2d42f80d959f9ad1a08","modified":1614847896268},{"_id":"public/archives/2016/page/2/index.html","hash":"c5bf6a9678487aabd569cfc67b3a22d2afd6d7ba","modified":1614847896268},{"_id":"public/archives/2016/07/index.html","hash":"b63756f571a187c959960d183272e4e1b77dc03d","modified":1614847896268},{"_id":"public/archives/2016/08/index.html","hash":"f8033f1100c6a742548c3d48c1ad3f258519bdaf","modified":1614847896268},{"_id":"public/archives/2016/09/index.html","hash":"21a9a53022324a7ab85a8efee8288fbffc707026","modified":1614847896268},{"_id":"public/archives/2016/10/index.html","hash":"c5aeb1968a0976fb663bab367e05f98552cde46d","modified":1614847896268},{"_id":"public/archives/2016/12/index.html","hash":"2fc54efc0d3a9a48d5a0a02beb80e0baad614ffa","modified":1614847896268},{"_id":"public/archives/2017/index.html","hash":"08b4c65e95a8afff6ad938ec7f217284696de179","modified":1614847896268},{"_id":"public/archives/2017/02/index.html","hash":"ec2198e4dd21fb00bd214a31255d1947ed8e8f33","modified":1614847896268},{"_id":"public/archives/2017/03/index.html","hash":"a09a88dbfc0f5c56a35335fbc3c020b68b84dbd9","modified":1614847896268},{"_id":"public/archives/2017/06/index.html","hash":"e98bea50b3f2c1055ae223ac74dca1349b8440ab","modified":1614847896268},{"_id":"public/archives/2017/08/index.html","hash":"209bada7ec5291c8b927b777e3a1816831e50bb6","modified":1614847896268},{"_id":"public/archives/2017/12/index.html","hash":"fd461cdb82c51c0c759fe04e536d55cf480c5248","modified":1614847896268},{"_id":"public/archives/2018/index.html","hash":"ca8a1d54c73845c373ed65477394883a94d632d8","modified":1614847896268},{"_id":"public/archives/2018/03/index.html","hash":"7dd4127d0c51621d13c59ac1f9ee69c0e514e04c","modified":1614847896268},{"_id":"public/archives/2018/05/index.html","hash":"abeb521a7dd874ad31ee881c0b526b51d5a75951","modified":1614847896268},{"_id":"public/archives/2018/09/index.html","hash":"11a9898d7463aa3d79b960a28350603eb5d1b93c","modified":1614847896268},{"_id":"public/archives/2019/index.html","hash":"7b46c305ab9d1728f9c0be729d6ce516b275c62a","modified":1614847896269},{"_id":"public/archives/2019/02/index.html","hash":"768d68763a55575f6497c13eab80d76ff3c306db","modified":1614847896269},{"_id":"public/archives/2019/04/index.html","hash":"890d03651a85ecbe9fd06accd13de1c519f2d795","modified":1614847896269},{"_id":"public/archives/2019/05/index.html","hash":"23a3cccb58b79646990fb56c5cb7fa7909bbf273","modified":1614847896269},{"_id":"public/archives/2019/06/index.html","hash":"ba29ea2a7b6c38b169bd380828345fc913bd3cad","modified":1614847896269},{"_id":"public/archives/2019/07/index.html","hash":"8b70ec511d16948487862a0f44509aefe689b6d4","modified":1614847896269},{"_id":"public/archives/2019/09/index.html","hash":"6ba510b892265c1f63976f7989514004ac2be2d6","modified":1614847896269},{"_id":"public/archives/2020/index.html","hash":"77a3a8a29a0e468a1bb4bfa482a6341b601c99dc","modified":1614847896269},{"_id":"public/archives/2020/02/index.html","hash":"3b57b92a1f51e24636d5156b94f810678fe49ee0","modified":1614847896269},{"_id":"public/archives/2020/05/index.html","hash":"607353c015c0b81cd93e731bee85e70dfac0a4a1","modified":1614847896269},{"_id":"public/archives/2020/07/index.html","hash":"a54be93f6dde3e13447e480b5b78508c3b7aad5f","modified":1614847896269},{"_id":"public/archives/2020/09/index.html","hash":"3292655355f4ff25417b0228cc4b4bd622dd7da8","modified":1614847896269},{"_id":"public/archives/2021/index.html","hash":"339f61a02f40eab43ff0cd2ef7a2f5181ddb771a","modified":1614847896269},{"_id":"public/archives/2021/02/index.html","hash":"82250c378ed486fa6a275cfc1b9cbcee9962e0dd","modified":1614847896269},{"_id":"public/index.html","hash":"ed4c8486a25150f5e5dcf5139f1bc8b86383b80e","modified":1614847896269},{"_id":"public/page/2/index.html","hash":"b6f042380dd0102b9078ec53e76ca286617ed93b","modified":1614847896269},{"_id":"public/page/3/index.html","hash":"17eda89a0b39e5815f71739d7ff5efad2aa9ebf5","modified":1614847896269},{"_id":"public/page/4/index.html","hash":"29582d1d0f5e92121e4dfe0136f9e25fd7815c0b","modified":1614847896269},{"_id":"public/page/5/index.html","hash":"c7ecfa4f2bd212dce5398f55cd487b4ae0841503","modified":1614847896269},{"_id":"public/categories/博客建站/index.html","hash":"585af79996da5832d466de2308b235d8b401069a","modified":1614847896270},{"_id":"public/categories/C-C/index.html","hash":"8c3442d9bb08f658d748969535eded9ce16f50e3","modified":1614847896270},{"_id":"public/categories/C-C/page/2/index.html","hash":"96b64bedfa2b0aa1dc20f7a82cb821abf23bd3b4","modified":1614847896270},{"_id":"public/categories/Git/index.html","hash":"3fc5a1814b260976c6702dc6fcae4b39b090aba6","modified":1614847896270},{"_id":"public/categories/Shell脚本/index.html","hash":"37ded26c6b91a3464bbad3861c9f838ba918f5fc","modified":1614847896270},{"_id":"public/categories/编译链接/index.html","hash":"ec8a0b13509c2b41b04d44c02169f986f52bc439","modified":1614847896270},{"_id":"public/categories/科普/index.html","hash":"cffe90e0b52ca6ffd769d4ef253006ac20ce2195","modified":1614847896270},{"_id":"public/categories/系统配置/index.html","hash":"5c0f2d7d821ed166edcaaa778f0c33a1df9ecb8c","modified":1614847896270},{"_id":"public/categories/Lua/index.html","hash":"e25c6bed7c99c01b87456735f817813f08dd506c","modified":1614847896270},{"_id":"public/categories/语音/index.html","hash":"8072d2d4730f1f55b993ed629b77b499d5a7c976","modified":1614847896270},{"_id":"public/tags/git/index.html","hash":"913f78241887b9ed682b4bd09c05c5b678331a83","modified":1614847896270},{"_id":"public/tags/hexo/index.html","hash":"8f283a629bd2b7de9c03d467b4cb080f9fbb3864","modified":1614847896270},{"_id":"public/tags/blog/index.html","hash":"77283dae84b83a07ee98daee225af55d4b28e8f4","modified":1614847896270},{"_id":"public/tags/大小端字节序/index.html","hash":"c94b09d8caccff39518b5e6dc26839539496e0c6","modified":1614847896270},{"_id":"public/tags/cJSON/index.html","hash":"4f9ec46b23fce779dd78b8d4825b401e9bbe7a11","modified":1614847896270},{"_id":"public/tags/tcp/index.html","hash":"863575bf84d3b451e1e539d4c165c6529a3e71a3","modified":1614847896270},{"_id":"public/tags/connect/index.html","hash":"9e22725abfb86746dc2a434b3e59aa21333f64d5","modified":1614847896270},{"_id":"public/tags/debug/index.html","hash":"7d7721c2c981f2b4cfba4df1bfe7832ec9901905","modified":1614847896270},{"_id":"public/tags/github徽章/index.html","hash":"1c9770ce91a718e8a5258fa793956ed35f4f1ed8","modified":1614847896270},{"_id":"public/tags/pthread/index.html","hash":"4724aa9978967965d6d783258493293fff858697","modified":1614847896270},{"_id":"public/tags/script/index.html","hash":"380626c13f40f61c8fb88e93e70fb445c6fe3770","modified":1614847896270},{"_id":"public/tags/代码覆盖率/index.html","hash":"180b513b6d536aabaf23f8bec1b553817c578772","modified":1614847896271},{"_id":"public/tags/fork-bomb/index.html","hash":"6451fbb805311c4958320272b857a41095055634","modified":1614847896271},{"_id":"public/tags/RPATH/index.html","hash":"7ae76f2e4b3d3598ae1edd67a5bf3739698ded65","modified":1614847896271},{"_id":"public/tags/RUNPATH/index.html","hash":"7fd60284334ced79ee15261fbcc184f839feb930","modified":1614847896271},{"_id":"public/tags/LD-DEBUG/index.html","hash":"91984d48fa59373ab5adff6c8916c45552c8de72","modified":1614847896271},{"_id":"public/tags/gcc/index.html","hash":"63b48ada75f9b9b9226baccfb90fd3654a02d88f","modified":1614847896271},{"_id":"public/tags/随机数/index.html","hash":"fe0115d79be18691de86e8ab58c39f025708e289","modified":1614847896271},{"_id":"public/tags/getw/index.html","hash":"14ad83036883b52d924058006a81a3dbc6c2a746","modified":1614847896271},{"_id":"public/tags/git仓库过大/index.html","hash":"9980f540a9fda4855e6be52f6694b137120f98f4","modified":1614847896271},{"_id":"public/tags/resume/index.html","hash":"4499c6c44f53cf5252245b040c018f24805ec301","modified":1614847896271},{"_id":"public/tags/技术简历/index.html","hash":"575a9ee28d11e5d34f1cb44a67adaafa76d48ca1","modified":1614847896271},{"_id":"public/tags/求职招聘/index.html","hash":"cf00eab3a3c21386a9bffb85c7be0c94e7e8cdc9","modified":1614847896271},{"_id":"public/tags/hidden/index.html","hash":"01fddcbcced271f27bdb5b9d27be98b9bfa6d13d","modified":1614847896271},{"_id":"public/tags/objcopy/index.html","hash":"ed030668bb86cf0b024db71fb902105e1fe8b752","modified":1614847896271},{"_id":"public/tags/Cloud-Computing/index.html","hash":"fb9adb32941d079535f47b1b30448f6448799226","modified":1614847896271},{"_id":"public/tags/mac/index.html","hash":"3439fc6e4fe20ae86c835ea8513e9839d111484a","modified":1614847896271},{"_id":"public/tags/Homebrew/index.html","hash":"dd1b274ee255bb8c8db54aeb9604eed09472067e","modified":1614847896271},{"_id":"public/tags/IO/index.html","hash":"5e668a61136825f61f29e8f4f1e4cff8efe0c2f6","modified":1614847896271},{"_id":"public/tags/keepalive/index.html","hash":"24b2dc878671eb53a1db0baba8760010208b00c6","modified":1614847896271},{"_id":"public/tags/ld/index.html","hash":"5263cbe32ccc5272bc94d941abda2e23e054660c","modified":1614847896272},{"_id":"public/tags/hash-style/index.html","hash":"ac8d187bd0a66307b73c4b75ad7b3995e1d6ebbc","modified":1614847896272},{"_id":"public/tags/link/index.html","hash":"6297c0d9f7939970818756e4e4af98e637e75c17","modified":1614847896272},{"_id":"public/tags/json/index.html","hash":"39aa2c17bfd63a2b6b75abe327575bdacc3d568b","modified":1614847896272},{"_id":"public/tags/listen/index.html","hash":"01f3b9abb2617d34705b2583b1debae70980e73f","modified":1614847896272},{"_id":"public/tags/read/index.html","hash":"a4b69425450143d7acc54083566c1401de59a5b0","modified":1614847896272},{"_id":"public/tags/write/index.html","hash":"a5e0fadf2155736e30f76b82f4c4e29d66082c8d","modified":1614847896272},{"_id":"public/tags/scriptreplay/index.html","hash":"270d0e1dc114e712bfe506284261e8e70fc9a1cd","modified":1614847896272},{"_id":"public/tags/OpenResty/index.html","hash":"d01c53def275227a433ba931654bd5689cd2b9b8","modified":1614847896272},{"_id":"public/tags/headset/index.html","hash":"05adfc2c7cfc4133cae6d05991c6a69c88be00ab","modified":1614847896272},{"_id":"public/tags/strtok/index.html","hash":"63e018fce740486af2e661a5e0f0bcb7a8409c69","modified":1614847896272},{"_id":"public/tags/strtok-r/index.html","hash":"ef93f92a4883c19000db2f8f3309eeaec0e67263","modified":1614847896273},{"_id":"public/tags/core-dump/index.html","hash":"690390e6646cc607cd0ac1f2e382bd256f5a3b4f","modified":1614847896273},{"_id":"public/tags/Speex/index.html","hash":"3db522705b814d3d6f7626bbf0549f0be16fd84f","modified":1614847896273},{"_id":"public/tags/wav/index.html","hash":"fabc5067c13524e6fa6ddf6ebc2b816f3d18d70a","modified":1614847896273},{"_id":"public/tags/lua-cjson/index.html","hash":"3bb8023613d731b901db4c0c051402dd5b8caf1d","modified":1614847896273},{"_id":"public/tags/sysroot/index.html","hash":"0a3f59617974ccfc2ae6717b8b4b515d99c7410e","modified":1614847896273},{"_id":"public/tags/lib/index.html","hash":"5d04b0e6fa6383f05b609f1ab82a0811512fd636","modified":1614847896273},{"_id":"public/tags/adb/index.html","hash":"2b8ad618d44d6fc729fdf76520729ff9e9a702cd","modified":1614847896273},{"_id":"public/CNAME","hash":"38d4e2a55e6a6d59148807d0c06b6789dba021cf","modified":1614847896286},{"_id":"public/images/avatar.png","hash":"8e9318448603822ae329ce0cfb435757987a4529","modified":1614847896286},{"_id":"public/images/wechat_public_qdode.png","hash":"3ff46821a249809d24cdcf6cabe8c25a0a48c3b2","modified":1614847896286},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1614847896287},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1614847896287},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1614847896287},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1614847896287},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1614847896287},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1614847896287},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1614847896287},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1614847896287},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1614847896287},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1614847896287},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1614847896287},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1614847896287},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1614847896287},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1614847896287},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1614847896287},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1614847896287},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1614847896287},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1614847896287},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1614847896287},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1614847896287},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1614847896287},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1614847896287},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1614847896287},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1614847896287},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1614847896287},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1614847896287},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1614847896287},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1614847896287},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1614847896287},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1614847896288},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1614847896288},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1614847896288},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1614847896288},{"_id":"public/2016/12/07/big-little-endian/big-little-endian.png","hash":"cb8c7bd337f3af69ebccc6364188e80de2ba2460","modified":1614847896288},{"_id":"public/2018/05/03/cjson/cjson-tree.png","hash":"4e164f571eca409223c887d51bb4e8b4a0b24135","modified":1614847896288},{"_id":"public/2019/09/09/git-clone-extra-large-project/source_code.png","hash":"64af4185b8a6984982364254c2cc41d2c69a3505","modified":1614847896288},{"_id":"public/2020/09/29/git-help-v3/git-work-flow.jpg","hash":"9452cdd7f9ebbf71739bfdaeb562c7301f4379c0","modified":1614847896288},{"_id":"public/2019/02/12/git-help-v2/git-work-flow.jpg","hash":"9452cdd7f9ebbf71739bfdaeb562c7301f4379c0","modified":1614847896288},{"_id":"public/2017/12/29/speex/aec.png","hash":"4f37f2c1e397c1599a32dc53b38475d4fe734438","modified":1614847896288},{"_id":"public/2016/09/05/floating-point-operation-in-script/awk.png","hash":"942bf0b15ac677fddc19a1739c3a93ce164d021a","modified":1614847896288},{"_id":"public/2016/09/05/floating-point-operation-in-script/bc.png","hash":"12f5c602a8a6c30e37c746f6ba704ae77fc5732f","modified":1614847896288},{"_id":"public/2018/09/25/coverage-of-code/gcovr_xxx.png","hash":"77efd3b478dae55d64c66b395d1cc0b0e9cb843f","modified":1614847896288},{"_id":"public/2018/09/25/coverage-of-code/gcovr_xxx_detail.png","hash":"f047da16d2aef613bdd7347dabcc9e1feb192fbf","modified":1614847896288},{"_id":"public/2019/06/03/wav/audio_code.txt","hash":"635e9f8a05e25d5ef57427f06f1ea30369a86e29","modified":1614847896288},{"_id":"public/2019/06/03/wav/wav_header.txt","hash":"e114330df62670af0ae57526a89bada21a973d24","modified":1614847896288},{"_id":"public/2017/06/27/io-model/asyn-io.png","hash":"e35c0215cb1e99c42e0b0cc6cb6e93acc4b638a1","modified":1614847896288},{"_id":"public/2017/06/27/io-model/blocking-io.png","hash":"146448880afc567708a992a47feb127e76208c8a","modified":1614847896288},{"_id":"public/2017/06/27/io-model/io-model.png","hash":"40dab4441c9461043939887feb4b852f5373fe5f","modified":1614847896288},{"_id":"public/2017/06/27/io-model/multi-io.png","hash":"ccf2023af478b48e30137f2df8658d56ea92c5da","modified":1614847896288},{"_id":"public/2017/06/27/io-model/signal-io.png","hash":"b8cacfd5a5f295019b03b1b68c5075e03578d1c7","modified":1614847896288},{"_id":"public/images/alipay.jpg","hash":"4f2863cd8c574e750883cde1ea466d7514b9b4ce","modified":1614847896698},{"_id":"public/images/website_icon.ico","hash":"d7a1be326c974a1aa24181a1628b7cd2e455bf53","modified":1614847896701},{"_id":"public/images/wechatpay.jpg","hash":"d492da1302b3e9e74305ac8de33ae361ef7559df","modified":1614847896709},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1614847896710},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1614847896710},{"_id":"public/2017/03/23/introduction-to-four-service-of-cloud-computing/Introduction-to-four-service-of-cloud-computing.jpg","hash":"ba128fe1ffafd8b0e5e90c5b3ed039a06ce5a0a8","modified":1614847896710},{"_id":"public/2016/09/20/standard-of-headphone/headset.png","hash":"7873b89a4697aa08742a2b4e7b2ac1493537fc08","modified":1614847896710},{"_id":"public/2018/09/25/coverage-of-code/gcovr_xxx_main.png","hash":"43b50b8acf04d5b80e0c8085726fbe951252c4ff","modified":1614847896710},{"_id":"public/2019/06/03/wav/audio_code.png","hash":"8dce8fbb17875a6c9365f8c0850bf890343a160f","modified":1614847896710},{"_id":"public/2017/06/27/io-model/no-blocking-io.png","hash":"d56f288ec9f3a10a8a1a89d596ba2a29a93cda19","modified":1614847896710},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1614847896717},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1614847896717},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1614847896717},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1614847896717},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1614847896717},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1614847896717},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1614847896717},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1614847896717},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1614847896717},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1614847896718},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1614847896718},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1614847896718},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1614847896718},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1614847896718},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1614847896718},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1614847896718},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1614847896718},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1614847896718},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1614847896718},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1614847896718},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1614847896718},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1614847896718},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1614847896718},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1614847896718},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1614847896718},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1614847896719},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1614847896719},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1614847896719},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1614847896719},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1614847896719},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1614847896719},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1614847896719},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1614847896719},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1614847896719},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1614847896719},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1614847896719},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1614847896719},{"_id":"public/css/main.css","hash":"63131321ca213aa5913586bbe6de70d71fa99c4d","modified":1614847896719},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1614847896719},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1614847896719},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1614847896719},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1614847896719},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1614847896719},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1614847896719},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1614847896719},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1614847896719},{"_id":"public/js/src/gitment.js","hash":"49878321b4bd8f3b8f8cd537c7965732f527c149","modified":1614847896719},{"_id":"public/js/src/gitmint.js","hash":"edf6d163bdd332db933fa092c1e3b39315da792b","modified":1614847896719},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1614847896719},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1614847896720},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1614847896720},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1614847896720},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1614847896720},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1614847896720},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1614847896720},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1614847896720},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1614847896720},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1614847896720},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1614847896720},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1614847896720},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1614847896720},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1614847896720},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1614847896720},{"_id":"public/2017/06/27/io-model/compare-io.png","hash":"ad5899920019da434f7d831281b6b7c73330275f","modified":1614847896721},{"_id":"public/2019/06/03/wav/wav_header.png","hash":"f1faf3d709bde15b0f338b122dfa94f4ad2b64fc","modified":1614847896725},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1614847896728}],"Category":[{"name":"博客建站","_id":"cklumqge7000579n5779v0xll"},{"name":"C/C++","_id":"cklumqged000b79n5z0kg4m92"},{"name":"Git","_id":"cklumqgek000r79n5ecaafqi1"},{"name":"Shell脚本","_id":"cklumqgen001179n5jhcp3lxl"},{"name":"编译链接","_id":"cklumqgex001r79n5ajbp9mt3"},{"name":"科普","_id":"cklumqgf2002879n5cgi2lq7i"},{"name":"系统配置","_id":"cklumqgfa002t79n5ifqhm78y"},{"name":"Lua","_id":"cklumqgfl003j79n5erf0fnxd"},{"name":"语音","_id":"cklumqgfp003o79n5kz01syqc"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> \n\t\t<title>公益</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.baobeihuijia.com/\" homePageName=\"更多信息\"></script>\n\t</body>\n</html>","source":"commonweal.html","raw":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> \n\t\t<title>公益</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.baobeihuijia.com/\" homePageName=\"更多信息\"></script>\n\t</body>\n</html>","date":"2020-02-21T07:10:45.035Z","updated":"2020-02-21T07:10:45.035Z","path":"commonweal.html","title":"","comments":1,"layout":"page","_id":"cklumqgcb000079n5vcf8rr9s","content":"<!DOCTYPE html>\n<html>\n\t<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"> \n\t\t<title>公益</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://www.baobeihuijia.com/\" homepagename=\"更多信息\"></script>\n\t</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n\t<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"> \n\t\t<title>公益</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://www.baobeihuijia.com/\" homepagename=\"更多信息\"></script>\n\t</body>\n</html>"},{"title":"关于作者","Antuor":"AnSwEr(Weijie Yuan)","comments":0,"date":"2020-02-21T03:15:58.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于作者\nAntuor: AnSwEr(Weijie Yuan)\ncomments: false\ndate: 2020-02-21 11:15:58\ntype: \"about\"\n---","updated":"2020-02-21T06:21:42.190Z","path":"about/index.html","layout":"page","_id":"cklumqge3000279n5e23t3w2b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","Antuor":"AnSwEr(Weijie Yuan)","comments":0,"date":"2016-07-10T05:39:58.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nAntuor: AnSwEr(Weijie Yuan)\ncomments: false\ndate: 2016-07-10 13:39:58\ntype: \"categories\"\n---\n","updated":"2019-04-22T08:44:09.995Z","path":"categories/index.html","layout":"page","_id":"cklumqge5000479n53a2f163h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","Antuor":"AnSwEr(Weijie Yuan)","date":"2016-07-10T05:36:38.000Z","comments":0,"type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nAntuor: AnSwEr(Weijie Yuan)\ndate: 2016-07-10 13:36:38\ncomments: false\ntype: \"tags\"\n---\n","updated":"2019-04-22T08:44:09.995Z","path":"tags/index.html","layout":"page","_id":"cklumqge9000879n514n0ipl7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo+Github博客备份方法","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-08-10T13:16:48.000Z","_content":"\n使用hexo+github搭建的博客,博客作为一个单独的github仓库存在,可是仓库中不包含你每篇博客的源文件。如果你换了一台机器想要更新博客或者想重新发布以前的博客,这就不好办了。我这里推荐一种云端备份的方法。\n\n----------\n<!--more-->\n\n## How\n- 首先,在你博客的仓库中新开一个分支,作为backup(master为博客的推送分支),并且设为默认分支。\n- 将远程仓库获取到本地(两个仓库都需要获取)。\n- 每次写完博客之前,需要先获取更新:\n```\n$ git pull\n```\n- 写完后,对backup分支进行备份:\n```\n$ git add .\n$ git commit -m \"message\"\n$ git push\n```\n- 然后更新博客到master分支:\n```\n$ hexo n \"postName\" # hexo new 新建文章\n$ hexo g # hexo generate 生成静态页面至public目录\n$ hexo s # hexo server 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n$ hexo d # hexo deploy #将.deploy目录部署到GitHub\n$ hexo clean\n```\n- 最后将master分支的修改获取到本地:\n```\n$ git pull\n```\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/backup-of-blog-with-hexo-and-github.md","raw":"---\ntitle: Hexo+Github博客备份方法\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - git\n  - hexo\n  - blog\ndate: 2016-08-10 21:16:48\ncategories: 博客建站\n---\n\n使用hexo+github搭建的博客,博客作为一个单独的github仓库存在,可是仓库中不包含你每篇博客的源文件。如果你换了一台机器想要更新博客或者想重新发布以前的博客,这就不好办了。我这里推荐一种云端备份的方法。\n\n----------\n<!--more-->\n\n## How\n- 首先,在你博客的仓库中新开一个分支,作为backup(master为博客的推送分支),并且设为默认分支。\n- 将远程仓库获取到本地(两个仓库都需要获取)。\n- 每次写完博客之前,需要先获取更新:\n```\n$ git pull\n```\n- 写完后,对backup分支进行备份:\n```\n$ git add .\n$ git commit -m \"message\"\n$ git push\n```\n- 然后更新博客到master分支:\n```\n$ hexo n \"postName\" # hexo new 新建文章\n$ hexo g # hexo generate 生成静态页面至public目录\n$ hexo s # hexo server 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n$ hexo d # hexo deploy #将.deploy目录部署到GitHub\n$ hexo clean\n```\n- 最后将master分支的修改获取到本地:\n```\n$ git pull\n```\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"backup-of-blog-with-hexo-and-github","published":1,"updated":"2019-07-24T03:13:24.075Z","layout":"post","photos":[],"link":"","_id":"cklumqge0000179n5yehlycx3","content":"<p>使用hexo+github搭建的博客,博客作为一个单独的github仓库存在,可是仓库中不包含你每篇博客的源文件。如果你换了一台机器想要更新博客或者想重新发布以前的博客,这就不好办了。我这里推荐一种云端备份的方法。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><ul>\n<li>首先,在你博客的仓库中新开一个分支,作为backup(master为博客的推送分支),并且设为默认分支。</li>\n<li>将远程仓库获取到本地(两个仓库都需要获取)。</li>\n<li><p>每次写完博客之前,需要先获取更新:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写完后,对backup分支进行备份:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git add .</span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"message\"</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后更新博客到master分支:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo n <span class=\"string\">\"postName\"</span> <span class=\"comment\"># hexo new 新建文章</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo g <span class=\"comment\"># hexo generate 生成静态页面至public目录</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo s <span class=\"comment\"># hexo server 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo d <span class=\"comment\"># hexo deploy #将.deploy目录部署到GitHub</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo clean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后将master分支的修改获取到本地:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>使用hexo+github搭建的博客,博客作为一个单独的github仓库存在,可是仓库中不包含你每篇博客的源文件。如果你换了一台机器想要更新博客或者想重新发布以前的博客,这就不好办了。我这里推荐一种云端备份的方法。</p>\n<hr>","more":"<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><ul>\n<li>首先,在你博客的仓库中新开一个分支,作为backup(master为博客的推送分支),并且设为默认分支。</li>\n<li>将远程仓库获取到本地(两个仓库都需要获取)。</li>\n<li><p>每次写完博客之前,需要先获取更新:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写完后,对backup分支进行备份:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git add .</span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"message\"</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后更新博客到master分支:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo n <span class=\"string\">\"postName\"</span> <span class=\"comment\"># hexo new 新建文章</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo g <span class=\"comment\"># hexo generate 生成静态页面至public目录</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo s <span class=\"comment\"># hexo server 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo d <span class=\"comment\"># hexo deploy #将.deploy目录部署到GitHub</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo clean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后将master分支的修改获取到本地:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"C程序判断你主机的数据存储方式(大端和小端)","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-12-07T03:16:51.000Z","_content":"\n本文将使用C语言编写一个可以判断你主机数据存储方式(大端和小端)的程序.\n\n----------\n<!--more-->\n\n## C程序判断你主机的数据存储方式(大端和小端)\n### 大端和小端字节序\n计算机硬件存储数据的方式有两种: 大端字节序(big endian) 和 小端字节序(little endian),两者的区别可以简单理解为:\n- 大端: 数据高位字节放在内存低地址(人类读写的习惯).\n- 小端: 数据高位字节放在内存高地址.\n\n如现在有数 0x1234,则两者存储方式如下:\n![大小端](big-little-endian.png)\n\n>  既然大端字节序符合人类读写的习惯,那么为什么会有小端字节序呢？\n> 因为大多数默认情况下计算机的电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。但是，人类还是习惯读写大端字节序。所以，除了计算机的内部处理，其他的场合几乎都是大端字节序，比如网络传输和文件储存。\n\n当然并不是所有的计算机处理器都是小端模式的,目前IBM和Freescale的一些处理器以及一些常见的单片机芯片等都是采用大端字节序存储数据.而市面上大部分CPU则是采用小端字节序,如intel等.\n\n\n### 实现([完整代码](https://github.com/AnSwErYWJ/DogFood/blob/master/C/host_byte_order.c))\n本例都认为short占2个字节,不考虑可移植的情况.\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nunion _byteorder\n{\n    short s;\n    char c[2];\n};\n\nint main(void)\n{\n    union _byteorder un;\n\n    un.s = 0x0102;\n    \n    if(sizeof(short) == 2)\n    {\n        if(un.c[0] == 2 && un.c[1] == 1)\n            printf(\"little-endian\\n\");\n        else if(un.c[0] == 1 && un.c[1] == 2)\n            printf(\"big-endian\\n\");\n        else\n            fprintf(stderr,\"Error:can not judge host byte order.\\n\");\n    }\n    else\n        printf(\"sizeof(short) = %ld\\n\",sizeof(short));\n    \n    exit(EXIT_SUCCESS);\n}\n```\n这里利用了``union`` 中所有的数据成员共用一个空间，同一时间只能储存其中一个数据成员的特性.\n首先分配了一个占2个字节的内存空间(``union``分配的空间需要容纳最大长度的数据成员),将``0x0102``赋予``short``型变量.\n然后利用``char``数组,按一个字节的长度依次取出数据,然后利用上节介绍的大小端存储方式的不同进行判断.\n\n## Reference\n- [理解字节序](http://www.ruanyifeng.com/blog/2016/11/byte-order.html)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","source":"_posts/big-little-endian.md","raw":"---\ntitle: C程序判断你主机的数据存储方式(大端和小端)\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - 大小端字节序\ndate: 2016-12-07 11:16:51\ncategories: C/C++\n---\n\n本文将使用C语言编写一个可以判断你主机数据存储方式(大端和小端)的程序.\n\n----------\n<!--more-->\n\n## C程序判断你主机的数据存储方式(大端和小端)\n### 大端和小端字节序\n计算机硬件存储数据的方式有两种: 大端字节序(big endian) 和 小端字节序(little endian),两者的区别可以简单理解为:\n- 大端: 数据高位字节放在内存低地址(人类读写的习惯).\n- 小端: 数据高位字节放在内存高地址.\n\n如现在有数 0x1234,则两者存储方式如下:\n![大小端](big-little-endian.png)\n\n>  既然大端字节序符合人类读写的习惯,那么为什么会有小端字节序呢？\n> 因为大多数默认情况下计算机的电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。但是，人类还是习惯读写大端字节序。所以，除了计算机的内部处理，其他的场合几乎都是大端字节序，比如网络传输和文件储存。\n\n当然并不是所有的计算机处理器都是小端模式的,目前IBM和Freescale的一些处理器以及一些常见的单片机芯片等都是采用大端字节序存储数据.而市面上大部分CPU则是采用小端字节序,如intel等.\n\n\n### 实现([完整代码](https://github.com/AnSwErYWJ/DogFood/blob/master/C/host_byte_order.c))\n本例都认为short占2个字节,不考虑可移植的情况.\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nunion _byteorder\n{\n    short s;\n    char c[2];\n};\n\nint main(void)\n{\n    union _byteorder un;\n\n    un.s = 0x0102;\n    \n    if(sizeof(short) == 2)\n    {\n        if(un.c[0] == 2 && un.c[1] == 1)\n            printf(\"little-endian\\n\");\n        else if(un.c[0] == 1 && un.c[1] == 2)\n            printf(\"big-endian\\n\");\n        else\n            fprintf(stderr,\"Error:can not judge host byte order.\\n\");\n    }\n    else\n        printf(\"sizeof(short) = %ld\\n\",sizeof(short));\n    \n    exit(EXIT_SUCCESS);\n}\n```\n这里利用了``union`` 中所有的数据成员共用一个空间，同一时间只能储存其中一个数据成员的特性.\n首先分配了一个占2个字节的内存空间(``union``分配的空间需要容纳最大长度的数据成员),将``0x0102``赋予``short``型变量.\n然后利用``char``数组,按一个字节的长度依次取出数据,然后利用上节介绍的大小端存储方式的不同进行判断.\n\n## Reference\n- [理解字节序](http://www.ruanyifeng.com/blog/2016/11/byte-order.html)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","slug":"big-little-endian","published":1,"updated":"2019-07-24T03:15:43.997Z","layout":"post","photos":[],"link":"","_id":"cklumqge4000379n5neoiawht","content":"<p>本文将使用C语言编写一个可以判断你主机数据存储方式(大端和小端)的程序.</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"C程序判断你主机的数据存储方式-大端和小端\"><a href=\"#C程序判断你主机的数据存储方式-大端和小端\" class=\"headerlink\" title=\"C程序判断你主机的数据存储方式(大端和小端)\"></a>C程序判断你主机的数据存储方式(大端和小端)</h2><h3 id=\"大端和小端字节序\"><a href=\"#大端和小端字节序\" class=\"headerlink\" title=\"大端和小端字节序\"></a>大端和小端字节序</h3><p>计算机硬件存储数据的方式有两种: 大端字节序(big endian) 和 小端字节序(little endian),两者的区别可以简单理解为:</p>\n<ul>\n<li>大端: 数据高位字节放在内存低地址(人类读写的习惯).</li>\n<li>小端: 数据高位字节放在内存高地址.</li>\n</ul>\n<p>如现在有数 0x1234,则两者存储方式如下:<br><img src=\"/2016/12/07/big-little-endian/big-little-endian.png\" alt=\"大小端\"></p>\n<blockquote>\n<p> 既然大端字节序符合人类读写的习惯,那么为什么会有小端字节序呢？<br>因为大多数默认情况下计算机的电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。但是，人类还是习惯读写大端字节序。所以，除了计算机的内部处理，其他的场合几乎都是大端字节序，比如网络传输和文件储存。</p>\n</blockquote>\n<p>当然并不是所有的计算机处理器都是小端模式的,目前IBM和Freescale的一些处理器以及一些常见的单片机芯片等都是采用大端字节序存储数据.而市面上大部分CPU则是采用小端字节序,如intel等.</p>\n<h3 id=\"实现-完整代码\"><a href=\"#实现-完整代码\" class=\"headerlink\" title=\"实现(完整代码)\"></a>实现(<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/host_byte_order.c\" target=\"_blank\" rel=\"noopener\">完整代码</a>)</h3><p>本例都认为short占2个字节,不考虑可移植的情况.<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> _byteorder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">short</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> _byteorder un;</span><br><span class=\"line\"></span><br><span class=\"line\">    un.s = <span class=\"number\">0x0102</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">short</span>) == <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(un.c[<span class=\"number\">0</span>] == <span class=\"number\">2</span> &amp;&amp; un.c[<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"little-endian\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(un.c[<span class=\"number\">0</span>] == <span class=\"number\">1</span> &amp;&amp; un.c[<span class=\"number\">1</span>] == <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"big-endian\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"Error:can not judge host byte order.\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"sizeof(short) = %ld\\n\"</span>,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">short</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里利用了<code>union</code> 中所有的数据成员共用一个空间，同一时间只能储存其中一个数据成员的特性.<br>首先分配了一个占2个字节的内存空间(<code>union</code>分配的空间需要容纳最大长度的数据成员),将<code>0x0102</code>赋予<code>short</code>型变量.<br>然后利用<code>char</code>数组,按一个字节的长度依次取出数据,然后利用上节介绍的大小端存储方式的不同进行判断.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/11/byte-order.html\" target=\"_blank\" rel=\"noopener\">理解字节序</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将使用C语言编写一个可以判断你主机数据存储方式(大端和小端)的程序.</p>\n<hr>","more":"<h2 id=\"C程序判断你主机的数据存储方式-大端和小端\"><a href=\"#C程序判断你主机的数据存储方式-大端和小端\" class=\"headerlink\" title=\"C程序判断你主机的数据存储方式(大端和小端)\"></a>C程序判断你主机的数据存储方式(大端和小端)</h2><h3 id=\"大端和小端字节序\"><a href=\"#大端和小端字节序\" class=\"headerlink\" title=\"大端和小端字节序\"></a>大端和小端字节序</h3><p>计算机硬件存储数据的方式有两种: 大端字节序(big endian) 和 小端字节序(little endian),两者的区别可以简单理解为:</p>\n<ul>\n<li>大端: 数据高位字节放在内存低地址(人类读写的习惯).</li>\n<li>小端: 数据高位字节放在内存高地址.</li>\n</ul>\n<p>如现在有数 0x1234,则两者存储方式如下:<br><img src=\"/2016/12/07/big-little-endian/big-little-endian.png\" alt=\"大小端\"></p>\n<blockquote>\n<p> 既然大端字节序符合人类读写的习惯,那么为什么会有小端字节序呢？<br>因为大多数默认情况下计算机的电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。但是，人类还是习惯读写大端字节序。所以，除了计算机的内部处理，其他的场合几乎都是大端字节序，比如网络传输和文件储存。</p>\n</blockquote>\n<p>当然并不是所有的计算机处理器都是小端模式的,目前IBM和Freescale的一些处理器以及一些常见的单片机芯片等都是采用大端字节序存储数据.而市面上大部分CPU则是采用小端字节序,如intel等.</p>\n<h3 id=\"实现-完整代码\"><a href=\"#实现-完整代码\" class=\"headerlink\" title=\"实现(完整代码)\"></a>实现(<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/host_byte_order.c\" target=\"_blank\" rel=\"noopener\">完整代码</a>)</h3><p>本例都认为short占2个字节,不考虑可移植的情况.<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> _byteorder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">short</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> _byteorder un;</span><br><span class=\"line\"></span><br><span class=\"line\">    un.s = <span class=\"number\">0x0102</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">short</span>) == <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(un.c[<span class=\"number\">0</span>] == <span class=\"number\">2</span> &amp;&amp; un.c[<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"little-endian\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(un.c[<span class=\"number\">0</span>] == <span class=\"number\">1</span> &amp;&amp; un.c[<span class=\"number\">1</span>] == <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"big-endian\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"Error:can not judge host byte order.\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"sizeof(short) = %ld\\n\"</span>,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">short</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里利用了<code>union</code> 中所有的数据成员共用一个空间，同一时间只能储存其中一个数据成员的特性.<br>首先分配了一个占2个字节的内存空间(<code>union</code>分配的空间需要容纳最大长度的数据成员),将<code>0x0102</code>赋予<code>short</code>型变量.<br>然后利用<code>char</code>数组,按一个字节的长度依次取出数据,然后利用上节介绍的大小端存储方式的不同进行判断.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/11/byte-order.html\" target=\"_blank\" rel=\"noopener\">理解字节序</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"将二进制文件作为目标文件中的一个段","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2019-07-24T03:50:23.000Z","_content":"\n本文将展示，如何将一个二进制文件(如图片、音频等)作为目标文件中的一个段，该技巧主要应用在一些无文件系统的平台。\n\n-----\n\n<!--more-->\n\n本次的实验场景为`i386:x86-64 GNU/Linux`，测试音频为`nhxc.wav`，测试程序为`bin2obj.c`。\n\n## 查看该平台的ELF文件相关信息\n生成目标文件\n```\n$ gcc -c bin2obj.c -o bin2obj.o\n```\n\n查看该平台`ELF`文件相关信息\n```\n$ objdump -x bin2obj.o\n\nbin2obj.o:     file format elf64-x86-64\nbin2obj.o\narchitecture: i386:x86-64, flags 0x00000011:\nHAS_RELOC, HAS_SYMS\nstart address 0x0000000000000000\n```\n由上可知，文件格式为`elf64-x86-64`，`CPU`架构为`architecture`。\n\n## 转换\n首先通过`objcopy --help`选项查看相关参数的意义:\n```\n$ objcopy --help\n-I --input-target <bfdname>      Assume input file is in format <bfdname>\n-O --output-target <bfdname>     Create an output file in format <bfdname>\n-B --binary-architecture <arch>  Set output arch, when input is arch-less\n......\nobjcopy: supported targets: elf64-x86-64 elf32-i386 elf32-iamcu elf32-x86-64 a.out-i386-linux pei-i386 pei-x86-64 elf64-l1om elf64-k1om elf64-little elf64-big elf32-little elf32-big pe-x86-64 pe-bigobj-x86-64 pe-i386 plugin srec symbolsrec verilog tekhex binary ihex\n```\n由上可知，`-I`选项指定输入文件的格式，`-O`指定输出文件的格式，在`supported targets`中选择对应的格式；-B是指定目标文件的架构`i386:x86-64`，即上文`objdump -x`命令查询的`architecture`。\n\n转换：\n```\n$ objcopy -I binary -O elf64-x86-64 -B i386:x86-64 nhxc.wav audio.o\n```\n\n查看转换后生成的目标文件：\n```\n$ objdump -x audio.o\n\naudio.o:     file format elf64-x86-64\naudio.o\narchitecture: i386:x86-64, flags 0x00000010:\nHAS_SYMS\nstart address 0x0000000000000000\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  0 .data         0000fab0  0000000000000000  0000000000000000  00000040  2**0\n                  CONTENTS, ALLOC, LOAD, DATA\nSYMBOL TABLE:\n0000000000000000 l    d  .data\t0000000000000000 .data\n0000000000000000 g       .data\t0000000000000000 _binary_nhxc_wav_start\n000000000000fab0 g       .data\t0000000000000000 _binary_nhxc_wav_end\n000000000000fab0 g       *ABS*\t0000000000000000 _binary_nhxc_wav_size\n```\n可以看到`file format`、`architecture`信息与`bin2obj.o`的相同，`_binary_nhxc_wav_start`指向音频内容的起始地址，`_binary_nhxc_wav_end`指向音频内容的结尾地址，`_binary_nhxc_wav_size`指向文件大小的存储地址。\n> `_binary_*_start/end/size`，`*`是二进制文件的文件名及后缀名。\n\n## 测试\n[bin2obj.c](https://github.com/AnSwErYWJ/DogFood/blob/master/C/bin2obj/bin2obj.c)：\n```\n#include <stdio.h>\n#include <elf.h>\n\nextern _binary_nhxc_wav_start;\nextern _binary_nhxc_wav_end;\nextern _binary_nhxc_wav_size;\n\nint main() {\n\tprintf(\"binary to object:\\n\");\n    \n\tprintf(\"elf head: %ld\\n\", sizeof(Elf64_Ehdr));\n    printf(\"_binary_nhxc_wav_size: %p\\n_binary_nhxc_wav_end: %p\\n_binary_nhxc_wav_size: %p\\n\", &_binary_nhxc_wav_start, &_binary_nhxc_wav_end,  &_binary_nhxc_wav_size);\n\n    unsigned char * audio_buf = (unsigned char *)&_binary_nhxc_wav_start;\n    unsigned long size = (unsigned long)&_binary_nhxc_wav_size;\n\n\tFILE *fp = fopen(\"./out.wav\", \"wb\");\n\tif (!fp) {\n\t\tfprintf(stderr, \"fopen failed!\\n\");\n\t\treturn -1;\n\t}\n\n\tfwrite(audio_buf, size, 1, fp);\n\n\tfclose(fp);\n\n\treturn 0;\n}\n```\n通过`_binary_nhxc_wav_start`和`_binary_nhxc_wav_size`两个符号，读取音频文件。\n\n编译并运行：\n```\n$ gcc -c bin2obj.c -o bin2obj.o\n$ g++ bin2obj.o audio.o -o bin2obj\n$ ./bin2obj\nbinary to object:\nelf head: 64\n_binary_nhxc_wav_size: 0x601040\n_binary_nhxc_wav_end: 0x610af0\n_binary_nhxc_wav_size: 0xfab0\n```\n比对写入的文件`out.wav`与原始文件`nhxc.wav`，完全一致：\n```\n155e62d81e84fa7493fefe82223bcc2a  nhxc.wav\n155e62d81e84fa7493fefe82223bcc2a  out.wav\n```\n\n查看audio.o：\n```\n$ hexdump -C audio.o | head -n 5\n00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|\n00000010  01 00 3e 00 01 00 00 00  00 00 00 00 00 00 00 00  |..>.............|\n00000020  00 00 00 00 00 00 00 00  d0 fb 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 40 00 00 00  00 00 40 00 05 00 02 00  |....@.....@.....|\n00000040  52 49 46 46 a8 fa 00 00  57 41 56 45 66 6d 74 20  |RIFF....WAVEfmt |\n```\n如程序输出，`ELF`文件头部信息结构体为64字节，而转换生成的目标文件中，音频内容始于`0x40`字节偏移（`wav`头始于`RIFF`，可以参考[wav文件解析](http://answerywj.com/2019/06/03/wav/)），而`0x40`正是十进制的`64`。\n\n\n## Reference\n- 《程序员的自我修养——链接、装载与库》P68\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/binary-to-object-file.md","raw":"---\ntitle: 将二进制文件作为目标文件中的一个段\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - null\n  - null\ndate: 2019-07-24 11:50:23\ncategories:\n---\n\n本文将展示，如何将一个二进制文件(如图片、音频等)作为目标文件中的一个段，该技巧主要应用在一些无文件系统的平台。\n\n-----\n\n<!--more-->\n\n本次的实验场景为`i386:x86-64 GNU/Linux`，测试音频为`nhxc.wav`，测试程序为`bin2obj.c`。\n\n## 查看该平台的ELF文件相关信息\n生成目标文件\n```\n$ gcc -c bin2obj.c -o bin2obj.o\n```\n\n查看该平台`ELF`文件相关信息\n```\n$ objdump -x bin2obj.o\n\nbin2obj.o:     file format elf64-x86-64\nbin2obj.o\narchitecture: i386:x86-64, flags 0x00000011:\nHAS_RELOC, HAS_SYMS\nstart address 0x0000000000000000\n```\n由上可知，文件格式为`elf64-x86-64`，`CPU`架构为`architecture`。\n\n## 转换\n首先通过`objcopy --help`选项查看相关参数的意义:\n```\n$ objcopy --help\n-I --input-target <bfdname>      Assume input file is in format <bfdname>\n-O --output-target <bfdname>     Create an output file in format <bfdname>\n-B --binary-architecture <arch>  Set output arch, when input is arch-less\n......\nobjcopy: supported targets: elf64-x86-64 elf32-i386 elf32-iamcu elf32-x86-64 a.out-i386-linux pei-i386 pei-x86-64 elf64-l1om elf64-k1om elf64-little elf64-big elf32-little elf32-big pe-x86-64 pe-bigobj-x86-64 pe-i386 plugin srec symbolsrec verilog tekhex binary ihex\n```\n由上可知，`-I`选项指定输入文件的格式，`-O`指定输出文件的格式，在`supported targets`中选择对应的格式；-B是指定目标文件的架构`i386:x86-64`，即上文`objdump -x`命令查询的`architecture`。\n\n转换：\n```\n$ objcopy -I binary -O elf64-x86-64 -B i386:x86-64 nhxc.wav audio.o\n```\n\n查看转换后生成的目标文件：\n```\n$ objdump -x audio.o\n\naudio.o:     file format elf64-x86-64\naudio.o\narchitecture: i386:x86-64, flags 0x00000010:\nHAS_SYMS\nstart address 0x0000000000000000\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  0 .data         0000fab0  0000000000000000  0000000000000000  00000040  2**0\n                  CONTENTS, ALLOC, LOAD, DATA\nSYMBOL TABLE:\n0000000000000000 l    d  .data\t0000000000000000 .data\n0000000000000000 g       .data\t0000000000000000 _binary_nhxc_wav_start\n000000000000fab0 g       .data\t0000000000000000 _binary_nhxc_wav_end\n000000000000fab0 g       *ABS*\t0000000000000000 _binary_nhxc_wav_size\n```\n可以看到`file format`、`architecture`信息与`bin2obj.o`的相同，`_binary_nhxc_wav_start`指向音频内容的起始地址，`_binary_nhxc_wav_end`指向音频内容的结尾地址，`_binary_nhxc_wav_size`指向文件大小的存储地址。\n> `_binary_*_start/end/size`，`*`是二进制文件的文件名及后缀名。\n\n## 测试\n[bin2obj.c](https://github.com/AnSwErYWJ/DogFood/blob/master/C/bin2obj/bin2obj.c)：\n```\n#include <stdio.h>\n#include <elf.h>\n\nextern _binary_nhxc_wav_start;\nextern _binary_nhxc_wav_end;\nextern _binary_nhxc_wav_size;\n\nint main() {\n\tprintf(\"binary to object:\\n\");\n    \n\tprintf(\"elf head: %ld\\n\", sizeof(Elf64_Ehdr));\n    printf(\"_binary_nhxc_wav_size: %p\\n_binary_nhxc_wav_end: %p\\n_binary_nhxc_wav_size: %p\\n\", &_binary_nhxc_wav_start, &_binary_nhxc_wav_end,  &_binary_nhxc_wav_size);\n\n    unsigned char * audio_buf = (unsigned char *)&_binary_nhxc_wav_start;\n    unsigned long size = (unsigned long)&_binary_nhxc_wav_size;\n\n\tFILE *fp = fopen(\"./out.wav\", \"wb\");\n\tif (!fp) {\n\t\tfprintf(stderr, \"fopen failed!\\n\");\n\t\treturn -1;\n\t}\n\n\tfwrite(audio_buf, size, 1, fp);\n\n\tfclose(fp);\n\n\treturn 0;\n}\n```\n通过`_binary_nhxc_wav_start`和`_binary_nhxc_wav_size`两个符号，读取音频文件。\n\n编译并运行：\n```\n$ gcc -c bin2obj.c -o bin2obj.o\n$ g++ bin2obj.o audio.o -o bin2obj\n$ ./bin2obj\nbinary to object:\nelf head: 64\n_binary_nhxc_wav_size: 0x601040\n_binary_nhxc_wav_end: 0x610af0\n_binary_nhxc_wav_size: 0xfab0\n```\n比对写入的文件`out.wav`与原始文件`nhxc.wav`，完全一致：\n```\n155e62d81e84fa7493fefe82223bcc2a  nhxc.wav\n155e62d81e84fa7493fefe82223bcc2a  out.wav\n```\n\n查看audio.o：\n```\n$ hexdump -C audio.o | head -n 5\n00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|\n00000010  01 00 3e 00 01 00 00 00  00 00 00 00 00 00 00 00  |..>.............|\n00000020  00 00 00 00 00 00 00 00  d0 fb 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 40 00 00 00  00 00 40 00 05 00 02 00  |....@.....@.....|\n00000040  52 49 46 46 a8 fa 00 00  57 41 56 45 66 6d 74 20  |RIFF....WAVEfmt |\n```\n如程序输出，`ELF`文件头部信息结构体为64字节，而转换生成的目标文件中，音频内容始于`0x40`字节偏移（`wav`头始于`RIFF`，可以参考[wav文件解析](http://answerywj.com/2019/06/03/wav/)），而`0x40`正是十进制的`64`。\n\n\n## Reference\n- 《程序员的自我修养——链接、装载与库》P68\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"binary-to-object-file","published":1,"updated":"2019-07-24T07:40:57.774Z","layout":"post","photos":[],"link":"","_id":"cklumqge8000779n5zl4bdzlr","content":"<p>本文将展示，如何将一个二进制文件(如图片、音频等)作为目标文件中的一个段，该技巧主要应用在一些无文件系统的平台。</p>\n<hr>\n<a id=\"more\"></a>\n<p>本次的实验场景为<code>i386:x86-64 GNU/Linux</code>，测试音频为<code>nhxc.wav</code>，测试程序为<code>bin2obj.c</code>。</p>\n<h2 id=\"查看该平台的ELF文件相关信息\"><a href=\"#查看该平台的ELF文件相关信息\" class=\"headerlink\" title=\"查看该平台的ELF文件相关信息\"></a>查看该平台的ELF文件相关信息</h2><p>生成目标文件<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -c bi<span class=\"symbol\">n2</span>obj.c -o bi<span class=\"symbol\">n2</span>obj.o</span><br></pre></td></tr></table></figure></p>\n<p>查看该平台<code>ELF</code>文件相关信息<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objdump -x bin2obj.o</span><br><span class=\"line\"></span><br><span class=\"line\">bin2obj.o:     file format elf64-x86-64</span><br><span class=\"line\">bin2obj.o</span><br><span class=\"line\">architecture: i386:x86-64, flags 0x00000011:</span><br><span class=\"line\">HAS_RELOC, HAS_SYMS</span><br><span class=\"line\">start<span class=\"built_in\"> address </span>0x0000000000000000</span><br></pre></td></tr></table></figure></p>\n<p>由上可知，文件格式为<code>elf64-x86-64</code>，<code>CPU</code>架构为<code>architecture</code>。</p>\n<h2 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h2><p>首先通过<code>objcopy --help</code>选项查看相关参数的意义:<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objcopy --<span class=\"keyword\">help</span></span><br><span class=\"line\">-I --<span class=\"keyword\">input</span>-target &lt;bfdname&gt;      Assume <span class=\"keyword\">input</span> <span class=\"keyword\">file</span> is <span class=\"keyword\">in</span> <span class=\"keyword\">format</span> &lt;bfdname&gt;</span><br><span class=\"line\">-O --output-target &lt;bfdname&gt;     Create <span class=\"keyword\">an</span> output <span class=\"keyword\">file</span> <span class=\"keyword\">in</span> <span class=\"keyword\">format</span> &lt;bfdname&gt;</span><br><span class=\"line\">-B --binary-architecture &lt;<span class=\"keyword\">arch</span>&gt;  <span class=\"keyword\">Set</span> output <span class=\"keyword\">arch</span>, when <span class=\"keyword\">input</span> is <span class=\"keyword\">arch</span>-less</span><br><span class=\"line\">......</span><br><span class=\"line\">objcopy: supported targets: elf64-x86-64 elf32-i386 elf32-iamcu elf32-x86-64 a.<span class=\"keyword\">out</span>-i386-linux pei-i386 pei-x86-64 elf64-l1om elf64-k1om elf64-little elf64-big elf32-little elf32-big pe-x86-64 pe-bigobj-x86-64 pe-i386 <span class=\"keyword\">plugin</span> srec symbolsrec verilog tekhex binary ihex</span><br></pre></td></tr></table></figure></p>\n<p>由上可知，<code>-I</code>选项指定输入文件的格式，<code>-O</code>指定输出文件的格式，在<code>supported targets</code>中选择对应的格式；-B是指定目标文件的架构<code>i386:x86-64</code>，即上文<code>objdump -x</code>命令查询的<code>architecture</code>。</p>\n<p>转换：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objcopy -I binary -O elf64-x86-<span class=\"number\">64</span> -B i386:x86-<span class=\"number\">64</span> nhxc<span class=\"selector-class\">.wav</span> <span class=\"selector-tag\">audio</span>.o</span><br></pre></td></tr></table></figure></p>\n<p>查看转换后生成的目标文件：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objdump -x audio.o</span><br><span class=\"line\"></span><br><span class=\"line\">audio.o:     <span class=\"keyword\">file</span> <span class=\"keyword\">format</span> elf64-x86-<span class=\"number\">64</span></span><br><span class=\"line\">audio.o</span><br><span class=\"line\">architecture: i386:x86-<span class=\"number\">64</span>, flags x00000010:</span><br><span class=\"line\">HAS_SYMS</span><br><span class=\"line\">start address x0000000000000000</span><br><span class=\"line\"></span><br><span class=\"line\">Sections:</span><br><span class=\"line\">Idx <span class=\"keyword\">Name</span>          <span class=\"built_in\">Size</span>      VMA               LMA               <span class=\"keyword\">File</span> off  Algn</span><br><span class=\"line\">  <span class=\"number\">0</span> .<span class=\"keyword\">data</span>         000fab0  <span class=\"number\">0000000000000000</span>  <span class=\"number\">0000000000000000</span>  <span class=\"number\">00000040</span>  <span class=\"number\">2</span>**<span class=\"number\">0</span></span><br><span class=\"line\">                  CONTENTS, ALLOC, LOAD, <span class=\"keyword\">DATA</span></span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\"><span class=\"number\">0000000000000000</span> l    d  .<span class=\"keyword\">data</span>\t<span class=\"number\">0000000000000000</span> .<span class=\"keyword\">data</span></span><br><span class=\"line\"><span class=\"number\">0000000000000000</span> g       .<span class=\"keyword\">data</span>\t<span class=\"number\">0000000000000000</span> _binary_nhxc_wav_start</span><br><span class=\"line\">00000000000fab0 g       .<span class=\"keyword\">data</span>\t<span class=\"number\">0000000000000000</span> _binary_nhxc_wav_end</span><br><span class=\"line\">00000000000fab0 g       *<span class=\"built_in\">ABS</span>*\t<span class=\"number\">0000000000000000</span> _binary_nhxc_wav_size</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<code>file format</code>、<code>architecture</code>信息与<code>bin2obj.o</code>的相同，<code>_binary_nhxc_wav_start</code>指向音频内容的起始地址，<code>_binary_nhxc_wav_end</code>指向音频内容的结尾地址，<code>_binary_nhxc_wav_size</code>指向文件大小的存储地址。</p>\n<blockquote>\n<p><code>_binary_*_start/end/size</code>，<code>*</code>是二进制文件的文件名及后缀名。</p>\n</blockquote>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/bin2obj/bin2obj.c\" target=\"_blank\" rel=\"noopener\">bin2obj.c</a>：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;elf.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> _binary_nhxc_wav_start;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> _binary_nhxc_wav_end;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> _binary_nhxc_wav_size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"binary to object:\\n\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"elf head: %ld\\n\"</span>, <span class=\"keyword\">sizeof</span>(Elf64_Ehdr));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"_binary_nhxc_wav_size: %p\\n_binary_nhxc_wav_end: %p\\n_binary_nhxc_wav_size: %p\\n\"</span>, &amp;_binary_nhxc_wav_start, &amp;_binary_nhxc_wav_end,  &amp;_binary_nhxc_wav_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * audio_buf = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&amp;_binary_nhxc_wav_start;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)&amp;_binary_nhxc_wav_size;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE *fp = fopen(<span class=\"string\">\"./out.wav\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!fp) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"fopen failed!\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfwrite(audio_buf, size, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>_binary_nhxc_wav_start</code>和<code>_binary_nhxc_wav_size</code>两个符号，读取音频文件。</p>\n<p>编译并运行：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -c bin2obj<span class=\"selector-class\">.c</span> -o bin2obj.o</span><br><span class=\"line\">$ g++ bin2obj<span class=\"selector-class\">.o</span> <span class=\"selector-tag\">audio</span><span class=\"selector-class\">.o</span> -o bin2obj</span><br><span class=\"line\">$ ./bin2obj</span><br><span class=\"line\">binary to <span class=\"selector-tag\">object</span>:</span><br><span class=\"line\">elf head: <span class=\"number\">64</span></span><br><span class=\"line\">_binary_nhxc_wav_size: <span class=\"number\">0</span>x601040</span><br><span class=\"line\">_binary_nhxc_wav_end: <span class=\"number\">0</span>x610af0</span><br><span class=\"line\">_binary_nhxc_wav_size: <span class=\"number\">0</span>xfab0</span><br></pre></td></tr></table></figure></p>\n<p>比对写入的文件<code>out.wav</code>与原始文件<code>nhxc.wav</code>，完全一致：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">155<span class=\"selector-tag\">e62d81e84fa7493fefe82223bcc2a</span>  <span class=\"selector-tag\">nhxc</span><span class=\"selector-class\">.wav</span></span><br><span class=\"line\">155<span class=\"selector-tag\">e62d81e84fa7493fefe82223bcc2a</span>  <span class=\"selector-tag\">out</span><span class=\"selector-class\">.wav</span></span><br></pre></td></tr></table></figure></p>\n<p>查看audio.o：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexdump -C audio.o | head -n <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">00000000</span>  <span class=\"number\">7</span>f <span class=\"number\">45</span> <span class=\"number\">4</span>c <span class=\"number\">46</span> <span class=\"number\">02</span> <span class=\"number\">01</span> <span class=\"number\">01</span> <span class=\"number\">00</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  |.ELF............|</span><br><span class=\"line\"><span class=\"number\">00000010</span>  <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">3</span>e <span class=\"number\">00</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  |..&gt;.............|</span><br><span class=\"line\"><span class=\"number\">00000020</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  d0 fb <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  |................|</span><br><span class=\"line\"><span class=\"number\">00000030</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">40</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">40</span> <span class=\"number\">00</span> <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">02</span> <span class=\"number\">00</span>  |....@.....@.....|</span><br><span class=\"line\"><span class=\"number\">00000040</span>  <span class=\"number\">52</span> <span class=\"number\">49</span> <span class=\"number\">46</span> <span class=\"number\">46</span> a8 fa <span class=\"number\">00</span> <span class=\"number\">00</span>  <span class=\"number\">57</span> <span class=\"number\">41</span> <span class=\"number\">56</span> <span class=\"number\">45</span> <span class=\"number\">66</span> <span class=\"number\">6</span>d <span class=\"number\">74</span> <span class=\"number\">20</span>  |RIFF....WAVEfmt |</span><br></pre></td></tr></table></figure></p>\n<p>如程序输出，<code>ELF</code>文件头部信息结构体为64字节，而转换生成的目标文件中，音频内容始于<code>0x40</code>字节偏移（<code>wav</code>头始于<code>RIFF</code>，可以参考<a href=\"http://answerywj.com/2019/06/03/wav/\">wav文件解析</a>），而<code>0x40</code>正是十进制的<code>64</code>。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>《程序员的自我修养——链接、装载与库》P68</li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将展示，如何将一个二进制文件(如图片、音频等)作为目标文件中的一个段，该技巧主要应用在一些无文件系统的平台。</p>\n<hr>","more":"<p>本次的实验场景为<code>i386:x86-64 GNU/Linux</code>，测试音频为<code>nhxc.wav</code>，测试程序为<code>bin2obj.c</code>。</p>\n<h2 id=\"查看该平台的ELF文件相关信息\"><a href=\"#查看该平台的ELF文件相关信息\" class=\"headerlink\" title=\"查看该平台的ELF文件相关信息\"></a>查看该平台的ELF文件相关信息</h2><p>生成目标文件<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -c bi<span class=\"symbol\">n2</span>obj.c -o bi<span class=\"symbol\">n2</span>obj.o</span><br></pre></td></tr></table></figure></p>\n<p>查看该平台<code>ELF</code>文件相关信息<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objdump -x bin2obj.o</span><br><span class=\"line\"></span><br><span class=\"line\">bin2obj.o:     file format elf64-x86-64</span><br><span class=\"line\">bin2obj.o</span><br><span class=\"line\">architecture: i386:x86-64, flags 0x00000011:</span><br><span class=\"line\">HAS_RELOC, HAS_SYMS</span><br><span class=\"line\">start<span class=\"built_in\"> address </span>0x0000000000000000</span><br></pre></td></tr></table></figure></p>\n<p>由上可知，文件格式为<code>elf64-x86-64</code>，<code>CPU</code>架构为<code>architecture</code>。</p>\n<h2 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h2><p>首先通过<code>objcopy --help</code>选项查看相关参数的意义:<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objcopy --<span class=\"keyword\">help</span></span><br><span class=\"line\">-I --<span class=\"keyword\">input</span>-target &lt;bfdname&gt;      Assume <span class=\"keyword\">input</span> <span class=\"keyword\">file</span> is <span class=\"keyword\">in</span> <span class=\"keyword\">format</span> &lt;bfdname&gt;</span><br><span class=\"line\">-O --output-target &lt;bfdname&gt;     Create <span class=\"keyword\">an</span> output <span class=\"keyword\">file</span> <span class=\"keyword\">in</span> <span class=\"keyword\">format</span> &lt;bfdname&gt;</span><br><span class=\"line\">-B --binary-architecture &lt;<span class=\"keyword\">arch</span>&gt;  <span class=\"keyword\">Set</span> output <span class=\"keyword\">arch</span>, when <span class=\"keyword\">input</span> is <span class=\"keyword\">arch</span>-less</span><br><span class=\"line\">......</span><br><span class=\"line\">objcopy: supported targets: elf64-x86-64 elf32-i386 elf32-iamcu elf32-x86-64 a.<span class=\"keyword\">out</span>-i386-linux pei-i386 pei-x86-64 elf64-l1om elf64-k1om elf64-little elf64-big elf32-little elf32-big pe-x86-64 pe-bigobj-x86-64 pe-i386 <span class=\"keyword\">plugin</span> srec symbolsrec verilog tekhex binary ihex</span><br></pre></td></tr></table></figure></p>\n<p>由上可知，<code>-I</code>选项指定输入文件的格式，<code>-O</code>指定输出文件的格式，在<code>supported targets</code>中选择对应的格式；-B是指定目标文件的架构<code>i386:x86-64</code>，即上文<code>objdump -x</code>命令查询的<code>architecture</code>。</p>\n<p>转换：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objcopy -I binary -O elf64-x86-<span class=\"number\">64</span> -B i386:x86-<span class=\"number\">64</span> nhxc<span class=\"selector-class\">.wav</span> <span class=\"selector-tag\">audio</span>.o</span><br></pre></td></tr></table></figure></p>\n<p>查看转换后生成的目标文件：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objdump -x audio.o</span><br><span class=\"line\"></span><br><span class=\"line\">audio.o:     <span class=\"keyword\">file</span> <span class=\"keyword\">format</span> elf64-x86-<span class=\"number\">64</span></span><br><span class=\"line\">audio.o</span><br><span class=\"line\">architecture: i386:x86-<span class=\"number\">64</span>, flags x00000010:</span><br><span class=\"line\">HAS_SYMS</span><br><span class=\"line\">start address x0000000000000000</span><br><span class=\"line\"></span><br><span class=\"line\">Sections:</span><br><span class=\"line\">Idx <span class=\"keyword\">Name</span>          <span class=\"built_in\">Size</span>      VMA               LMA               <span class=\"keyword\">File</span> off  Algn</span><br><span class=\"line\">  <span class=\"number\">0</span> .<span class=\"keyword\">data</span>         000fab0  <span class=\"number\">0000000000000000</span>  <span class=\"number\">0000000000000000</span>  <span class=\"number\">00000040</span>  <span class=\"number\">2</span>**<span class=\"number\">0</span></span><br><span class=\"line\">                  CONTENTS, ALLOC, LOAD, <span class=\"keyword\">DATA</span></span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\"><span class=\"number\">0000000000000000</span> l    d  .<span class=\"keyword\">data</span>\t<span class=\"number\">0000000000000000</span> .<span class=\"keyword\">data</span></span><br><span class=\"line\"><span class=\"number\">0000000000000000</span> g       .<span class=\"keyword\">data</span>\t<span class=\"number\">0000000000000000</span> _binary_nhxc_wav_start</span><br><span class=\"line\">00000000000fab0 g       .<span class=\"keyword\">data</span>\t<span class=\"number\">0000000000000000</span> _binary_nhxc_wav_end</span><br><span class=\"line\">00000000000fab0 g       *<span class=\"built_in\">ABS</span>*\t<span class=\"number\">0000000000000000</span> _binary_nhxc_wav_size</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<code>file format</code>、<code>architecture</code>信息与<code>bin2obj.o</code>的相同，<code>_binary_nhxc_wav_start</code>指向音频内容的起始地址，<code>_binary_nhxc_wav_end</code>指向音频内容的结尾地址，<code>_binary_nhxc_wav_size</code>指向文件大小的存储地址。</p>\n<blockquote>\n<p><code>_binary_*_start/end/size</code>，<code>*</code>是二进制文件的文件名及后缀名。</p>\n</blockquote>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/bin2obj/bin2obj.c\" target=\"_blank\" rel=\"noopener\">bin2obj.c</a>：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;elf.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> _binary_nhxc_wav_start;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> _binary_nhxc_wav_end;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> _binary_nhxc_wav_size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"binary to object:\\n\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"elf head: %ld\\n\"</span>, <span class=\"keyword\">sizeof</span>(Elf64_Ehdr));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"_binary_nhxc_wav_size: %p\\n_binary_nhxc_wav_end: %p\\n_binary_nhxc_wav_size: %p\\n\"</span>, &amp;_binary_nhxc_wav_start, &amp;_binary_nhxc_wav_end,  &amp;_binary_nhxc_wav_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * audio_buf = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&amp;_binary_nhxc_wav_start;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)&amp;_binary_nhxc_wav_size;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE *fp = fopen(<span class=\"string\">\"./out.wav\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!fp) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"fopen failed!\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfwrite(audio_buf, size, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>_binary_nhxc_wav_start</code>和<code>_binary_nhxc_wav_size</code>两个符号，读取音频文件。</p>\n<p>编译并运行：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -c bin2obj<span class=\"selector-class\">.c</span> -o bin2obj.o</span><br><span class=\"line\">$ g++ bin2obj<span class=\"selector-class\">.o</span> <span class=\"selector-tag\">audio</span><span class=\"selector-class\">.o</span> -o bin2obj</span><br><span class=\"line\">$ ./bin2obj</span><br><span class=\"line\">binary to <span class=\"selector-tag\">object</span>:</span><br><span class=\"line\">elf head: <span class=\"number\">64</span></span><br><span class=\"line\">_binary_nhxc_wav_size: <span class=\"number\">0</span>x601040</span><br><span class=\"line\">_binary_nhxc_wav_end: <span class=\"number\">0</span>x610af0</span><br><span class=\"line\">_binary_nhxc_wav_size: <span class=\"number\">0</span>xfab0</span><br></pre></td></tr></table></figure></p>\n<p>比对写入的文件<code>out.wav</code>与原始文件<code>nhxc.wav</code>，完全一致：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">155<span class=\"selector-tag\">e62d81e84fa7493fefe82223bcc2a</span>  <span class=\"selector-tag\">nhxc</span><span class=\"selector-class\">.wav</span></span><br><span class=\"line\">155<span class=\"selector-tag\">e62d81e84fa7493fefe82223bcc2a</span>  <span class=\"selector-tag\">out</span><span class=\"selector-class\">.wav</span></span><br></pre></td></tr></table></figure></p>\n<p>查看audio.o：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexdump -C audio.o | head -n <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">00000000</span>  <span class=\"number\">7</span>f <span class=\"number\">45</span> <span class=\"number\">4</span>c <span class=\"number\">46</span> <span class=\"number\">02</span> <span class=\"number\">01</span> <span class=\"number\">01</span> <span class=\"number\">00</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  |.ELF............|</span><br><span class=\"line\"><span class=\"number\">00000010</span>  <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">3</span>e <span class=\"number\">00</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  |..&gt;.............|</span><br><span class=\"line\"><span class=\"number\">00000020</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  d0 fb <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  |................|</span><br><span class=\"line\"><span class=\"number\">00000030</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">40</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">40</span> <span class=\"number\">00</span> <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">02</span> <span class=\"number\">00</span>  |....@.....@.....|</span><br><span class=\"line\"><span class=\"number\">00000040</span>  <span class=\"number\">52</span> <span class=\"number\">49</span> <span class=\"number\">46</span> <span class=\"number\">46</span> a8 fa <span class=\"number\">00</span> <span class=\"number\">00</span>  <span class=\"number\">57</span> <span class=\"number\">41</span> <span class=\"number\">56</span> <span class=\"number\">45</span> <span class=\"number\">66</span> <span class=\"number\">6</span>d <span class=\"number\">74</span> <span class=\"number\">20</span>  |RIFF....WAVEfmt |</span><br></pre></td></tr></table></figure></p>\n<p>如程序输出，<code>ELF</code>文件头部信息结构体为64字节，而转换生成的目标文件中，音频内容始于<code>0x40</code>字节偏移（<code>wav</code>头始于<code>RIFF</code>，可以参考<a href=\"http://answerywj.com/2019/06/03/wav/\">wav文件解析</a>），而<code>0x40</code>正是十进制的<code>64</code>。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>《程序员的自我修养——链接、装载与库》P68</li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"cJSON的秘密","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2018-05-03T08:58:02.000Z","_content":"\n学习使用cJSON过程的一些发现和总结，不涉及具体的函数\n<!--more-->\n\n## cJSON简介\n`cJSON`是一个快速，高性能的`json`解析器，由`C`语言编写，仅包含`cJSON.c`和`cJSON.h`两个文件，不支持跨平台；跨平台推荐纯`lua`写的[`dkjson`](http://dkolf.de/src/dkjson-lua.fsl/home)\n\n## cJSON结构体\n`cJSON`结构体的组成：\n\n```\ntypedef struct cJSON {\n\tstruct cJSON *next, *prev;\n\tstruct cJSON *child;\n\n\tint type;\n\n\tchar *valuestring;\n\tint valueint;\n\tdouble valuedouble;\n\n\tchar *string;\n} cJSON;\n```\n其中\n\n- `next`指向链表中下一个兄弟节点，`prev`指向本节点前一个节点\n- `child`节点只有对象和数组有，并且`child`节点是双向链表的头节点，`child`的`prev`一般为`NULL`，不指向任何节点，双向链表的最后一个兄弟节点的`next`是无指向的\n- `type`取值有`Null/True/False/Number/String/Array/Object`，这些值类型都在`cJSON.h`中通过宏定义了\n- `String`类型节点有`valuestring `，`Number`类型节点有`valueint`和`valuedouble`\n- `string`表示节点的名称，所有的节点都是一个链表，都具有`string`值\n\n> `cJSON`默认所有值都为`0`，除非额外为其赋有意义的值\n\n### cJSON树结构\n`cJSON`使用树结构存储`JSON`的各个节点，而这个树结构是使用双向链表实现的(实线表示节点间有真实的引用关系，而虚线表示逻辑上的引用关系)：\n![cJSON树结构](cjson-tree.png)\n\n- 树结构的每一层都是一个双向链表，表示一堆兄弟节点\n- 当前层的所有节点都是当前链表头节点的父节点的子节点\n\n下面举例说明：\n\n```\n{\n    \"name\": \"Jack (\\\"Bee\\\") Nimble\", \n    \"format\": {\n        \"type\":       \"rect\", \n        \"width\":      1920, \n        \"height\":     1080, \n        \"interlace\":  false, \n        \"frame rate\": 24\n    }\n}\n```\n\n- `name`和`format`节点组成一个链表，`type`、`width`、`height`、`interlace`和`frame rate`节点组成一个链表\n- 根节点包含节点类型`Object`和子节点`name`\n- 子节点包含节点名称`name`、节点值`Jack (\"Bee\") Nimble`和兄弟节点`format`\n- `format`节点包含节点类型`Object`、节点名称`format`和子节点`type`\n- `type`节点包含节点类型`String`、节点名称`type`、节点值`rect`和兄弟节点`width`\n- `width`节点包含节点类型`Number`、节点名称`width`、节点值`1920`和兄弟节点`height`\n- `height`节点包含节点类型`Number`、节点名称`height`、节点值`1080`和兄弟节点`interlace` \n- `interlace`节点包含节点类型`False`、节点名称`interlace`和兄弟节点`frame rate`\n- `frame rate`节点包含节点类型`Number`、节点名称`frame tate`和节点值`25`\n\n## cJSON内存管理\n\n`cJson`分为自动和手动两种使用方式：\n\n- 在自动模式下，`cJSON`使用默认的`malloc`和`free`函数管理内存，在`cJSON`中，每个节点都是`malloc`而来，每个节点的`string`和`valuestring`也是`malloc`而来，使用`cJSON_Delete`函数可以递归释放`JSON`树中`malloc`的节点内存和字符内存，使用`cJSON_Print`函数后，则需要手动释放`cJSON_Print`函数分配的内存，避免内存泄露\n- 在手动模式下，`cJSON`提供了钩子函数来帮助用户自定义内存管理函数，如果不设置，这默认为`malloc`和`free`\n\n```\n\tstruct cJSON_Hooks js_hook = {xxx_malloc, xxx_free};\n\tcJSON_InitHooks(&js_hook);\n```\n\n## cJSON序列化\n\n`cJSON`序列化就是把`cJSON`输出，有两种形式：\n- 格式化输出`char  *cJSON_Print(cJSON *item);`\n- 压缩输出`char  *cJSON_PrintUnformatted(cJSON *item);`\n\n需要注意的是`cJSON`采用了预先将要输的内容全部以字符串形式存储在内存中，最后输出整个字符串的方法，而不是边分析`json`数据边输出，所以对于比较大的`json`数据来说，内存就是个问题了\n\n\n## Reference\n- [cJson源码和源码分析](https://github.com/faycheng/cJSON)\n\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/cjson.md","raw":"---\ntitle: cJSON的秘密\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - cJSON\ndate: 2018-05-03 16:58:02\ncategories: C/C++\n---\n\n学习使用cJSON过程的一些发现和总结，不涉及具体的函数\n<!--more-->\n\n## cJSON简介\n`cJSON`是一个快速，高性能的`json`解析器，由`C`语言编写，仅包含`cJSON.c`和`cJSON.h`两个文件，不支持跨平台；跨平台推荐纯`lua`写的[`dkjson`](http://dkolf.de/src/dkjson-lua.fsl/home)\n\n## cJSON结构体\n`cJSON`结构体的组成：\n\n```\ntypedef struct cJSON {\n\tstruct cJSON *next, *prev;\n\tstruct cJSON *child;\n\n\tint type;\n\n\tchar *valuestring;\n\tint valueint;\n\tdouble valuedouble;\n\n\tchar *string;\n} cJSON;\n```\n其中\n\n- `next`指向链表中下一个兄弟节点，`prev`指向本节点前一个节点\n- `child`节点只有对象和数组有，并且`child`节点是双向链表的头节点，`child`的`prev`一般为`NULL`，不指向任何节点，双向链表的最后一个兄弟节点的`next`是无指向的\n- `type`取值有`Null/True/False/Number/String/Array/Object`，这些值类型都在`cJSON.h`中通过宏定义了\n- `String`类型节点有`valuestring `，`Number`类型节点有`valueint`和`valuedouble`\n- `string`表示节点的名称，所有的节点都是一个链表，都具有`string`值\n\n> `cJSON`默认所有值都为`0`，除非额外为其赋有意义的值\n\n### cJSON树结构\n`cJSON`使用树结构存储`JSON`的各个节点，而这个树结构是使用双向链表实现的(实线表示节点间有真实的引用关系，而虚线表示逻辑上的引用关系)：\n![cJSON树结构](cjson-tree.png)\n\n- 树结构的每一层都是一个双向链表，表示一堆兄弟节点\n- 当前层的所有节点都是当前链表头节点的父节点的子节点\n\n下面举例说明：\n\n```\n{\n    \"name\": \"Jack (\\\"Bee\\\") Nimble\", \n    \"format\": {\n        \"type\":       \"rect\", \n        \"width\":      1920, \n        \"height\":     1080, \n        \"interlace\":  false, \n        \"frame rate\": 24\n    }\n}\n```\n\n- `name`和`format`节点组成一个链表，`type`、`width`、`height`、`interlace`和`frame rate`节点组成一个链表\n- 根节点包含节点类型`Object`和子节点`name`\n- 子节点包含节点名称`name`、节点值`Jack (\"Bee\") Nimble`和兄弟节点`format`\n- `format`节点包含节点类型`Object`、节点名称`format`和子节点`type`\n- `type`节点包含节点类型`String`、节点名称`type`、节点值`rect`和兄弟节点`width`\n- `width`节点包含节点类型`Number`、节点名称`width`、节点值`1920`和兄弟节点`height`\n- `height`节点包含节点类型`Number`、节点名称`height`、节点值`1080`和兄弟节点`interlace` \n- `interlace`节点包含节点类型`False`、节点名称`interlace`和兄弟节点`frame rate`\n- `frame rate`节点包含节点类型`Number`、节点名称`frame tate`和节点值`25`\n\n## cJSON内存管理\n\n`cJson`分为自动和手动两种使用方式：\n\n- 在自动模式下，`cJSON`使用默认的`malloc`和`free`函数管理内存，在`cJSON`中，每个节点都是`malloc`而来，每个节点的`string`和`valuestring`也是`malloc`而来，使用`cJSON_Delete`函数可以递归释放`JSON`树中`malloc`的节点内存和字符内存，使用`cJSON_Print`函数后，则需要手动释放`cJSON_Print`函数分配的内存，避免内存泄露\n- 在手动模式下，`cJSON`提供了钩子函数来帮助用户自定义内存管理函数，如果不设置，这默认为`malloc`和`free`\n\n```\n\tstruct cJSON_Hooks js_hook = {xxx_malloc, xxx_free};\n\tcJSON_InitHooks(&js_hook);\n```\n\n## cJSON序列化\n\n`cJSON`序列化就是把`cJSON`输出，有两种形式：\n- 格式化输出`char  *cJSON_Print(cJSON *item);`\n- 压缩输出`char  *cJSON_PrintUnformatted(cJSON *item);`\n\n需要注意的是`cJSON`采用了预先将要输的内容全部以字符串形式存储在内存中，最后输出整个字符串的方法，而不是边分析`json`数据边输出，所以对于比较大的`json`数据来说，内存就是个问题了\n\n\n## Reference\n- [cJson源码和源码分析](https://github.com/faycheng/cJSON)\n\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"cjson","published":1,"updated":"2020-07-21T01:40:07.125Z","layout":"post","photos":[],"link":"","_id":"cklumqgeb000979n52krls1e7","content":"<p>学习使用cJSON过程的一些发现和总结，不涉及具体的函数<br><a id=\"more\"></a></p>\n<h2 id=\"cJSON简介\"><a href=\"#cJSON简介\" class=\"headerlink\" title=\"cJSON简介\"></a>cJSON简介</h2><p><code>cJSON</code>是一个快速，高性能的<code>json</code>解析器，由<code>C</code>语言编写，仅包含<code>cJSON.c</code>和<code>cJSON.h</code>两个文件，不支持跨平台；跨平台推荐纯<code>lua</code>写的<a href=\"http://dkolf.de/src/dkjson-lua.fsl/home\" target=\"_blank\" rel=\"noopener\"><code>dkjson</code></a></p>\n<h2 id=\"cJSON结构体\"><a href=\"#cJSON结构体\" class=\"headerlink\" title=\"cJSON结构体\"></a>cJSON结构体</h2><p><code>cJSON</code>结构体的组成：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cJSON</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cJSON</span> *<span class=\"title\">next</span>, *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cJSON</span> *<span class=\"title\">child</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *valuestring;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> valueint;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> valuedouble;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; cJSON;</span><br></pre></td></tr></table></figure>\n<p>其中</p>\n<ul>\n<li><code>next</code>指向链表中下一个兄弟节点，<code>prev</code>指向本节点前一个节点</li>\n<li><code>child</code>节点只有对象和数组有，并且<code>child</code>节点是双向链表的头节点，<code>child</code>的<code>prev</code>一般为<code>NULL</code>，不指向任何节点，双向链表的最后一个兄弟节点的<code>next</code>是无指向的</li>\n<li><code>type</code>取值有<code>Null/True/False/Number/String/Array/Object</code>，这些值类型都在<code>cJSON.h</code>中通过宏定义了</li>\n<li><code>String</code>类型节点有<code>valuestring</code>，<code>Number</code>类型节点有<code>valueint</code>和<code>valuedouble</code></li>\n<li><code>string</code>表示节点的名称，所有的节点都是一个链表，都具有<code>string</code>值</li>\n</ul>\n<blockquote>\n<p><code>cJSON</code>默认所有值都为<code>0</code>，除非额外为其赋有意义的值</p>\n</blockquote>\n<h3 id=\"cJSON树结构\"><a href=\"#cJSON树结构\" class=\"headerlink\" title=\"cJSON树结构\"></a>cJSON树结构</h3><p><code>cJSON</code>使用树结构存储<code>JSON</code>的各个节点，而这个树结构是使用双向链表实现的(实线表示节点间有真实的引用关系，而虚线表示逻辑上的引用关系)：<br><img src=\"/2018/05/03/cjson/cjson-tree.png\" alt=\"cJSON树结构\"></p>\n<ul>\n<li>树结构的每一层都是一个双向链表，表示一堆兄弟节点</li>\n<li>当前层的所有节点都是当前链表头节点的父节点的子节点</li>\n</ul>\n<p>下面举例说明：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Jack (\\\"Bee\\\") Nimble\"</span>, </span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>:       <span class=\"string\">\"rect\"</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"width\"</span>:      <span class=\"number\">1920</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"height\"</span>:     <span class=\"number\">1080</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"interlace\"</span>:  <span class=\"literal\">false</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"frame rate\"</span>: <span class=\"number\">24</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>name</code>和<code>format</code>节点组成一个链表，<code>type</code>、<code>width</code>、<code>height</code>、<code>interlace</code>和<code>frame rate</code>节点组成一个链表</li>\n<li>根节点包含节点类型<code>Object</code>和子节点<code>name</code></li>\n<li>子节点包含节点名称<code>name</code>、节点值<code>Jack (&quot;Bee&quot;) Nimble</code>和兄弟节点<code>format</code></li>\n<li><code>format</code>节点包含节点类型<code>Object</code>、节点名称<code>format</code>和子节点<code>type</code></li>\n<li><code>type</code>节点包含节点类型<code>String</code>、节点名称<code>type</code>、节点值<code>rect</code>和兄弟节点<code>width</code></li>\n<li><code>width</code>节点包含节点类型<code>Number</code>、节点名称<code>width</code>、节点值<code>1920</code>和兄弟节点<code>height</code></li>\n<li><code>height</code>节点包含节点类型<code>Number</code>、节点名称<code>height</code>、节点值<code>1080</code>和兄弟节点<code>interlace</code> </li>\n<li><code>interlace</code>节点包含节点类型<code>False</code>、节点名称<code>interlace</code>和兄弟节点<code>frame rate</code></li>\n<li><code>frame rate</code>节点包含节点类型<code>Number</code>、节点名称<code>frame tate</code>和节点值<code>25</code></li>\n</ul>\n<h2 id=\"cJSON内存管理\"><a href=\"#cJSON内存管理\" class=\"headerlink\" title=\"cJSON内存管理\"></a>cJSON内存管理</h2><p><code>cJson</code>分为自动和手动两种使用方式：</p>\n<ul>\n<li>在自动模式下，<code>cJSON</code>使用默认的<code>malloc</code>和<code>free</code>函数管理内存，在<code>cJSON</code>中，每个节点都是<code>malloc</code>而来，每个节点的<code>string</code>和<code>valuestring</code>也是<code>malloc</code>而来，使用<code>cJSON_Delete</code>函数可以递归释放<code>JSON</code>树中<code>malloc</code>的节点内存和字符内存，使用<code>cJSON_Print</code>函数后，则需要手动释放<code>cJSON_Print</code>函数分配的内存，避免内存泄露</li>\n<li>在手动模式下，<code>cJSON</code>提供了钩子函数来帮助用户自定义内存管理函数，如果不设置，这默认为<code>malloc</code>和<code>free</code></li>\n</ul>\n<figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cJSON_Hooks</span> js_hook = </span>&#123;xxx_malloc, xxx_free&#125;;</span><br><span class=\"line\">cJSON_InitHooks(&amp;js_hook);</span><br></pre></td></tr></table></figure>\n<h2 id=\"cJSON序列化\"><a href=\"#cJSON序列化\" class=\"headerlink\" title=\"cJSON序列化\"></a>cJSON序列化</h2><p><code>cJSON</code>序列化就是把<code>cJSON</code>输出，有两种形式：</p>\n<ul>\n<li>格式化输出<code>char  *cJSON_Print(cJSON *item);</code></li>\n<li>压缩输出<code>char  *cJSON_PrintUnformatted(cJSON *item);</code></li>\n</ul>\n<p>需要注意的是<code>cJSON</code>采用了预先将要输的内容全部以字符串形式存储在内存中，最后输出整个字符串的方法，而不是边分析<code>json</code>数据边输出，所以对于比较大的<code>json</code>数据来说，内存就是个问题了</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/faycheng/cJSON\" target=\"_blank\" rel=\"noopener\">cJson源码和源码分析</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>学习使用cJSON过程的一些发现和总结，不涉及具体的函数<br></p>","more":"<p></p>\n<h2 id=\"cJSON简介\"><a href=\"#cJSON简介\" class=\"headerlink\" title=\"cJSON简介\"></a>cJSON简介</h2><p><code>cJSON</code>是一个快速，高性能的<code>json</code>解析器，由<code>C</code>语言编写，仅包含<code>cJSON.c</code>和<code>cJSON.h</code>两个文件，不支持跨平台；跨平台推荐纯<code>lua</code>写的<a href=\"http://dkolf.de/src/dkjson-lua.fsl/home\" target=\"_blank\" rel=\"noopener\"><code>dkjson</code></a></p>\n<h2 id=\"cJSON结构体\"><a href=\"#cJSON结构体\" class=\"headerlink\" title=\"cJSON结构体\"></a>cJSON结构体</h2><p><code>cJSON</code>结构体的组成：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cJSON</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cJSON</span> *<span class=\"title\">next</span>, *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cJSON</span> *<span class=\"title\">child</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *valuestring;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> valueint;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> valuedouble;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; cJSON;</span><br></pre></td></tr></table></figure>\n<p>其中</p>\n<ul>\n<li><code>next</code>指向链表中下一个兄弟节点，<code>prev</code>指向本节点前一个节点</li>\n<li><code>child</code>节点只有对象和数组有，并且<code>child</code>节点是双向链表的头节点，<code>child</code>的<code>prev</code>一般为<code>NULL</code>，不指向任何节点，双向链表的最后一个兄弟节点的<code>next</code>是无指向的</li>\n<li><code>type</code>取值有<code>Null/True/False/Number/String/Array/Object</code>，这些值类型都在<code>cJSON.h</code>中通过宏定义了</li>\n<li><code>String</code>类型节点有<code>valuestring</code>，<code>Number</code>类型节点有<code>valueint</code>和<code>valuedouble</code></li>\n<li><code>string</code>表示节点的名称，所有的节点都是一个链表，都具有<code>string</code>值</li>\n</ul>\n<blockquote>\n<p><code>cJSON</code>默认所有值都为<code>0</code>，除非额外为其赋有意义的值</p>\n</blockquote>\n<h3 id=\"cJSON树结构\"><a href=\"#cJSON树结构\" class=\"headerlink\" title=\"cJSON树结构\"></a>cJSON树结构</h3><p><code>cJSON</code>使用树结构存储<code>JSON</code>的各个节点，而这个树结构是使用双向链表实现的(实线表示节点间有真实的引用关系，而虚线表示逻辑上的引用关系)：<br><img src=\"/2018/05/03/cjson/cjson-tree.png\" alt=\"cJSON树结构\"></p>\n<ul>\n<li>树结构的每一层都是一个双向链表，表示一堆兄弟节点</li>\n<li>当前层的所有节点都是当前链表头节点的父节点的子节点</li>\n</ul>\n<p>下面举例说明：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Jack (\\\"Bee\\\") Nimble\"</span>, </span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>:       <span class=\"string\">\"rect\"</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"width\"</span>:      <span class=\"number\">1920</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"height\"</span>:     <span class=\"number\">1080</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"interlace\"</span>:  <span class=\"literal\">false</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"frame rate\"</span>: <span class=\"number\">24</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>name</code>和<code>format</code>节点组成一个链表，<code>type</code>、<code>width</code>、<code>height</code>、<code>interlace</code>和<code>frame rate</code>节点组成一个链表</li>\n<li>根节点包含节点类型<code>Object</code>和子节点<code>name</code></li>\n<li>子节点包含节点名称<code>name</code>、节点值<code>Jack (&quot;Bee&quot;) Nimble</code>和兄弟节点<code>format</code></li>\n<li><code>format</code>节点包含节点类型<code>Object</code>、节点名称<code>format</code>和子节点<code>type</code></li>\n<li><code>type</code>节点包含节点类型<code>String</code>、节点名称<code>type</code>、节点值<code>rect</code>和兄弟节点<code>width</code></li>\n<li><code>width</code>节点包含节点类型<code>Number</code>、节点名称<code>width</code>、节点值<code>1920</code>和兄弟节点<code>height</code></li>\n<li><code>height</code>节点包含节点类型<code>Number</code>、节点名称<code>height</code>、节点值<code>1080</code>和兄弟节点<code>interlace</code> </li>\n<li><code>interlace</code>节点包含节点类型<code>False</code>、节点名称<code>interlace</code>和兄弟节点<code>frame rate</code></li>\n<li><code>frame rate</code>节点包含节点类型<code>Number</code>、节点名称<code>frame tate</code>和节点值<code>25</code></li>\n</ul>\n<h2 id=\"cJSON内存管理\"><a href=\"#cJSON内存管理\" class=\"headerlink\" title=\"cJSON内存管理\"></a>cJSON内存管理</h2><p><code>cJson</code>分为自动和手动两种使用方式：</p>\n<ul>\n<li>在自动模式下，<code>cJSON</code>使用默认的<code>malloc</code>和<code>free</code>函数管理内存，在<code>cJSON</code>中，每个节点都是<code>malloc</code>而来，每个节点的<code>string</code>和<code>valuestring</code>也是<code>malloc</code>而来，使用<code>cJSON_Delete</code>函数可以递归释放<code>JSON</code>树中<code>malloc</code>的节点内存和字符内存，使用<code>cJSON_Print</code>函数后，则需要手动释放<code>cJSON_Print</code>函数分配的内存，避免内存泄露</li>\n<li>在手动模式下，<code>cJSON</code>提供了钩子函数来帮助用户自定义内存管理函数，如果不设置，这默认为<code>malloc</code>和<code>free</code></li>\n</ul>\n<figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cJSON_Hooks</span> js_hook = </span>&#123;xxx_malloc, xxx_free&#125;;</span><br><span class=\"line\">cJSON_InitHooks(&amp;js_hook);</span><br></pre></td></tr></table></figure>\n<h2 id=\"cJSON序列化\"><a href=\"#cJSON序列化\" class=\"headerlink\" title=\"cJSON序列化\"></a>cJSON序列化</h2><p><code>cJSON</code>序列化就是把<code>cJSON</code>输出，有两种形式：</p>\n<ul>\n<li>格式化输出<code>char  *cJSON_Print(cJSON *item);</code></li>\n<li>压缩输出<code>char  *cJSON_PrintUnformatted(cJSON *item);</code></li>\n</ul>\n<p>需要注意的是<code>cJSON</code>采用了预先将要输的内容全部以字符串形式存储在内存中，最后输出整个字符串的方法，而不是边分析<code>json</code>数据边输出，所以对于比较大的<code>json</code>数据来说，内存就是个问题了</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/faycheng/cJSON\" target=\"_blank\" rel=\"noopener\">cJson源码和源码分析</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"UNIX网络编程-connect函数及其包裹函数介绍","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T06:22:25.000Z","_content":"\n本文将介绍UNIX网络编程中`connect`函数及其包裹函数。\n\n----------\n<!--more-->\n\n## 函数简介\n```C\n#include<sys/socket.h>\n#include<sys/types.h>\n\nint connect(int sockfd, const struct sockaddr* server_addr, socklen_t addrlen);\n\t\t\t\t\t\t\t\t\t返回值：若成功返回0;若失败则返回-1.\n```\n\n`connect`函数用于客户端建立tcp连接，发起三次握手过程。其中`sockfd`标识了主动套接字，`server_addr`是该套接字要连接的主机地址和端口号，`addrlen`为`server_addr`缓冲区的长度。\n\n\n连接失败时，可以根据以下`errno`值判断失败的原因：\n```\nEBADF：参数sockfd 非合法socket处理代码;\nEFAULT：参数serv_addr指针指向无法存取的内存空间;\nENOTSOCK：参数sockfd为一文件描述词，非socket;\nEISCONN：参数sockfd的socket已是连线状态;\nECONNREFUSED：连线要求被server端拒绝;\nETIMEDOUT：企图连线的操作超过限定时间仍未有响应;\nENETUNREACH：无法传送数据包至指定的主机;\nEAFNOSUPPORT：sockaddr结构的sa_family不正确;\nEALREADY：socket为不可阻塞且先前的连线操作还未完成;\n```\n\n## 包裹函数([下载](https://github.com/AnSwErYWJ/UNP/blob/master/TCP/Connect.c))\n```C\n#include<sys/socket.h>\n#include<sys/types.h>\n#include<stdlib.h>\n\n#define MAXSLEEP 128\n\nint my_connect(int sockfd,const struct sockaddr *servaddr,socklen_t addrlen)\n{\n    int nsec;\n    for(nsec = 1;nsec <= MAXSLEEP;nsec <<= 1)\n    {\n        if(connect(sockfd,servaddr,addrlen) == 0)\n            return 0;//connection accepted\n        if(nsec <= MAXSLEEP/2)//sleep nesc,then connect retry\n            sleep(nsec);\n    }\n    return -1;\n}\n```\n\n包裹函数为`connect`函数设置了超时重连的机制，如果连接成功，则成功返回。如果连接失败，则每次等待1、2、4、8。。。秒后继续尝试重新连接，直到`MAXSLEEP`为止。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n\n\n\n\n","source":"_posts/connect-in-unix.md","raw":"---\ntitle: UNIX网络编程-connect函数及其包裹函数介绍\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - tcp\n  - connect\ndate: 2016-07-14 14:22:25\ncategories: C/C++\n---\n\n本文将介绍UNIX网络编程中`connect`函数及其包裹函数。\n\n----------\n<!--more-->\n\n## 函数简介\n```C\n#include<sys/socket.h>\n#include<sys/types.h>\n\nint connect(int sockfd, const struct sockaddr* server_addr, socklen_t addrlen);\n\t\t\t\t\t\t\t\t\t返回值：若成功返回0;若失败则返回-1.\n```\n\n`connect`函数用于客户端建立tcp连接，发起三次握手过程。其中`sockfd`标识了主动套接字，`server_addr`是该套接字要连接的主机地址和端口号，`addrlen`为`server_addr`缓冲区的长度。\n\n\n连接失败时，可以根据以下`errno`值判断失败的原因：\n```\nEBADF：参数sockfd 非合法socket处理代码;\nEFAULT：参数serv_addr指针指向无法存取的内存空间;\nENOTSOCK：参数sockfd为一文件描述词，非socket;\nEISCONN：参数sockfd的socket已是连线状态;\nECONNREFUSED：连线要求被server端拒绝;\nETIMEDOUT：企图连线的操作超过限定时间仍未有响应;\nENETUNREACH：无法传送数据包至指定的主机;\nEAFNOSUPPORT：sockaddr结构的sa_family不正确;\nEALREADY：socket为不可阻塞且先前的连线操作还未完成;\n```\n\n## 包裹函数([下载](https://github.com/AnSwErYWJ/UNP/blob/master/TCP/Connect.c))\n```C\n#include<sys/socket.h>\n#include<sys/types.h>\n#include<stdlib.h>\n\n#define MAXSLEEP 128\n\nint my_connect(int sockfd,const struct sockaddr *servaddr,socklen_t addrlen)\n{\n    int nsec;\n    for(nsec = 1;nsec <= MAXSLEEP;nsec <<= 1)\n    {\n        if(connect(sockfd,servaddr,addrlen) == 0)\n            return 0;//connection accepted\n        if(nsec <= MAXSLEEP/2)//sleep nesc,then connect retry\n            sleep(nsec);\n    }\n    return -1;\n}\n```\n\n包裹函数为`connect`函数设置了超时重连的机制，如果连接成功，则成功返回。如果连接失败，则每次等待1、2、4、8。。。秒后继续尝试重新连接，直到`MAXSLEEP`为止。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n\n\n\n\n","slug":"connect-in-unix","published":1,"updated":"2020-07-21T01:40:07.137Z","layout":"post","photos":[],"link":"","_id":"cklumqgec000a79n5gh9gyl3t","content":"<p>本文将介绍UNIX网络编程中<code>connect</code>函数及其包裹函数。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"函数简介\"><a href=\"#函数简介\" class=\"headerlink\" title=\"函数简介\"></a>函数简介</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> struct sockaddr* server_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t返回值：若成功返回<span class=\"number\">0</span>;若失败则返回<span class=\"number\">-1.</span></span><br></pre></td></tr></table></figure>\n<p><code>connect</code>函数用于客户端建立tcp连接，发起三次握手过程。其中<code>sockfd</code>标识了主动套接字，<code>server_addr</code>是该套接字要连接的主机地址和端口号，<code>addrlen</code>为<code>server_addr</code>缓冲区的长度。</p>\n<p>连接失败时，可以根据以下<code>errno</code>值判断失败的原因：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EBADF：参数sockfd 非合法socket处理代码<span class=\"comment\">;</span></span><br><span class=\"line\">EFAULT：参数serv_addr指针指向无法存取的内存空间<span class=\"comment\">;</span></span><br><span class=\"line\">ENOTSOCK：参数sockfd为一文件描述词，非socket<span class=\"comment\">;</span></span><br><span class=\"line\">EISCONN：参数sockfd的socket已是连线状态<span class=\"comment\">;</span></span><br><span class=\"line\">ECONNREFUSED：连线要求被server端拒绝<span class=\"comment\">;</span></span><br><span class=\"line\">ETIMEDOUT：企图连线的操作超过限定时间仍未有响应<span class=\"comment\">;</span></span><br><span class=\"line\">ENETUNREACH：无法传送数据包至指定的主机<span class=\"comment\">;</span></span><br><span class=\"line\">EAFNOSUPPORT：sockaddr结构的sa_family不正确<span class=\"comment\">;</span></span><br><span class=\"line\">EALREADY：socket为不可阻塞且先前的连线操作还未完成<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"包裹函数-下载\"><a href=\"#包裹函数-下载\" class=\"headerlink\" title=\"包裹函数(下载)\"></a>包裹函数(<a href=\"https://github.com/AnSwErYWJ/UNP/blob/master/TCP/Connect.c\" target=\"_blank\" rel=\"noopener\">下载</a>)</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXSLEEP 128</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">my_connect</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd,<span class=\"keyword\">const</span> struct sockaddr *servaddr,<span class=\"keyword\">socklen_t</span> addrlen)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nsec;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(nsec = <span class=\"number\">1</span>;nsec &lt;= MAXSLEEP;nsec &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(connect(sockfd,servaddr,addrlen) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//connection accepted</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nsec &lt;= MAXSLEEP/<span class=\"number\">2</span>)<span class=\"comment\">//sleep nesc,then connect retry</span></span><br><span class=\"line\">            sleep(nsec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>包裹函数为<code>connect</code>函数设置了超时重连的机制，如果连接成功，则成功返回。如果连接失败，则每次等待1、2、4、8。。。秒后继续尝试重新连接，直到<code>MAXSLEEP</code>为止。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍UNIX网络编程中<code>connect</code>函数及其包裹函数。</p>\n<hr>","more":"<h2 id=\"函数简介\"><a href=\"#函数简介\" class=\"headerlink\" title=\"函数简介\"></a>函数简介</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> struct sockaddr* server_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t返回值：若成功返回<span class=\"number\">0</span>;若失败则返回<span class=\"number\">-1.</span></span><br></pre></td></tr></table></figure>\n<p><code>connect</code>函数用于客户端建立tcp连接，发起三次握手过程。其中<code>sockfd</code>标识了主动套接字，<code>server_addr</code>是该套接字要连接的主机地址和端口号，<code>addrlen</code>为<code>server_addr</code>缓冲区的长度。</p>\n<p>连接失败时，可以根据以下<code>errno</code>值判断失败的原因：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EBADF：参数sockfd 非合法socket处理代码<span class=\"comment\">;</span></span><br><span class=\"line\">EFAULT：参数serv_addr指针指向无法存取的内存空间<span class=\"comment\">;</span></span><br><span class=\"line\">ENOTSOCK：参数sockfd为一文件描述词，非socket<span class=\"comment\">;</span></span><br><span class=\"line\">EISCONN：参数sockfd的socket已是连线状态<span class=\"comment\">;</span></span><br><span class=\"line\">ECONNREFUSED：连线要求被server端拒绝<span class=\"comment\">;</span></span><br><span class=\"line\">ETIMEDOUT：企图连线的操作超过限定时间仍未有响应<span class=\"comment\">;</span></span><br><span class=\"line\">ENETUNREACH：无法传送数据包至指定的主机<span class=\"comment\">;</span></span><br><span class=\"line\">EAFNOSUPPORT：sockaddr结构的sa_family不正确<span class=\"comment\">;</span></span><br><span class=\"line\">EALREADY：socket为不可阻塞且先前的连线操作还未完成<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"包裹函数-下载\"><a href=\"#包裹函数-下载\" class=\"headerlink\" title=\"包裹函数(下载)\"></a>包裹函数(<a href=\"https://github.com/AnSwErYWJ/UNP/blob/master/TCP/Connect.c\" target=\"_blank\" rel=\"noopener\">下载</a>)</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXSLEEP 128</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">my_connect</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd,<span class=\"keyword\">const</span> struct sockaddr *servaddr,<span class=\"keyword\">socklen_t</span> addrlen)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nsec;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(nsec = <span class=\"number\">1</span>;nsec &lt;= MAXSLEEP;nsec &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(connect(sockfd,servaddr,addrlen) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//connection accepted</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nsec &lt;= MAXSLEEP/<span class=\"number\">2</span>)<span class=\"comment\">//sleep nesc,then connect retry</span></span><br><span class=\"line\">            sleep(nsec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>包裹函数为<code>connect</code>函数设置了超时重连的机制，如果连接成功，则成功返回。如果连接失败，则每次等待1、2、4、8。。。秒后继续尝试重新连接，直到<code>MAXSLEEP</code>为止。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux C编程的DEBUG宏","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T06:20:25.000Z","_content":"\nDEBUG宏用于Linux下C编程时调试使用.\n\n----------\n<!--more-->\n\n## 实现代码\n```\n/*************************************************************************\n\t> File Name: debug.c\n\t> Author: AnSwEr\n\t> Mail: 1045837697@qq.com\n\t> Created Time: 2015年07月23日 星期四 18时19分48秒\n ************************************************************************/\n\n#include<stdio.h>\n#define DEBUG_PRINT do{}while(0)\n\n#if defined(DEBUG_PRINT)\n#define DEBUG(...)\\\n        do{\\\n            fprintf(stderr,\"-----DEBUG-----\\n\");\\\n            fprintf(stderr,\"%s %s\\n\",__TIME__,__DATE__);\\\n            fprintf(stderr,\"%s:%d:%s():\",__FILE__,__LINE__,__func__);\\\n            fprintf(stderr,__VA_ARGS__);\\\n        }while(0)\n#endif\n\nint main(void)\n{\n    DEBUG(\"Debug successfully!\\n\");\n    return 0;\n}\n```\n\n## 说明\n1. *do{}while(0)*：使用*do{...}while(0)*构造后的宏定义不会受到大括号、分号等的影响，而且可以定义空宏而不受警告。\n2. 参数介绍：\n```\n __LINE__：在源代码中插入当前源代码行号；\n __FILE__：在源文件中插入当前源文件名；\n __DATE__：在源文件中插入当前的编译日期\n __TIME__：在源文件中插入当前编译时间；\n __func__：输出函数名称,功能与_Function_相同；\n __VA_ARGS__：可变参数类型。\n```\n\n\n> 代码[下载](https://github.com/AnSwErYWJ/DogFood/blob/master/C/debug.c)。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n\n\n\n\n\n","source":"_posts/debug-macro.md","raw":"---\ntitle: Linux C编程的DEBUG宏\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - debug\ndate: 2016-07-14 14:20:25\ncategories: C/C++\n---\n\nDEBUG宏用于Linux下C编程时调试使用.\n\n----------\n<!--more-->\n\n## 实现代码\n```\n/*************************************************************************\n\t> File Name: debug.c\n\t> Author: AnSwEr\n\t> Mail: 1045837697@qq.com\n\t> Created Time: 2015年07月23日 星期四 18时19分48秒\n ************************************************************************/\n\n#include<stdio.h>\n#define DEBUG_PRINT do{}while(0)\n\n#if defined(DEBUG_PRINT)\n#define DEBUG(...)\\\n        do{\\\n            fprintf(stderr,\"-----DEBUG-----\\n\");\\\n            fprintf(stderr,\"%s %s\\n\",__TIME__,__DATE__);\\\n            fprintf(stderr,\"%s:%d:%s():\",__FILE__,__LINE__,__func__);\\\n            fprintf(stderr,__VA_ARGS__);\\\n        }while(0)\n#endif\n\nint main(void)\n{\n    DEBUG(\"Debug successfully!\\n\");\n    return 0;\n}\n```\n\n## 说明\n1. *do{}while(0)*：使用*do{...}while(0)*构造后的宏定义不会受到大括号、分号等的影响，而且可以定义空宏而不受警告。\n2. 参数介绍：\n```\n __LINE__：在源代码中插入当前源代码行号；\n __FILE__：在源文件中插入当前源文件名；\n __DATE__：在源文件中插入当前的编译日期\n __TIME__：在源文件中插入当前编译时间；\n __func__：输出函数名称,功能与_Function_相同；\n __VA_ARGS__：可变参数类型。\n```\n\n\n> 代码[下载](https://github.com/AnSwErYWJ/DogFood/blob/master/C/debug.c)。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n\n\n\n\n\n","slug":"debug-macro","published":1,"updated":"2019-07-24T03:27:59.006Z","layout":"post","photos":[],"link":"","_id":"cklumqgee000d79n590gfars8","content":"<p>DEBUG宏用于Linux下C编程时调试使用.</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; File Name: debug.c</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Author: AnSwEr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Mail: 1045837697@qq.com</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Created Time: 2015年07月23日 星期四 18时19分48秒</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span>**/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#define DEBUG_PRINT <span class=\"keyword\">do</span>&#123;&#125;<span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">if</span> defined(DEBUG_PRINT)</span><br><span class=\"line\">#define DEBUG(...)\\</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;\\</span><br><span class=\"line\">            fprintf(stderr,<span class=\"string\">\"-----DEBUG-----\\n\"</span>);\\</span><br><span class=\"line\">            fprintf(stderr,<span class=\"string\">\"%s %s\\n\"</span>,__TIME__,__DATE__);\\</span><br><span class=\"line\">            fprintf(stderr,<span class=\"string\">\"%s:%d:%s():\"</span>,__FILE__,__LINE__,__func__);\\</span><br><span class=\"line\">            fprintf(stderr,__VA_ARGS__);\\</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DEBUG(<span class=\"string\">\"Debug successfully!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ol>\n<li><em>do{}while(0)</em>：使用<em>do{…}while(0)</em>构造后的宏定义不会受到大括号、分号等的影响，而且可以定义空宏而不受警告。</li>\n<li>参数介绍：<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">__LINE__</span>：在源代码中插入当前源代码行号；</span><br><span class=\"line\"><span class=\"variable\">__FILE__</span>：在源文件中插入当前源文件名；</span><br><span class=\"line\"><span class=\"variable\">__DATE__</span>：在源文件中插入当前的编译日期</span><br><span class=\"line\"><span class=\"variable\">__TIME__</span>：在源文件中插入当前编译时间；</span><br><span class=\"line\"><span class=\"variable\">__func__</span>：输出函数名称,功能与<span class=\"variable\">_Function_</span>相同；</span><br><span class=\"line\"><span class=\"variable\">__VA_ARGS__</span>：可变参数类型。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>代码<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/debug.c\" target=\"_blank\" rel=\"noopener\">下载</a>。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>DEBUG宏用于Linux下C编程时调试使用.</p>\n<hr>","more":"<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; File Name: debug.c</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Author: AnSwEr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Mail: 1045837697@qq.com</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Created Time: 2015年07月23日 星期四 18时19分48秒</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span>**/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#define DEBUG_PRINT <span class=\"keyword\">do</span>&#123;&#125;<span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">if</span> defined(DEBUG_PRINT)</span><br><span class=\"line\">#define DEBUG(...)\\</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;\\</span><br><span class=\"line\">            fprintf(stderr,<span class=\"string\">\"-----DEBUG-----\\n\"</span>);\\</span><br><span class=\"line\">            fprintf(stderr,<span class=\"string\">\"%s %s\\n\"</span>,__TIME__,__DATE__);\\</span><br><span class=\"line\">            fprintf(stderr,<span class=\"string\">\"%s:%d:%s():\"</span>,__FILE__,__LINE__,__func__);\\</span><br><span class=\"line\">            fprintf(stderr,__VA_ARGS__);\\</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DEBUG(<span class=\"string\">\"Debug successfully!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ol>\n<li><em>do{}while(0)</em>：使用<em>do{…}while(0)</em>构造后的宏定义不会受到大括号、分号等的影响，而且可以定义空宏而不受警告。</li>\n<li>参数介绍：<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">__LINE__</span>：在源代码中插入当前源代码行号；</span><br><span class=\"line\"><span class=\"variable\">__FILE__</span>：在源文件中插入当前源文件名；</span><br><span class=\"line\"><span class=\"variable\">__DATE__</span>：在源文件中插入当前的编译日期</span><br><span class=\"line\"><span class=\"variable\">__TIME__</span>：在源文件中插入当前编译时间；</span><br><span class=\"line\"><span class=\"variable\">__func__</span>：输出函数名称,功能与<span class=\"variable\">_Function_</span>相同；</span><br><span class=\"line\"><span class=\"variable\">__VA_ARGS__</span>：可变参数类型。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>代码<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/debug.c\" target=\"_blank\" rel=\"noopener\">下载</a>。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Github徽章整理","Antuor":"AnSwEr(Weijie Yuan)","toc":true,"date":"2016-07-08T06:52:40.000Z","_content":"\n 相信很多在Github上玩耍过的同学们都会发现，在很多项目的README里会有各式各样的徽章，是不是顿时感觉到很高上大？没关系，读完这篇文章你就也可以拥有这些徽章了，甚至可以定制自己的徽章。\n\n-------\n\n<!--more-->\n\n## NodeJs\n如果这是一个用npm管理的一个包,请添加：\n```\n[版本图片](https://www.npmjs.com/package/项目名)\n```\n\n如果你使用了第三方的组件,那可以[标识](https://david-dm.org/)是否为最新版本。\n\n## TypeScript\n如果你是TypeScript开发者,那么请把下面的这些徽章用起来吧：  \n\n[![TypeScript](https://badges.frapsoft.com/typescript/love/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n[![TypeScript](https://badges.frapsoft.com/typescript/love/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n\n[![TypeScript](https://badges.frapsoft.com/typescript/code/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n[![TypeScript](https://badges.frapsoft.com/typescript/code/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n\n[![TypeScript](https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n[![TypeScript](https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n\n[![TypeScript](https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n[![TypeScript](https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n还有更多的格式与尺寸详见[这里](https://github.com/ellerbrock/typescript-badges/)。\n\n## awesome\n如果你是[awesome](https://github.com/sindresorhus/awesome)系列的项目,那可以添加awesome徽章：\n```\n[图片](https://github.com/sindresorhus/awesome)\n```\n\n## Google Analytics\nGoogle Analytics是通过嵌入图像追踪项目访问量的一种方法。\n如[我](https://github.com/AnSwErYWJ)的[DogFood](https://github.com/AnSwErYWJ/DogFood)项目就内嵌了一个追踪图像：  \n[![Analytics](https://ga-beacon.appspot.com/UA-79885141-1/welcome-page)](https://github.com/AnSwErYWJ/DogFood)\n\n具体制作过程可以[参考](https://github.com/igrigorik/ga-beacon)。\n\n\n## Gitter\n这是对issue功能的一个补充。正常情况下，当你给某个项目提出问题时，需要新建一个issue提出，并且需要等待开发者的回复（短则一两天，长则大半年），效率不是很高。而[Gitter](https://gitter.im)就提供了一个实时的聊天室，项目的开发者可以用github账号登陆之，为某个项目创建一个聊天室，然后再项目的Readme中加入如下代码：\n```\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](聊天室 URL)\n```\n就可以显示聊天室的徽章啦：\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/AnSwErYWJ/DogFood)  \n\n单击即可进入聊天室，与开发者进行实时沟通。\n\n## Code Related\n有很多的在线测试平台都提供测试状态标识,你可以把他们放到相应项目中的README中：\n- [Travis Ci](https://travis-ci.org/getting_started)\n- [Codecov](https://codecov.io/gh)\n- [Code Climate](https://codeclimate.com)\n- [bithound](https://www.bithound.io/)\n\n## Version Stability\n[![deprecated](http://badges.github.io/stability-badges/dist/deprecated.svg)](http://github.com/badges/stability-badges)\n```\n[![deprecated](http://badges.github.io/stability-badges/dist/deprecated.svg)](http://github.com/badges/stability-badges)\n```\n[![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)\n```\n[![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)\n```\n[![unstable](http://badges.github.io/stability-badges/dist/unstable.svg)](http://github.com/badges/stability-badges)\n```\n[![unstable](http://badges.github.io/stability-badges/dist/unstable.svg)](http://github.com/badges/stability-badges)\n```\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n```\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n```\n[![frozen](http://badges.github.io/stability-badges/dist/frozen.svg)](http://github.com/badges/stability-badges)\n```\n[![frozen](http://badges.github.io/stability-badges/dist/frozen.svg)](http://github.com/badges/stability-badges)\n```\n[![locked](http://badges.github.io/stability-badges/dist/locked.svg)](http://github.com/badges/stability-badges)\n```\n[![locked](http://badges.github.io/stability-badges/dist/locked.svg)](http://github.com/badges/stability-badges)\n```\n更多请看[这里](https://github.com/badges/stability-badges)。\n\n## Open Source\n[![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)  \n```\n[![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n\n[![Open Source Love](https://badges.frapsoft.com/os/v2/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n[![Open Source Love](https://badges.frapsoft.com/os/v2/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n\n[![Open Source Love](https://badges.frapsoft.com/os/v3/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n[![Open Source Love](https://badges.frapsoft.com/os/v3/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n\n还有更多的徽章格式与尺寸详见[这里](https://github.com/ellerbrock/open-source-badges)。\n\n## Licences\n### Software \n开源软件协议的种类非常多,具体可以参考[阮一峰](https://github.com/ruanyf)的[如何选择开源许可证？](http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html),本文列举了[MIT](https://opensource.org/licenses/mit-license.php)和[GPL](https://opensource.org/licenses/GPL-3.0/)：\n\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)   \n```\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)   \n```\n\n[![GPL Licence](https://badges.frapsoft.com/os/gpl/gpl.svg?v=103)](https://opensource.org/licenses/GPL-3.0/)  \n```\n[![GPL Licence](https://badges.frapsoft.com/os/gpl/gpl.svg?v=103)](https://opensource.org/licenses/GPL-3.0/)  \n```\n还有更多的徽章格式与尺寸详见[这里](https://github.com/ellerbrock/open-source-badges)。\n\n\n\n### Creative Commons\n[知识共享](https://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8)是一系列著作权许可方式，我们可以在[官网](https://creativecommons.org/choose/#metadata)选择自己的许可协议。如我采用了知识共享署名-相同方式共享：  \n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\n## Others\nGithub上有一个[badges](https://github.com/boennemann/badges)的仓库,里面收集了一些常用的,大家可以参考一下。\n\n## Your Badges\n如果你需要自己定制一个徽章的话,可以参考[这里](http://shields.io/)。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- WebSite：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com]()\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n\n","source":"_posts/badges-of-github.md","raw":"---\ntitle: Github徽章整理\nAntuor: AnSwEr(Weijie Yuan)\ntoc: true\ndate: 2016-07-08 14:52:40\ncategories: Git\ntags: github徽章\n---\n\n 相信很多在Github上玩耍过的同学们都会发现，在很多项目的README里会有各式各样的徽章，是不是顿时感觉到很高上大？没关系，读完这篇文章你就也可以拥有这些徽章了，甚至可以定制自己的徽章。\n\n-------\n\n<!--more-->\n\n## NodeJs\n如果这是一个用npm管理的一个包,请添加：\n```\n[版本图片](https://www.npmjs.com/package/项目名)\n```\n\n如果你使用了第三方的组件,那可以[标识](https://david-dm.org/)是否为最新版本。\n\n## TypeScript\n如果你是TypeScript开发者,那么请把下面的这些徽章用起来吧：  \n\n[![TypeScript](https://badges.frapsoft.com/typescript/love/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n[![TypeScript](https://badges.frapsoft.com/typescript/love/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n\n[![TypeScript](https://badges.frapsoft.com/typescript/code/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n[![TypeScript](https://badges.frapsoft.com/typescript/code/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n\n[![TypeScript](https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n[![TypeScript](https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n\n[![TypeScript](https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n[![TypeScript](https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)\n```\n还有更多的格式与尺寸详见[这里](https://github.com/ellerbrock/typescript-badges/)。\n\n## awesome\n如果你是[awesome](https://github.com/sindresorhus/awesome)系列的项目,那可以添加awesome徽章：\n```\n[图片](https://github.com/sindresorhus/awesome)\n```\n\n## Google Analytics\nGoogle Analytics是通过嵌入图像追踪项目访问量的一种方法。\n如[我](https://github.com/AnSwErYWJ)的[DogFood](https://github.com/AnSwErYWJ/DogFood)项目就内嵌了一个追踪图像：  \n[![Analytics](https://ga-beacon.appspot.com/UA-79885141-1/welcome-page)](https://github.com/AnSwErYWJ/DogFood)\n\n具体制作过程可以[参考](https://github.com/igrigorik/ga-beacon)。\n\n\n## Gitter\n这是对issue功能的一个补充。正常情况下，当你给某个项目提出问题时，需要新建一个issue提出，并且需要等待开发者的回复（短则一两天，长则大半年），效率不是很高。而[Gitter](https://gitter.im)就提供了一个实时的聊天室，项目的开发者可以用github账号登陆之，为某个项目创建一个聊天室，然后再项目的Readme中加入如下代码：\n```\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](聊天室 URL)\n```\n就可以显示聊天室的徽章啦：\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/AnSwErYWJ/DogFood)  \n\n单击即可进入聊天室，与开发者进行实时沟通。\n\n## Code Related\n有很多的在线测试平台都提供测试状态标识,你可以把他们放到相应项目中的README中：\n- [Travis Ci](https://travis-ci.org/getting_started)\n- [Codecov](https://codecov.io/gh)\n- [Code Climate](https://codeclimate.com)\n- [bithound](https://www.bithound.io/)\n\n## Version Stability\n[![deprecated](http://badges.github.io/stability-badges/dist/deprecated.svg)](http://github.com/badges/stability-badges)\n```\n[![deprecated](http://badges.github.io/stability-badges/dist/deprecated.svg)](http://github.com/badges/stability-badges)\n```\n[![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)\n```\n[![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)\n```\n[![unstable](http://badges.github.io/stability-badges/dist/unstable.svg)](http://github.com/badges/stability-badges)\n```\n[![unstable](http://badges.github.io/stability-badges/dist/unstable.svg)](http://github.com/badges/stability-badges)\n```\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n```\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n```\n[![frozen](http://badges.github.io/stability-badges/dist/frozen.svg)](http://github.com/badges/stability-badges)\n```\n[![frozen](http://badges.github.io/stability-badges/dist/frozen.svg)](http://github.com/badges/stability-badges)\n```\n[![locked](http://badges.github.io/stability-badges/dist/locked.svg)](http://github.com/badges/stability-badges)\n```\n[![locked](http://badges.github.io/stability-badges/dist/locked.svg)](http://github.com/badges/stability-badges)\n```\n更多请看[这里](https://github.com/badges/stability-badges)。\n\n## Open Source\n[![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)  \n```\n[![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n\n[![Open Source Love](https://badges.frapsoft.com/os/v2/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n[![Open Source Love](https://badges.frapsoft.com/os/v2/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n\n[![Open Source Love](https://badges.frapsoft.com/os/v3/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n[![Open Source Love](https://badges.frapsoft.com/os/v3/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badge/)    \n```\n\n还有更多的徽章格式与尺寸详见[这里](https://github.com/ellerbrock/open-source-badges)。\n\n## Licences\n### Software \n开源软件协议的种类非常多,具体可以参考[阮一峰](https://github.com/ruanyf)的[如何选择开源许可证？](http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html),本文列举了[MIT](https://opensource.org/licenses/mit-license.php)和[GPL](https://opensource.org/licenses/GPL-3.0/)：\n\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)   \n```\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)   \n```\n\n[![GPL Licence](https://badges.frapsoft.com/os/gpl/gpl.svg?v=103)](https://opensource.org/licenses/GPL-3.0/)  \n```\n[![GPL Licence](https://badges.frapsoft.com/os/gpl/gpl.svg?v=103)](https://opensource.org/licenses/GPL-3.0/)  \n```\n还有更多的徽章格式与尺寸详见[这里](https://github.com/ellerbrock/open-source-badges)。\n\n\n\n### Creative Commons\n[知识共享](https://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8)是一系列著作权许可方式，我们可以在[官网](https://creativecommons.org/choose/#metadata)选择自己的许可协议。如我采用了知识共享署名-相同方式共享：  \n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\n## Others\nGithub上有一个[badges](https://github.com/boennemann/badges)的仓库,里面收集了一些常用的,大家可以参考一下。\n\n## Your Badges\n如果你需要自己定制一个徽章的话,可以参考[这里](http://shields.io/)。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- WebSite：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com]()\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n\n","slug":"badges-of-github","published":1,"updated":"2020-07-21T01:40:07.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklumqgef000e79n55g01ots0","content":"<p> 相信很多在Github上玩耍过的同学们都会发现，在很多项目的README里会有各式各样的徽章，是不是顿时感觉到很高上大？没关系，读完这篇文章你就也可以拥有这些徽章了，甚至可以定制自己的徽章。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h2><p>如果这是一个用npm管理的一个包,请添加：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">版本图片</span>](<span class=\"link\">https://www.npmjs.com/package/项目名</span>)</span><br></pre></td></tr></table></figure></p>\n<p>如果你使用了第三方的组件,那可以<a href=\"https://david-dm.org/\" target=\"_blank\" rel=\"noopener\">标识</a>是否为最新版本。</p>\n<h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><p>如果你是TypeScript开发者,那么请把下面的这些徽章用起来吧：  </p>\n<p><a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/typescript/love/typescript.svg?v=101\" alt=\"TypeScript\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![TypeScript</span>](<span class=\"link\">https://badges.frapsoft.com/typescript/love/typescript.svg?v=101</span>)](<span class=\"link\">https://github.com/ellerbrock/typescript-badges/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/typescript/code/typescript.svg?v=101\" alt=\"TypeScript\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![TypeScript</span>](<span class=\"link\">https://badges.frapsoft.com/typescript/code/typescript.svg?v=101</span>)](<span class=\"link\">https://github.com/ellerbrock/typescript-badges/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101\" alt=\"TypeScript\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![TypeScript</span>](<span class=\"link\">https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101</span>)](<span class=\"link\">https://github.com/ellerbrock/typescript-badges/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101\" alt=\"TypeScript\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![TypeScript</span>](<span class=\"link\">https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101</span>)](<span class=\"link\">https://github.com/ellerbrock/typescript-badges/</span>)</span><br></pre></td></tr></table></figure></p>\n<p>还有更多的格式与尺寸详见<a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"awesome\"><a href=\"#awesome\" class=\"headerlink\" title=\"awesome\"></a>awesome</h2><p>如果你是<a href=\"https://github.com/sindresorhus/awesome\" target=\"_blank\" rel=\"noopener\">awesome</a>系列的项目,那可以添加awesome徽章：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">图片</span>](<span class=\"link\">https://github.com/sindresorhus/awesome</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Google-Analytics\"><a href=\"#Google-Analytics\" class=\"headerlink\" title=\"Google Analytics\"></a>Google Analytics</h2><p>Google Analytics是通过嵌入图像追踪项目访问量的一种方法。<br>如<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">我</a>的<a href=\"https://github.com/AnSwErYWJ/DogFood\" target=\"_blank\" rel=\"noopener\">DogFood</a>项目就内嵌了一个追踪图像：<br><a href=\"https://github.com/AnSwErYWJ/DogFood\" target=\"_blank\" rel=\"noopener\"><img src=\"https://ga-beacon.appspot.com/UA-79885141-1/welcome-page\" alt=\"Analytics\"></a></p>\n<p>具体制作过程可以<a href=\"https://github.com/igrigorik/ga-beacon\" target=\"_blank\" rel=\"noopener\">参考</a>。</p>\n<h2 id=\"Gitter\"><a href=\"#Gitter\" class=\"headerlink\" title=\"Gitter\"></a>Gitter</h2><p>这是对issue功能的一个补充。正常情况下，当你给某个项目提出问题时，需要新建一个issue提出，并且需要等待开发者的回复（短则一两天，长则大半年），效率不是很高。而<a href=\"https://gitter.im\" target=\"_blank\" rel=\"noopener\">Gitter</a>就提供了一个实时的聊天室，项目的开发者可以用github账号登陆之，为某个项目创建一个聊天室，然后再项目的Readme中加入如下代码：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![Gitter</span>](<span class=\"link\">https://badges.gitter.im/Join Chat.svg</span>)](<span class=\"link\">聊天室 URL</span>)</span><br></pre></td></tr></table></figure></p>\n<p>就可以显示聊天室的徽章啦：<br><a href=\"https://gitter.im/AnSwErYWJ/DogFood\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.gitter.im/Join Chat.svg\" alt=\"Gitter\"></a>  </p>\n<p>单击即可进入聊天室，与开发者进行实时沟通。</p>\n<h2 id=\"Code-Related\"><a href=\"#Code-Related\" class=\"headerlink\" title=\"Code Related\"></a>Code Related</h2><p>有很多的在线测试平台都提供测试状态标识,你可以把他们放到相应项目中的README中：</p>\n<ul>\n<li><a href=\"https://travis-ci.org/getting_started\" target=\"_blank\" rel=\"noopener\">Travis Ci</a></li>\n<li><a href=\"https://codecov.io/gh\" target=\"_blank\" rel=\"noopener\">Codecov</a></li>\n<li><a href=\"https://codeclimate.com\" target=\"_blank\" rel=\"noopener\">Code Climate</a></li>\n<li><a href=\"https://www.bithound.io/\" target=\"_blank\" rel=\"noopener\">bithound</a></li>\n</ul>\n<h2 id=\"Version-Stability\"><a href=\"#Version-Stability\" class=\"headerlink\" title=\"Version Stability\"></a>Version Stability</h2><p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/deprecated.svg\" alt=\"deprecated\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![deprecated</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/deprecated.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![experimental</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/experimental.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![unstable</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/unstable.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![stable</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/stable.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/frozen.svg\" alt=\"frozen\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![frozen</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/frozen.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/locked.svg\" alt=\"locked\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![locked</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/locked.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p>更多请看<a href=\"https://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"Open-Source\"><a href=\"#Open-Source\" class=\"headerlink\" title=\"Open Source\"></a>Open Source</h2><p><a href=\"https://github.com/ellerbrock/open-source-badge/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/v1/open-source.svg?v=103\" alt=\"Open Source Love\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![Open Source Love</span>](<span class=\"link\">https://badges.frapsoft.com/os/v1/open-source.svg?v=103</span>)](<span class=\"link\">https://github.com/ellerbrock/open-source-badge/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/open-source-badge/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/v2/open-source.svg?v=103\" alt=\"Open Source Love\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![Open Source Love</span>](<span class=\"link\">https://badges.frapsoft.com/os/v2/open-source.svg?v=103</span>)](<span class=\"link\">https://github.com/ellerbrock/open-source-badge/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/open-source-badge/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![Open Source Love</span>](<span class=\"link\">https://badges.frapsoft.com/os/v3/open-source.svg?v=103</span>)](<span class=\"link\">https://github.com/ellerbrock/open-source-badge/</span>)</span><br></pre></td></tr></table></figure></p>\n<p>还有更多的徽章格式与尺寸详见<a href=\"https://github.com/ellerbrock/open-source-badges\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"Licences\"><a href=\"#Licences\" class=\"headerlink\" title=\"Licences\"></a>Licences</h2><h3 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h3><p>开源软件协议的种类非常多,具体可以参考<a href=\"https://github.com/ruanyf\" target=\"_blank\" rel=\"noopener\">阮一峰</a>的<a href=\"http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html\" target=\"_blank\" rel=\"noopener\">如何选择开源许可证？</a>,本文列举了<a href=\"https://opensource.org/licenses/mit-license.php\" target=\"_blank\" rel=\"noopener\">MIT</a>和<a href=\"https://opensource.org/licenses/GPL-3.0/\" target=\"_blank\" rel=\"noopener\">GPL</a>：</p>\n<p><a href=\"https://opensource.org/licenses/mit-license.php\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/mit/mit.svg?v=103\" alt=\"MIT Licence\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![MIT Licence</span>](<span class=\"link\">https://badges.frapsoft.com/os/mit/mit.svg?v=103</span>)](<span class=\"link\">https://opensource.org/licenses/mit-license.php</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://opensource.org/licenses/GPL-3.0/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/gpl/gpl.svg?v=103\" alt=\"GPL Licence\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![GPL Licence</span>](<span class=\"link\">https://badges.frapsoft.com/os/gpl/gpl.svg?v=103</span>)](<span class=\"link\">https://opensource.org/licenses/GPL-3.0/</span>)</span><br></pre></td></tr></table></figure></p>\n<p>还有更多的徽章格式与尺寸详见<a href=\"https://github.com/ellerbrock/open-source-badges\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"Creative-Commons\"><a href=\"#Creative-Commons\" class=\"headerlink\" title=\"Creative Commons\"></a>Creative Commons</h3><p><a href=\"https://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8\" target=\"_blank\" rel=\"noopener\">知识共享</a>是一系列著作权许可方式，我们可以在<a href=\"https://creativecommons.org/choose/#metadata\" target=\"_blank\" rel=\"noopener\">官网</a>选择自己的许可协议。如我采用了知识共享署名-相同方式共享：  </p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.</p>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><p>Github上有一个<a href=\"https://github.com/boennemann/badges\" target=\"_blank\" rel=\"noopener\">badges</a>的仓库,里面收集了一些常用的,大家可以参考一下。</p>\n<h2 id=\"Your-Badges\"><a href=\"#Your-Badges\" class=\"headerlink\" title=\"Your Badges\"></a>Your Badges</h2><p>如果你需要自己定制一个徽章的话,可以参考<a href=\"http://shields.io/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>WebSite：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href>yuanweijie1993@gmail.com</a></li>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p> 相信很多在Github上玩耍过的同学们都会发现，在很多项目的README里会有各式各样的徽章，是不是顿时感觉到很高上大？没关系，读完这篇文章你就也可以拥有这些徽章了，甚至可以定制自己的徽章。</p>\n<hr>","more":"<h2 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h2><p>如果这是一个用npm管理的一个包,请添加：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">版本图片</span>](<span class=\"link\">https://www.npmjs.com/package/项目名</span>)</span><br></pre></td></tr></table></figure></p>\n<p>如果你使用了第三方的组件,那可以<a href=\"https://david-dm.org/\" target=\"_blank\" rel=\"noopener\">标识</a>是否为最新版本。</p>\n<h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><p>如果你是TypeScript开发者,那么请把下面的这些徽章用起来吧：  </p>\n<p><a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/typescript/love/typescript.svg?v=101\" alt=\"TypeScript\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![TypeScript</span>](<span class=\"link\">https://badges.frapsoft.com/typescript/love/typescript.svg?v=101</span>)](<span class=\"link\">https://github.com/ellerbrock/typescript-badges/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/typescript/code/typescript.svg?v=101\" alt=\"TypeScript\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![TypeScript</span>](<span class=\"link\">https://badges.frapsoft.com/typescript/code/typescript.svg?v=101</span>)](<span class=\"link\">https://github.com/ellerbrock/typescript-badges/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101\" alt=\"TypeScript\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![TypeScript</span>](<span class=\"link\">https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101</span>)](<span class=\"link\">https://github.com/ellerbrock/typescript-badges/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101\" alt=\"TypeScript\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![TypeScript</span>](<span class=\"link\">https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101</span>)](<span class=\"link\">https://github.com/ellerbrock/typescript-badges/</span>)</span><br></pre></td></tr></table></figure></p>\n<p>还有更多的格式与尺寸详见<a href=\"https://github.com/ellerbrock/typescript-badges/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"awesome\"><a href=\"#awesome\" class=\"headerlink\" title=\"awesome\"></a>awesome</h2><p>如果你是<a href=\"https://github.com/sindresorhus/awesome\" target=\"_blank\" rel=\"noopener\">awesome</a>系列的项目,那可以添加awesome徽章：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">图片</span>](<span class=\"link\">https://github.com/sindresorhus/awesome</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Google-Analytics\"><a href=\"#Google-Analytics\" class=\"headerlink\" title=\"Google Analytics\"></a>Google Analytics</h2><p>Google Analytics是通过嵌入图像追踪项目访问量的一种方法。<br>如<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">我</a>的<a href=\"https://github.com/AnSwErYWJ/DogFood\" target=\"_blank\" rel=\"noopener\">DogFood</a>项目就内嵌了一个追踪图像：<br><a href=\"https://github.com/AnSwErYWJ/DogFood\" target=\"_blank\" rel=\"noopener\"><img src=\"https://ga-beacon.appspot.com/UA-79885141-1/welcome-page\" alt=\"Analytics\"></a></p>\n<p>具体制作过程可以<a href=\"https://github.com/igrigorik/ga-beacon\" target=\"_blank\" rel=\"noopener\">参考</a>。</p>\n<h2 id=\"Gitter\"><a href=\"#Gitter\" class=\"headerlink\" title=\"Gitter\"></a>Gitter</h2><p>这是对issue功能的一个补充。正常情况下，当你给某个项目提出问题时，需要新建一个issue提出，并且需要等待开发者的回复（短则一两天，长则大半年），效率不是很高。而<a href=\"https://gitter.im\" target=\"_blank\" rel=\"noopener\">Gitter</a>就提供了一个实时的聊天室，项目的开发者可以用github账号登陆之，为某个项目创建一个聊天室，然后再项目的Readme中加入如下代码：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![Gitter</span>](<span class=\"link\">https://badges.gitter.im/Join Chat.svg</span>)](<span class=\"link\">聊天室 URL</span>)</span><br></pre></td></tr></table></figure></p>\n<p>就可以显示聊天室的徽章啦：<br><a href=\"https://gitter.im/AnSwErYWJ/DogFood\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.gitter.im/Join Chat.svg\" alt=\"Gitter\"></a>  </p>\n<p>单击即可进入聊天室，与开发者进行实时沟通。</p>\n<h2 id=\"Code-Related\"><a href=\"#Code-Related\" class=\"headerlink\" title=\"Code Related\"></a>Code Related</h2><p>有很多的在线测试平台都提供测试状态标识,你可以把他们放到相应项目中的README中：</p>\n<ul>\n<li><a href=\"https://travis-ci.org/getting_started\" target=\"_blank\" rel=\"noopener\">Travis Ci</a></li>\n<li><a href=\"https://codecov.io/gh\" target=\"_blank\" rel=\"noopener\">Codecov</a></li>\n<li><a href=\"https://codeclimate.com\" target=\"_blank\" rel=\"noopener\">Code Climate</a></li>\n<li><a href=\"https://www.bithound.io/\" target=\"_blank\" rel=\"noopener\">bithound</a></li>\n</ul>\n<h2 id=\"Version-Stability\"><a href=\"#Version-Stability\" class=\"headerlink\" title=\"Version Stability\"></a>Version Stability</h2><p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/deprecated.svg\" alt=\"deprecated\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![deprecated</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/deprecated.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![experimental</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/experimental.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![unstable</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/unstable.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![stable</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/stable.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/frozen.svg\" alt=\"frozen\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![frozen</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/frozen.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\"><img src=\"http://badges.github.io/stability-badges/dist/locked.svg\" alt=\"locked\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![locked</span>](<span class=\"link\">http://badges.github.io/stability-badges/dist/locked.svg</span>)](<span class=\"link\">http://github.com/badges/stability-badges</span>)</span><br></pre></td></tr></table></figure></p>\n<p>更多请看<a href=\"https://github.com/badges/stability-badges\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"Open-Source\"><a href=\"#Open-Source\" class=\"headerlink\" title=\"Open Source\"></a>Open Source</h2><p><a href=\"https://github.com/ellerbrock/open-source-badge/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/v1/open-source.svg?v=103\" alt=\"Open Source Love\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![Open Source Love</span>](<span class=\"link\">https://badges.frapsoft.com/os/v1/open-source.svg?v=103</span>)](<span class=\"link\">https://github.com/ellerbrock/open-source-badge/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/open-source-badge/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/v2/open-source.svg?v=103\" alt=\"Open Source Love\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![Open Source Love</span>](<span class=\"link\">https://badges.frapsoft.com/os/v2/open-source.svg?v=103</span>)](<span class=\"link\">https://github.com/ellerbrock/open-source-badge/</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/ellerbrock/open-source-badge/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![Open Source Love</span>](<span class=\"link\">https://badges.frapsoft.com/os/v3/open-source.svg?v=103</span>)](<span class=\"link\">https://github.com/ellerbrock/open-source-badge/</span>)</span><br></pre></td></tr></table></figure></p>\n<p>还有更多的徽章格式与尺寸详见<a href=\"https://github.com/ellerbrock/open-source-badges\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"Licences\"><a href=\"#Licences\" class=\"headerlink\" title=\"Licences\"></a>Licences</h2><h3 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h3><p>开源软件协议的种类非常多,具体可以参考<a href=\"https://github.com/ruanyf\" target=\"_blank\" rel=\"noopener\">阮一峰</a>的<a href=\"http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html\" target=\"_blank\" rel=\"noopener\">如何选择开源许可证？</a>,本文列举了<a href=\"https://opensource.org/licenses/mit-license.php\" target=\"_blank\" rel=\"noopener\">MIT</a>和<a href=\"https://opensource.org/licenses/GPL-3.0/\" target=\"_blank\" rel=\"noopener\">GPL</a>：</p>\n<p><a href=\"https://opensource.org/licenses/mit-license.php\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/mit/mit.svg?v=103\" alt=\"MIT Licence\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![MIT Licence</span>](<span class=\"link\">https://badges.frapsoft.com/os/mit/mit.svg?v=103</span>)](<span class=\"link\">https://opensource.org/licenses/mit-license.php</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://opensource.org/licenses/GPL-3.0/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.frapsoft.com/os/gpl/gpl.svg?v=103\" alt=\"GPL Licence\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![GPL Licence</span>](<span class=\"link\">https://badges.frapsoft.com/os/gpl/gpl.svg?v=103</span>)](<span class=\"link\">https://opensource.org/licenses/GPL-3.0/</span>)</span><br></pre></td></tr></table></figure></p>\n<p>还有更多的徽章格式与尺寸详见<a href=\"https://github.com/ellerbrock/open-source-badges\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"Creative-Commons\"><a href=\"#Creative-Commons\" class=\"headerlink\" title=\"Creative Commons\"></a>Creative Commons</h3><p><a href=\"https://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8\" target=\"_blank\" rel=\"noopener\">知识共享</a>是一系列著作权许可方式，我们可以在<a href=\"https://creativecommons.org/choose/#metadata\" target=\"_blank\" rel=\"noopener\">官网</a>选择自己的许可协议。如我采用了知识共享署名-相同方式共享：  </p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.</p>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><p>Github上有一个<a href=\"https://github.com/boennemann/badges\" target=\"_blank\" rel=\"noopener\">badges</a>的仓库,里面收集了一些常用的,大家可以参考一下。</p>\n<h2 id=\"Your-Badges\"><a href=\"#Your-Badges\" class=\"headerlink\" title=\"Your Badges\"></a>Your Badges</h2><p>如果你需要自己定制一个徽章的话,可以参考<a href=\"http://shields.io/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>WebSite：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href>yuanweijie1993@gmail.com</a></li>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux Shell 脚本调试总结","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T06:15:14.000Z","_content":"\nShell脚本是用户与Linux操作系统交互的一种方式,在脚本编程过程中自然少不了进行调试工作,本文将介绍三种常用的调试方法.(默认使用bash shell)\n\n-----\n\n<!--more-->\n\n## 追踪脚本的执行\n使用**-x**选项可以打印出脚本执行的每一行命令以及当前状态.\n有如下脚本,打印数字1到10:\n```\n#!/bin/bash\n\nfor i in {1..10}\ndo\n    echo $i\ndone\n```\n我们使用**-x**选项进行调试如下:\n```\n#在每一行前加上行号\nexport PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]}: '\n#进行调试\nsh -x test.sh\n#调试结果\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 1\n1\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 2\n2\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 3\n3\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 4\n4\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 5\n5\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 6\n6\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 7\n7\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 8\n8\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 9\n9\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 10\n10\n```\n\n有时候,你只需要对脚本的一部分进行调试,那么可以使用如下命令:\n```\nset -x #在执行时显示参数和命令\nset +x #禁止调试\nset -v #当命令行读取时显示输入\nset +v #禁止打印输入\n```\n可以使用**set builtin**来启用或者禁止调试打印.\n对上文脚本做如下修改:\n```\n#!/bin/bash\n\nfor i in {1..10}\ndo\n    set -x\n    echo $i\n    set +x\ndone\n```\n结果如下:\n```\n+test.sh:6:: echo 1\n1\n+test.sh:7:: set +x\n+test.sh:6:: echo 2\n2\n+test.sh:7:: set +x\n+test.sh:6:: echo 3\n3\n+test.sh:7:: set +x\n+test.sh:6:: echo 4\n4\n+test.sh:7:: set +x\n+test.sh:6:: echo 5\n5\n+test.sh:7:: set +x\n+test.sh:6:: echo 6\n6\n+test.sh:7:: set +x\n+test.sh:6:: echo 7\n7\n+test.sh:7:: set +x\n+test.sh:6:: echo 8\n8\n+test.sh:7:: set +x\n+test.sh:6:: echo 9\n9\n+test.sh:7:: set +x\n+test.sh:6:: echo 10\n10\n+test.sh:7:: set +x\n```\n\n## 自定义日志\n上面这种调试手段是bash内建的,而且输出格式固定而且繁琐.所以我们需要根据需要的信息,自定义格式来显示调试信息,通过设定_DEBUG环境变量来完成:\n```\n#!/bin/bash\n\n# run:_DEBUG=on sh debug.sh\n\nfunction DEBUG()\n{\n    [ \"$_DEBUG\" == \"on\" ] && $@ || :\n}\n\nfor i in {1..5}\ndo\n    DEBUG echo -e \"This is debug line!\"\n    echo $i\ndone\n\n```\n我们将_DEBUG环境变量设定为一个开关,只有打开时才会输出调试日志.\n使用如上脚本结果如下:\n```\n[aidu1602@ResU10 tools]$ _DEBUG=on sh debug.sh\nThis is debug line!\n1\nThis is debug line!\n2\nThis is debug line!\n3\nThis is debug line!\n4\nThis is debug line!\n5\n```\n这样我们就可以自定义调试信息,并且可以控制调试开关啦.\n\n## 使用专用调试器\n如果你需要调试一个非常复杂的脚本,并且需要一个及其专业的调试器,像GDB那样,那么我推荐这款开源的脚本调试器[bashdb](http://bashdb.sourceforge.net/),具体使用可以参考它的[文档](http://bashdb.sourceforge.net/bashdb.html).\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n","source":"_posts/debug-for-shell-script.md","raw":"---\ntitle: Linux Shell 脚本调试总结\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - debug\ndate: 2016-07-14 14:15:14\ncategories: Shell脚本\n---\n\nShell脚本是用户与Linux操作系统交互的一种方式,在脚本编程过程中自然少不了进行调试工作,本文将介绍三种常用的调试方法.(默认使用bash shell)\n\n-----\n\n<!--more-->\n\n## 追踪脚本的执行\n使用**-x**选项可以打印出脚本执行的每一行命令以及当前状态.\n有如下脚本,打印数字1到10:\n```\n#!/bin/bash\n\nfor i in {1..10}\ndo\n    echo $i\ndone\n```\n我们使用**-x**选项进行调试如下:\n```\n#在每一行前加上行号\nexport PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]}: '\n#进行调试\nsh -x test.sh\n#调试结果\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 1\n1\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 2\n2\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 3\n3\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 4\n4\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 5\n5\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 6\n6\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 7\n7\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 8\n8\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 9\n9\n+test.sh:3:: for i in '{1..10}'\n+test.sh:5:: echo 10\n10\n```\n\n有时候,你只需要对脚本的一部分进行调试,那么可以使用如下命令:\n```\nset -x #在执行时显示参数和命令\nset +x #禁止调试\nset -v #当命令行读取时显示输入\nset +v #禁止打印输入\n```\n可以使用**set builtin**来启用或者禁止调试打印.\n对上文脚本做如下修改:\n```\n#!/bin/bash\n\nfor i in {1..10}\ndo\n    set -x\n    echo $i\n    set +x\ndone\n```\n结果如下:\n```\n+test.sh:6:: echo 1\n1\n+test.sh:7:: set +x\n+test.sh:6:: echo 2\n2\n+test.sh:7:: set +x\n+test.sh:6:: echo 3\n3\n+test.sh:7:: set +x\n+test.sh:6:: echo 4\n4\n+test.sh:7:: set +x\n+test.sh:6:: echo 5\n5\n+test.sh:7:: set +x\n+test.sh:6:: echo 6\n6\n+test.sh:7:: set +x\n+test.sh:6:: echo 7\n7\n+test.sh:7:: set +x\n+test.sh:6:: echo 8\n8\n+test.sh:7:: set +x\n+test.sh:6:: echo 9\n9\n+test.sh:7:: set +x\n+test.sh:6:: echo 10\n10\n+test.sh:7:: set +x\n```\n\n## 自定义日志\n上面这种调试手段是bash内建的,而且输出格式固定而且繁琐.所以我们需要根据需要的信息,自定义格式来显示调试信息,通过设定_DEBUG环境变量来完成:\n```\n#!/bin/bash\n\n# run:_DEBUG=on sh debug.sh\n\nfunction DEBUG()\n{\n    [ \"$_DEBUG\" == \"on\" ] && $@ || :\n}\n\nfor i in {1..5}\ndo\n    DEBUG echo -e \"This is debug line!\"\n    echo $i\ndone\n\n```\n我们将_DEBUG环境变量设定为一个开关,只有打开时才会输出调试日志.\n使用如上脚本结果如下:\n```\n[aidu1602@ResU10 tools]$ _DEBUG=on sh debug.sh\nThis is debug line!\n1\nThis is debug line!\n2\nThis is debug line!\n3\nThis is debug line!\n4\nThis is debug line!\n5\n```\n这样我们就可以自定义调试信息,并且可以控制调试开关啦.\n\n## 使用专用调试器\n如果你需要调试一个非常复杂的脚本,并且需要一个及其专业的调试器,像GDB那样,那么我推荐这款开源的脚本调试器[bashdb](http://bashdb.sourceforge.net/),具体使用可以参考它的[文档](http://bashdb.sourceforge.net/bashdb.html).\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n","slug":"debug-for-shell-script","published":1,"updated":"2020-07-21T01:40:07.137Z","layout":"post","photos":[],"link":"","_id":"cklumqgeg000i79n50abvakig","content":"<p>Shell脚本是用户与Linux操作系统交互的一种方式,在脚本编程过程中自然少不了进行调试工作,本文将介绍三种常用的调试方法.(默认使用bash shell)</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"追踪脚本的执行\"><a href=\"#追踪脚本的执行\" class=\"headerlink\" title=\"追踪脚本的执行\"></a>追踪脚本的执行</h2><p>使用<strong>-x</strong>选项可以打印出脚本执行的每一行命令以及当前状态.<br>有如下脚本,打印数字1到10:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..10&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>我们使用<strong>-x</strong>选项进行调试如下:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在每一行前加上行号</span><br><span class=\"line\">export PS4=<span class=\"string\">'+$&#123;BASH_SOURCE&#125;:$&#123;LINENO&#125;:$&#123;FUNCNAME[0]&#125;: '</span></span><br><span class=\"line\">#进行调试</span><br><span class=\"line\">sh -x test.sh</span><br><span class=\"line\">#调试结果</span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n<p>有时候,你只需要对脚本的一部分进行调试,那么可以使用如下命令:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> -x <span class=\"comment\">#在执行时显示参数和命令</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> +x <span class=\"comment\">#禁止调试</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> -v <span class=\"comment\">#当命令行读取时显示输入</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> +v <span class=\"comment\">#禁止打印输入</span></span><br></pre></td></tr></table></figure></p>\n<p>可以使用<strong>set builtin</strong>来启用或者禁止调试打印.<br>对上文脚本做如下修改:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..10&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">set</span> -x</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\">    <span class=\"built_in\">set</span> +x</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>结果如下:<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 1</span><br><span class=\"line\">1</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 2</span><br><span class=\"line\">2</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 3</span><br><span class=\"line\">3</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 4</span><br><span class=\"line\">4</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 5</span><br><span class=\"line\">5</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 6</span><br><span class=\"line\">6</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 7</span><br><span class=\"line\">7</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 8</span><br><span class=\"line\">8</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 9</span><br><span class=\"line\">9</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 10</span><br><span class=\"line\">10</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"自定义日志\"><a href=\"#自定义日志\" class=\"headerlink\" title=\"自定义日志\"></a>自定义日志</h2><p>上面这种调试手段是bash内建的,而且输出格式固定而且繁琐.所以我们需要根据需要的信息,自定义格式来显示调试信息,通过设定_DEBUG环境变量来完成:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run:_DEBUG=on sh debug.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> DEBUG()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [ <span class=\"string\">\"<span class=\"variable\">$_DEBUG</span>\"</span> == <span class=\"string\">\"on\"</span> ] &amp;&amp; <span class=\"variable\">$@</span> || :</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..5&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    DEBUG <span class=\"built_in\">echo</span> -e <span class=\"string\">\"This is debug line!\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>我们将_DEBUG环境变量设定为一个开关,只有打开时才会输出调试日志.<br>使用如上脚本结果如下:<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[aidu1602@ResU10 tools]$ _DEBUG=<span class=\"keyword\">on</span> <span class=\"keyword\">sh</span> <span class=\"keyword\">debug</span>.<span class=\"keyword\">sh</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>这样我们就可以自定义调试信息,并且可以控制调试开关啦.</p>\n<h2 id=\"使用专用调试器\"><a href=\"#使用专用调试器\" class=\"headerlink\" title=\"使用专用调试器\"></a>使用专用调试器</h2><p>如果你需要调试一个非常复杂的脚本,并且需要一个及其专业的调试器,像GDB那样,那么我推荐这款开源的脚本调试器<a href=\"http://bashdb.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">bashdb</a>,具体使用可以参考它的<a href=\"http://bashdb.sourceforge.net/bashdb.html\" target=\"_blank\" rel=\"noopener\">文档</a>.</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>Shell脚本是用户与Linux操作系统交互的一种方式,在脚本编程过程中自然少不了进行调试工作,本文将介绍三种常用的调试方法.(默认使用bash shell)</p>\n<hr>","more":"<h2 id=\"追踪脚本的执行\"><a href=\"#追踪脚本的执行\" class=\"headerlink\" title=\"追踪脚本的执行\"></a>追踪脚本的执行</h2><p>使用<strong>-x</strong>选项可以打印出脚本执行的每一行命令以及当前状态.<br>有如下脚本,打印数字1到10:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..10&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>我们使用<strong>-x</strong>选项进行调试如下:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在每一行前加上行号</span><br><span class=\"line\">export PS4=<span class=\"string\">'+$&#123;BASH_SOURCE&#125;:$&#123;LINENO&#125;:$&#123;FUNCNAME[0]&#125;: '</span></span><br><span class=\"line\">#进行调试</span><br><span class=\"line\">sh -x test.sh</span><br><span class=\"line\">#调试结果</span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">3</span>:: <span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">'&#123;1..10&#125;'</span></span><br><span class=\"line\">+test<span class=\"selector-class\">.sh</span>:<span class=\"number\">5</span>:: echo <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n<p>有时候,你只需要对脚本的一部分进行调试,那么可以使用如下命令:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> -x <span class=\"comment\">#在执行时显示参数和命令</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> +x <span class=\"comment\">#禁止调试</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> -v <span class=\"comment\">#当命令行读取时显示输入</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> +v <span class=\"comment\">#禁止打印输入</span></span><br></pre></td></tr></table></figure></p>\n<p>可以使用<strong>set builtin</strong>来启用或者禁止调试打印.<br>对上文脚本做如下修改:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..10&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">set</span> -x</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\">    <span class=\"built_in\">set</span> +x</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>结果如下:<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 1</span><br><span class=\"line\">1</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 2</span><br><span class=\"line\">2</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 3</span><br><span class=\"line\">3</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 4</span><br><span class=\"line\">4</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 5</span><br><span class=\"line\">5</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 6</span><br><span class=\"line\">6</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 7</span><br><span class=\"line\">7</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 8</span><br><span class=\"line\">8</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 9</span><br><span class=\"line\">9</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:6:: echo 10</span><br><span class=\"line\">10</span><br><span class=\"line\">+<span class=\"keyword\">test</span>.<span class=\"keyword\">sh</span>:7:: <span class=\"keyword\">set</span> +x</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"自定义日志\"><a href=\"#自定义日志\" class=\"headerlink\" title=\"自定义日志\"></a>自定义日志</h2><p>上面这种调试手段是bash内建的,而且输出格式固定而且繁琐.所以我们需要根据需要的信息,自定义格式来显示调试信息,通过设定_DEBUG环境变量来完成:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run:_DEBUG=on sh debug.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> DEBUG()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [ <span class=\"string\">\"<span class=\"variable\">$_DEBUG</span>\"</span> == <span class=\"string\">\"on\"</span> ] &amp;&amp; <span class=\"variable\">$@</span> || :</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..5&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    DEBUG <span class=\"built_in\">echo</span> -e <span class=\"string\">\"This is debug line!\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>我们将_DEBUG环境变量设定为一个开关,只有打开时才会输出调试日志.<br>使用如上脚本结果如下:<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[aidu1602@ResU10 tools]$ _DEBUG=<span class=\"keyword\">on</span> <span class=\"keyword\">sh</span> <span class=\"keyword\">debug</span>.<span class=\"keyword\">sh</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">This <span class=\"keyword\">is</span> <span class=\"keyword\">debug</span> line!</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>这样我们就可以自定义调试信息,并且可以控制调试开关啦.</p>\n<h2 id=\"使用专用调试器\"><a href=\"#使用专用调试器\" class=\"headerlink\" title=\"使用专用调试器\"></a>使用专用调试器</h2><p>如果你需要调试一个非常复杂的脚本,并且需要一个及其专业的调试器,像GDB那样,那么我推荐这款开源的脚本调试器<a href=\"http://bashdb.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">bashdb</a>,具体使用可以参考它的<a href=\"http://bashdb.sourceforge.net/bashdb.html\" target=\"_blank\" rel=\"noopener\">文档</a>.</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"线程同步机制条件变量的使用与思考","Antuor":"AnSwEr(Weijie Yuan)","toc":true,"date":"2017-12-15T14:23:08.000Z","_content":"条件变量是*Linux*线程同步的一种机制，与互斥量一起使用时，允许线程以无竞争的方式等待特定条件的发生\n\n------\n<!--more-->\n\n[TOC]\n\n## 关键函数\n### 初始化与注销\n```\n#include <pthread.h>\n\n// 静态初始化\npthread_cond_t cond = PTHREAD_COND_INITIALIZER;\n\n// 动态初始化\nint pthread_cond_init(thread_cond_t *cond, \n                      const pthread_condattr_t *attr);\n\n// 反初始化，即注销\nint pthread_cond_destroy(pthread_cond_t *cond);\n\n返回值: 若成功，返回0；否则，返回错误编码\n```\n注意：\n+ 只有在没有线程在该条件变量上等待时，才可以注销条件变量，否则会返回`EBUSY`\n+  `Linux`在实现条件变量时，并没有为条件变量分配资源，所以在注销一个条件变量时，只需要注意该变量是否仍有等待线程即可\n\n### 线程等待\n```\n#include <pthread.h>\n\nint pthread_cond_wait(pthread_cond_t *cond, \n                      pthread_mutex_t *mutex);\n\nint pthread_cond_timedwait(pthread_cond_t *cond, \n                           pthread_mutex_t *mutex, \n                           const struct timespec *abstime);\n\n返回值: 若成功，返回0；否则，返回错误编码\n```\n执行过程如下：\n1. 调用者把锁住的互斥量传给函数，然后函数自动把调用线程放到等待条件的线程列表上\n2. 对互斥量进行解锁，线程挂起进入等待(不占用`CPU`时间)　\n3. 函数被唤醒返回时，会自动对互斥量进行加锁\n\n> `pthread_cond_timedwait`只是多了一个等待超时时间，通过`timespec`指定，超时返回错误`ETIMEDOUT`\n\n### 线程唤醒\n```\n#include <pthread.h>\n\nint pthread_cond_signal(pthread_cond_t *cond);\n\nint pthread_cond_broadcast(pthread_cond_t *cond);\n\n返回值: 若成功，返回0；否则，返回错误编码\n```\n+ `pthread_cond_signal`至少能唤醒一个等待该条件的线程\n+ `pthread_cond_broadcast`则能唤醒等待该条件的所有线程\n> 需要注意的是，一定要在改变条件状态以后再给线程发信号\n\n## 示例\n示例代码可参考我的[github](https://github.com/AnSwErYWJ/DogFood/blob/24acbfdd45e80032c988ccd05e3b12f9cfe01849/C/thread/t_cond.c)，由于篇幅原因，不在此贴出\n\n## 一些思考\n### 条件变量实质是什么\n条件变量实质是利用线程间共享的全局变量进行同步的一种机制\n\n### 互斥量保护的是什么\n示例中的相关代码\n```\npthread_mutex_lock(&(test->mut));\n\nwhile (test->condition == 0)\n{\n  pthread_cond_wait(&(test->cond), &(test->mut));\n}\n    \npthread_mutex_unlock(&(test->mut));\n```\n互斥量是用来保护条件`test->condition`在读取时，它的值不被其它线程修改，如果条件成立，则此线程进入等待条件的线程队列，对互斥量进行解锁并开始等待\n\n### 为什么用while来判断条件\n如上面的代码所示，使用`while`对条件进行判断的原因如下：\n1. 若先解锁互斥量，再唤醒等待线程，则条件可能被其它线程更改，使得等待条件再次成立，需要继续等待\n2. `pthread_cond_wait`可能存在意外返回的情况，则此时条件并没有被更改，需要继续等待。\n> 造成意外返回的原因是`Linux`中带阻塞功能的系统调用都会在进程收到`signal`后返回\n\n### 先唤醒线程还是先解锁\n示例代码：\n1. 情况一：先唤醒\n```\npthread_mutex_lock(&(test->mut));\ntest->condition = 1\npthread_cond_signal(&(test->cond));\npthread_mutex_unlock(&(test->mut));\n```\n\n2. 情况二：先解锁\n```\npthread_mutex_lock(&(test->mut));\ntest->condition = 1\npthread_mutex_unlock(&(test->mut));\npthread_cond_signal(&(test->cond));\n```\n两种情况各有缺点：\n+ 情况一在唤醒等待线程后，再解锁，使得等待线程在被唤醒后试图对互斥量进行加锁时，互斥量还未解锁，则线程又进入睡眠，待互斥量解锁成功后，再次被唤醒并对互斥量加锁，这样就会发生两次上下文切换，影响性能\n+ 情况二在唤醒等待线程前先解锁，使得其它线程可能先于等待线程获取互斥量，并对条件进行更改，使得条件变量失去作用\n\n## Reference\n- [关于pthread_cond_wait使用while循环判断的理解](https://www.cnblogs.com/leijiangtao/p/4028338.html)\n- [Linux线程同步之条件变量pthread_cond_t](https://www.cnblogs.com/zhx831/p/3543633.html)\n- [APUE]()\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","source":"_posts/condition-variables-of-thread-synchronization.md","raw":"---\ntitle: 线程同步机制条件变量的使用与思考\nAntuor: AnSwEr(Weijie Yuan)\ntoc: true\ndate: 2017-12-15 22:23:08\ncategories: C/C++\ntags: pthread\n---\n条件变量是*Linux*线程同步的一种机制，与互斥量一起使用时，允许线程以无竞争的方式等待特定条件的发生\n\n------\n<!--more-->\n\n[TOC]\n\n## 关键函数\n### 初始化与注销\n```\n#include <pthread.h>\n\n// 静态初始化\npthread_cond_t cond = PTHREAD_COND_INITIALIZER;\n\n// 动态初始化\nint pthread_cond_init(thread_cond_t *cond, \n                      const pthread_condattr_t *attr);\n\n// 反初始化，即注销\nint pthread_cond_destroy(pthread_cond_t *cond);\n\n返回值: 若成功，返回0；否则，返回错误编码\n```\n注意：\n+ 只有在没有线程在该条件变量上等待时，才可以注销条件变量，否则会返回`EBUSY`\n+  `Linux`在实现条件变量时，并没有为条件变量分配资源，所以在注销一个条件变量时，只需要注意该变量是否仍有等待线程即可\n\n### 线程等待\n```\n#include <pthread.h>\n\nint pthread_cond_wait(pthread_cond_t *cond, \n                      pthread_mutex_t *mutex);\n\nint pthread_cond_timedwait(pthread_cond_t *cond, \n                           pthread_mutex_t *mutex, \n                           const struct timespec *abstime);\n\n返回值: 若成功，返回0；否则，返回错误编码\n```\n执行过程如下：\n1. 调用者把锁住的互斥量传给函数，然后函数自动把调用线程放到等待条件的线程列表上\n2. 对互斥量进行解锁，线程挂起进入等待(不占用`CPU`时间)　\n3. 函数被唤醒返回时，会自动对互斥量进行加锁\n\n> `pthread_cond_timedwait`只是多了一个等待超时时间，通过`timespec`指定，超时返回错误`ETIMEDOUT`\n\n### 线程唤醒\n```\n#include <pthread.h>\n\nint pthread_cond_signal(pthread_cond_t *cond);\n\nint pthread_cond_broadcast(pthread_cond_t *cond);\n\n返回值: 若成功，返回0；否则，返回错误编码\n```\n+ `pthread_cond_signal`至少能唤醒一个等待该条件的线程\n+ `pthread_cond_broadcast`则能唤醒等待该条件的所有线程\n> 需要注意的是，一定要在改变条件状态以后再给线程发信号\n\n## 示例\n示例代码可参考我的[github](https://github.com/AnSwErYWJ/DogFood/blob/24acbfdd45e80032c988ccd05e3b12f9cfe01849/C/thread/t_cond.c)，由于篇幅原因，不在此贴出\n\n## 一些思考\n### 条件变量实质是什么\n条件变量实质是利用线程间共享的全局变量进行同步的一种机制\n\n### 互斥量保护的是什么\n示例中的相关代码\n```\npthread_mutex_lock(&(test->mut));\n\nwhile (test->condition == 0)\n{\n  pthread_cond_wait(&(test->cond), &(test->mut));\n}\n    \npthread_mutex_unlock(&(test->mut));\n```\n互斥量是用来保护条件`test->condition`在读取时，它的值不被其它线程修改，如果条件成立，则此线程进入等待条件的线程队列，对互斥量进行解锁并开始等待\n\n### 为什么用while来判断条件\n如上面的代码所示，使用`while`对条件进行判断的原因如下：\n1. 若先解锁互斥量，再唤醒等待线程，则条件可能被其它线程更改，使得等待条件再次成立，需要继续等待\n2. `pthread_cond_wait`可能存在意外返回的情况，则此时条件并没有被更改，需要继续等待。\n> 造成意外返回的原因是`Linux`中带阻塞功能的系统调用都会在进程收到`signal`后返回\n\n### 先唤醒线程还是先解锁\n示例代码：\n1. 情况一：先唤醒\n```\npthread_mutex_lock(&(test->mut));\ntest->condition = 1\npthread_cond_signal(&(test->cond));\npthread_mutex_unlock(&(test->mut));\n```\n\n2. 情况二：先解锁\n```\npthread_mutex_lock(&(test->mut));\ntest->condition = 1\npthread_mutex_unlock(&(test->mut));\npthread_cond_signal(&(test->cond));\n```\n两种情况各有缺点：\n+ 情况一在唤醒等待线程后，再解锁，使得等待线程在被唤醒后试图对互斥量进行加锁时，互斥量还未解锁，则线程又进入睡眠，待互斥量解锁成功后，再次被唤醒并对互斥量加锁，这样就会发生两次上下文切换，影响性能\n+ 情况二在唤醒等待线程前先解锁，使得其它线程可能先于等待线程获取互斥量，并对条件进行更改，使得条件变量失去作用\n\n## Reference\n- [关于pthread_cond_wait使用while循环判断的理解](https://www.cnblogs.com/leijiangtao/p/4028338.html)\n- [Linux线程同步之条件变量pthread_cond_t](https://www.cnblogs.com/zhx831/p/3543633.html)\n- [APUE]()\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","slug":"condition-variables-of-thread-synchronization","published":1,"updated":"2020-07-21T01:40:07.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklumqgeh000j79n5054prscf","content":"<p>条件变量是<em>Linux</em>线程同步的一种机制，与互斥量一起使用时，允许线程以无竞争的方式等待特定条件的发生</p>\n<hr>\n<a id=\"more\"></a>\n<p>[TOC]</p>\n<h2 id=\"关键函数\"><a href=\"#关键函数\" class=\"headerlink\" title=\"关键函数\"></a>关键函数</h2><h3 id=\"初始化与注销\"><a href=\"#初始化与注销\" class=\"headerlink\" title=\"初始化与注销\"></a>初始化与注销</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_init</span><span class=\"params\">(<span class=\"keyword\">thread_cond_t</span> *cond, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"keyword\">const</span> <span class=\"keyword\">pthread_condattr_t</span> *attr)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 反初始化，即注销</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_destroy</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">返回值: 若成功，返回<span class=\"number\">0</span>；否则，返回错误编码</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>只有在没有线程在该条件变量上等待时，才可以注销条件变量，否则会返回<code>EBUSY</code></li>\n<li><code>Linux</code>在实现条件变量时，并没有为条件变量分配资源，所以在注销一个条件变量时，只需要注意该变量是否仍有等待线程即可</li>\n</ul>\n<h3 id=\"线程等待\"><a href=\"#线程等待\" class=\"headerlink\" title=\"线程等待\"></a>线程等待</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_wait</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_timedwait</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">pthread_mutex_t</span> *mutex, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">const</span> struct timespec *abstime)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">返回值: 若成功，返回<span class=\"number\">0</span>；否则，返回错误编码</span><br></pre></td></tr></table></figure>\n<p>执行过程如下：</p>\n<ol>\n<li>调用者把锁住的互斥量传给函数，然后函数自动把调用线程放到等待条件的线程列表上</li>\n<li>对互斥量进行解锁，线程挂起进入等待(不占用<code>CPU</code>时间)　</li>\n<li>函数被唤醒返回时，会自动对互斥量进行加锁</li>\n</ol>\n<blockquote>\n<p><code>pthread_cond_timedwait</code>只是多了一个等待超时时间，通过<code>timespec</code>指定，超时返回错误<code>ETIMEDOUT</code></p>\n</blockquote>\n<h3 id=\"线程唤醒\"><a href=\"#线程唤醒\" class=\"headerlink\" title=\"线程唤醒\"></a>线程唤醒</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_signal</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_broadcast</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">返回值: 若成功，返回<span class=\"number\">0</span>；否则，返回错误编码</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>pthread_cond_signal</code>至少能唤醒一个等待该条件的线程</li>\n<li><code>pthread_cond_broadcast</code>则能唤醒等待该条件的所有线程<blockquote>\n<p>需要注意的是，一定要在改变条件状态以后再给线程发信号</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>示例代码可参考我的<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/24acbfdd45e80032c988ccd05e3b12f9cfe01849/C/thread/t_cond.c\" target=\"_blank\" rel=\"noopener\">github</a>，由于篇幅原因，不在此贴出</p>\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><h3 id=\"条件变量实质是什么\"><a href=\"#条件变量实质是什么\" class=\"headerlink\" title=\"条件变量实质是什么\"></a>条件变量实质是什么</h3><p>条件变量实质是利用线程间共享的全局变量进行同步的一种机制</p>\n<h3 id=\"互斥量保护的是什么\"><a href=\"#互斥量保护的是什么\" class=\"headerlink\" title=\"互斥量保护的是什么\"></a>互斥量保护的是什么</h3><p>示例中的相关代码<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">pthread_mutex_lock</span>(&amp;(test-&gt;</span>mut));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">while</span> (test-&gt;</span>condition == <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">pthread_cond_wait</span>(&amp;(test-&gt;</span><span class=\"function\"><span class=\"title\">cond</span>), &amp;(test-&gt;</span>mut));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">pthread_mutex_unlock</span>(&amp;(test-&gt;</span>mut));</span><br></pre></td></tr></table></figure></p>\n<p>互斥量是用来保护条件<code>test-&gt;condition</code>在读取时，它的值不被其它线程修改，如果条件成立，则此线程进入等待条件的线程队列，对互斥量进行解锁并开始等待</p>\n<h3 id=\"为什么用while来判断条件\"><a href=\"#为什么用while来判断条件\" class=\"headerlink\" title=\"为什么用while来判断条件\"></a>为什么用while来判断条件</h3><p>如上面的代码所示，使用<code>while</code>对条件进行判断的原因如下：</p>\n<ol>\n<li>若先解锁互斥量，再唤醒等待线程，则条件可能被其它线程更改，使得等待条件再次成立，需要继续等待</li>\n<li><code>pthread_cond_wait</code>可能存在意外返回的情况，则此时条件并没有被更改，需要继续等待。<blockquote>\n<p>造成意外返回的原因是<code>Linux</code>中带阻塞功能的系统调用都会在进程收到<code>signal</code>后返回</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"先唤醒线程还是先解锁\"><a href=\"#先唤醒线程还是先解锁\" class=\"headerlink\" title=\"先唤醒线程还是先解锁\"></a>先唤醒线程还是先解锁</h3><p>示例代码：</p>\n<ol>\n<li><p>情况一：先唤醒</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pthread_mutex_lock(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;mut</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">test-&gt;condition = <span class=\"number\">1</span></span><br><span class=\"line\">pthread_cond_signal(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;cond</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">pthread_mutex_unlock(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;mut</span>))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况二：先解锁</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pthread_mutex_lock(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;mut</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">test-&gt;condition = <span class=\"number\">1</span></span><br><span class=\"line\">pthread_mutex_unlock(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;mut</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">pthread_cond_signal(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;cond</span>))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>两种情况各有缺点：</p>\n<ul>\n<li>情况一在唤醒等待线程后，再解锁，使得等待线程在被唤醒后试图对互斥量进行加锁时，互斥量还未解锁，则线程又进入睡眠，待互斥量解锁成功后，再次被唤醒并对互斥量加锁，这样就会发生两次上下文切换，影响性能</li>\n<li>情况二在唤醒等待线程前先解锁，使得其它线程可能先于等待线程获取互斥量，并对条件进行更改，使得条件变量失去作用</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.cnblogs.com/leijiangtao/p/4028338.html\" target=\"_blank\" rel=\"noopener\">关于pthread_cond_wait使用while循环判断的理解</a></li>\n<li><a href=\"https://www.cnblogs.com/zhx831/p/3543633.html\" target=\"_blank\" rel=\"noopener\">Linux线程同步之条件变量pthread_cond_t</a></li>\n<li><a href>APUE</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>条件变量是<em>Linux</em>线程同步的一种机制，与互斥量一起使用时，允许线程以无竞争的方式等待特定条件的发生</p>\n<hr>","more":"<p>[TOC]</p>\n<h2 id=\"关键函数\"><a href=\"#关键函数\" class=\"headerlink\" title=\"关键函数\"></a>关键函数</h2><h3 id=\"初始化与注销\"><a href=\"#初始化与注销\" class=\"headerlink\" title=\"初始化与注销\"></a>初始化与注销</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_init</span><span class=\"params\">(<span class=\"keyword\">thread_cond_t</span> *cond, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"keyword\">const</span> <span class=\"keyword\">pthread_condattr_t</span> *attr)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 反初始化，即注销</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_destroy</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">返回值: 若成功，返回<span class=\"number\">0</span>；否则，返回错误编码</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>只有在没有线程在该条件变量上等待时，才可以注销条件变量，否则会返回<code>EBUSY</code></li>\n<li><code>Linux</code>在实现条件变量时，并没有为条件变量分配资源，所以在注销一个条件变量时，只需要注意该变量是否仍有等待线程即可</li>\n</ul>\n<h3 id=\"线程等待\"><a href=\"#线程等待\" class=\"headerlink\" title=\"线程等待\"></a>线程等待</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_wait</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"keyword\">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_timedwait</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">pthread_mutex_t</span> *mutex, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">const</span> struct timespec *abstime)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">返回值: 若成功，返回<span class=\"number\">0</span>；否则，返回错误编码</span><br></pre></td></tr></table></figure>\n<p>执行过程如下：</p>\n<ol>\n<li>调用者把锁住的互斥量传给函数，然后函数自动把调用线程放到等待条件的线程列表上</li>\n<li>对互斥量进行解锁，线程挂起进入等待(不占用<code>CPU</code>时间)　</li>\n<li>函数被唤醒返回时，会自动对互斥量进行加锁</li>\n</ol>\n<blockquote>\n<p><code>pthread_cond_timedwait</code>只是多了一个等待超时时间，通过<code>timespec</code>指定，超时返回错误<code>ETIMEDOUT</code></p>\n</blockquote>\n<h3 id=\"线程唤醒\"><a href=\"#线程唤醒\" class=\"headerlink\" title=\"线程唤醒\"></a>线程唤醒</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_signal</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cond_broadcast</span><span class=\"params\">(<span class=\"keyword\">pthread_cond_t</span> *cond)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">返回值: 若成功，返回<span class=\"number\">0</span>；否则，返回错误编码</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>pthread_cond_signal</code>至少能唤醒一个等待该条件的线程</li>\n<li><code>pthread_cond_broadcast</code>则能唤醒等待该条件的所有线程<blockquote>\n<p>需要注意的是，一定要在改变条件状态以后再给线程发信号</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>示例代码可参考我的<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/24acbfdd45e80032c988ccd05e3b12f9cfe01849/C/thread/t_cond.c\" target=\"_blank\" rel=\"noopener\">github</a>，由于篇幅原因，不在此贴出</p>\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><h3 id=\"条件变量实质是什么\"><a href=\"#条件变量实质是什么\" class=\"headerlink\" title=\"条件变量实质是什么\"></a>条件变量实质是什么</h3><p>条件变量实质是利用线程间共享的全局变量进行同步的一种机制</p>\n<h3 id=\"互斥量保护的是什么\"><a href=\"#互斥量保护的是什么\" class=\"headerlink\" title=\"互斥量保护的是什么\"></a>互斥量保护的是什么</h3><p>示例中的相关代码<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">pthread_mutex_lock</span>(&amp;(test-&gt;</span>mut));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">while</span> (test-&gt;</span>condition == <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">pthread_cond_wait</span>(&amp;(test-&gt;</span><span class=\"function\"><span class=\"title\">cond</span>), &amp;(test-&gt;</span>mut));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">pthread_mutex_unlock</span>(&amp;(test-&gt;</span>mut));</span><br></pre></td></tr></table></figure></p>\n<p>互斥量是用来保护条件<code>test-&gt;condition</code>在读取时，它的值不被其它线程修改，如果条件成立，则此线程进入等待条件的线程队列，对互斥量进行解锁并开始等待</p>\n<h3 id=\"为什么用while来判断条件\"><a href=\"#为什么用while来判断条件\" class=\"headerlink\" title=\"为什么用while来判断条件\"></a>为什么用while来判断条件</h3><p>如上面的代码所示，使用<code>while</code>对条件进行判断的原因如下：</p>\n<ol>\n<li>若先解锁互斥量，再唤醒等待线程，则条件可能被其它线程更改，使得等待条件再次成立，需要继续等待</li>\n<li><code>pthread_cond_wait</code>可能存在意外返回的情况，则此时条件并没有被更改，需要继续等待。<blockquote>\n<p>造成意外返回的原因是<code>Linux</code>中带阻塞功能的系统调用都会在进程收到<code>signal</code>后返回</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"先唤醒线程还是先解锁\"><a href=\"#先唤醒线程还是先解锁\" class=\"headerlink\" title=\"先唤醒线程还是先解锁\"></a>先唤醒线程还是先解锁</h3><p>示例代码：</p>\n<ol>\n<li><p>情况一：先唤醒</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pthread_mutex_lock(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;mut</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">test-&gt;condition = <span class=\"number\">1</span></span><br><span class=\"line\">pthread_cond_signal(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;cond</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">pthread_mutex_unlock(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;mut</span>))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况二：先解锁</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pthread_mutex_lock(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;mut</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">test-&gt;condition = <span class=\"number\">1</span></span><br><span class=\"line\">pthread_mutex_unlock(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;mut</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">pthread_cond_signal(<span class=\"name\">&amp;</span>(<span class=\"name\">test-&gt;cond</span>))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>两种情况各有缺点：</p>\n<ul>\n<li>情况一在唤醒等待线程后，再解锁，使得等待线程在被唤醒后试图对互斥量进行加锁时，互斥量还未解锁，则线程又进入睡眠，待互斥量解锁成功后，再次被唤醒并对互斥量加锁，这样就会发生两次上下文切换，影响性能</li>\n<li>情况二在唤醒等待线程前先解锁，使得其它线程可能先于等待线程获取互斥量，并对条件进行更改，使得条件变量失去作用</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.cnblogs.com/leijiangtao/p/4028338.html\" target=\"_blank\" rel=\"noopener\">关于pthread_cond_wait使用while循环判断的理解</a></li>\n<li><a href=\"https://www.cnblogs.com/zhx831/p/3543633.html\" target=\"_blank\" rel=\"noopener\">Linux线程同步之条件变量pthread_cond_t</a></li>\n<li><a href>APUE</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Shell脚本清空文件的几种方法","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-09-05T03:35:14.000Z","_content":"\n本文将介绍几种在Linux下清空文件的方法。\n\n----------\n<!--more-->\n\n## Plan A\n代码 :\n```\n\t#!/bin/bash\n\techo \"\" > $1\n\techo \"$1 is cleaned up.\"\n```\n运行结果 :\n```\n$ cat test.txt\n1\n2\n3\n4\n5\n$ ./plana.sh test.txt\ntest.txt cleaned up.\n$ cat test.txt\n\n\n```\n\n>使用这个方法文件其实并没有真正被清空，而是有一个空行。\n\n## Plan B\n代码 :\n```\n\t#!/bin/bash\n\t: > $1\n\techo \"$1 is cleaned up.\"\n```\n\n运行结果 :\n```\n$ cat test.txt\n1\n2\n3\n4\n5\n$ ./planb.sh test.txt\ntest.txt is cleaned up.\n$ cat test.txt\n\n\n```\n\n> ``：``是一个空命令，起到占位符的作用。这里被清空的文件不再有空行，实现真正意义的清空。\n\n## Plan C\n代码 :\n```\n\t#!/bin/bash\n\tcat /dev/null > $1\n\techo \"$1 is cleaned up.\"\n```\n运行结果 :\n```\n$ cat test.txt\n1\n2\n3\n4\n5\n$ ./planc.sh test.txt\ntest.txt is cleaned up.\n$ cat test.txt\n\n```\n\n> ``/dev/null``可以看作一个\"黑洞\"。所有写入它的内容都会丢失。从它那儿读取也什么都读不到。这里被清空的文件同样不再有空行，实现真正意义的清空。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/empty-file-in-shell.md","raw":"---\ntitle: Shell脚本清空文件的几种方法\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - script\ndate: 2016-09-05 11:35:14\ncategories: Shell脚本\n---\n\n本文将介绍几种在Linux下清空文件的方法。\n\n----------\n<!--more-->\n\n## Plan A\n代码 :\n```\n\t#!/bin/bash\n\techo \"\" > $1\n\techo \"$1 is cleaned up.\"\n```\n运行结果 :\n```\n$ cat test.txt\n1\n2\n3\n4\n5\n$ ./plana.sh test.txt\ntest.txt cleaned up.\n$ cat test.txt\n\n\n```\n\n>使用这个方法文件其实并没有真正被清空，而是有一个空行。\n\n## Plan B\n代码 :\n```\n\t#!/bin/bash\n\t: > $1\n\techo \"$1 is cleaned up.\"\n```\n\n运行结果 :\n```\n$ cat test.txt\n1\n2\n3\n4\n5\n$ ./planb.sh test.txt\ntest.txt is cleaned up.\n$ cat test.txt\n\n\n```\n\n> ``：``是一个空命令，起到占位符的作用。这里被清空的文件不再有空行，实现真正意义的清空。\n\n## Plan C\n代码 :\n```\n\t#!/bin/bash\n\tcat /dev/null > $1\n\techo \"$1 is cleaned up.\"\n```\n运行结果 :\n```\n$ cat test.txt\n1\n2\n3\n4\n5\n$ ./planc.sh test.txt\ntest.txt is cleaned up.\n$ cat test.txt\n\n```\n\n> ``/dev/null``可以看作一个\"黑洞\"。所有写入它的内容都会丢失。从它那儿读取也什么都读不到。这里被清空的文件同样不再有空行，实现真正意义的清空。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"empty-file-in-shell","published":1,"updated":"2020-07-21T01:40:07.137Z","layout":"post","photos":[],"link":"","_id":"cklumqgej000n79n5wti3vw3c","content":"<p>本文将介绍几种在Linux下清空文件的方法。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Plan-A\"><a href=\"#Plan-A\" class=\"headerlink\" title=\"Plan A\"></a>Plan A</h2><p>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span> &gt; <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is cleaned up.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.txt</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">$ ./plana<span class=\"selector-class\">.sh</span> test.txt</span><br><span class=\"line\">test<span class=\"selector-class\">.txt</span> cleaned up.</span><br><span class=\"line\">$ cat test.txt</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>使用这个方法文件其实并没有真正被清空，而是有一个空行。</p>\n</blockquote>\n<h2 id=\"Plan-B\"><a href=\"#Plan-B\" class=\"headerlink\" title=\"Plan B\"></a>Plan B</h2><p>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">: &gt; <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is cleaned up.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.txt</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">$ ./planb<span class=\"selector-class\">.sh</span> test.txt</span><br><span class=\"line\">test<span class=\"selector-class\">.txt</span> is cleaned up.</span><br><span class=\"line\">$ cat test.txt</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>：</code>是一个空命令，起到占位符的作用。这里被清空的文件不再有空行，实现真正意义的清空。</p>\n</blockquote>\n<h2 id=\"Plan-C\"><a href=\"#Plan-C\" class=\"headerlink\" title=\"Plan C\"></a>Plan C</h2><p>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">cat /dev/null &gt; <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is cleaned up.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.txt</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">$ ./planc<span class=\"selector-class\">.sh</span> test.txt</span><br><span class=\"line\">test<span class=\"selector-class\">.txt</span> is cleaned up.</span><br><span class=\"line\">$ cat test.txt</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>/dev/null</code>可以看作一个”黑洞”。所有写入它的内容都会丢失。从它那儿读取也什么都读不到。这里被清空的文件同样不再有空行，实现真正意义的清空。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍几种在Linux下清空文件的方法。</p>\n<hr>","more":"<h2 id=\"Plan-A\"><a href=\"#Plan-A\" class=\"headerlink\" title=\"Plan A\"></a>Plan A</h2><p>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span> &gt; <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is cleaned up.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.txt</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">$ ./plana<span class=\"selector-class\">.sh</span> test.txt</span><br><span class=\"line\">test<span class=\"selector-class\">.txt</span> cleaned up.</span><br><span class=\"line\">$ cat test.txt</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>使用这个方法文件其实并没有真正被清空，而是有一个空行。</p>\n</blockquote>\n<h2 id=\"Plan-B\"><a href=\"#Plan-B\" class=\"headerlink\" title=\"Plan B\"></a>Plan B</h2><p>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">: &gt; <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is cleaned up.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.txt</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">$ ./planb<span class=\"selector-class\">.sh</span> test.txt</span><br><span class=\"line\">test<span class=\"selector-class\">.txt</span> is cleaned up.</span><br><span class=\"line\">$ cat test.txt</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>：</code>是一个空命令，起到占位符的作用。这里被清空的文件不再有空行，实现真正意义的清空。</p>\n</blockquote>\n<h2 id=\"Plan-C\"><a href=\"#Plan-C\" class=\"headerlink\" title=\"Plan C\"></a>Plan C</h2><p>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">cat /dev/null &gt; <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is cleaned up.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.txt</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">$ ./planc<span class=\"selector-class\">.sh</span> test.txt</span><br><span class=\"line\">test<span class=\"selector-class\">.txt</span> is cleaned up.</span><br><span class=\"line\">$ cat test.txt</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>/dev/null</code>可以看作一个”黑洞”。所有写入它的内容都会丢失。从它那儿读取也什么都读不到。这里被清空的文件同样不再有空行，实现真正意义的清空。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Shell脚本浮点运算","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-09-05T06:58:50.000Z","_content":"\n本文将介绍几种Linux下通过Shell脚本进行浮点数计算的方法。\n\n----------\n<!--more-->\n\n## Why\nBash Shell本身不具备处理浮点计算的能力, 如`expr`命令只支持整数运算 :\n```\n#!/bin/bash\na=59\nb=60\nexpr $a / $b\n```\n运行结果 :\n```\n$ ./cal.sh\n0\n```\n\n## Plan A\n使用``bc``进行处理。\n代码 :\n```\n#!/bin/bash\n\na=59\nb=60\necho \"scale=4; $a / $b\" | bc\n```\n运行结果 :\n```\n$ ./bc.sh\n.9833\n```\n> ``scale``表示结果的小数精度。\n\n## Plan B\n使用``awk``进行处理。\n代码 :\n```\n#!/bin/bash\na=59\nb=60\nawk 'BEGIN{printf \"%.2f\\n\",('$a'/'$b')}'\n```\n\n运行结果 :\n```\n$ ./awk.sh\n0.98\n```\n\n\n## Compare\n\n使用bc :\n![bc](bc.png)\n\n使用awk :\n![awk](awk.png)\n\n> 可以看出使用``awk``的效率更高,特别是运算次数比较大时。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/floating-point-operation-in-script.md","raw":"---\ntitle: Shell脚本浮点运算\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - script\ndate: 2016-09-05 14:58:50\ncategories: Shell脚本\n---\n\n本文将介绍几种Linux下通过Shell脚本进行浮点数计算的方法。\n\n----------\n<!--more-->\n\n## Why\nBash Shell本身不具备处理浮点计算的能力, 如`expr`命令只支持整数运算 :\n```\n#!/bin/bash\na=59\nb=60\nexpr $a / $b\n```\n运行结果 :\n```\n$ ./cal.sh\n0\n```\n\n## Plan A\n使用``bc``进行处理。\n代码 :\n```\n#!/bin/bash\n\na=59\nb=60\necho \"scale=4; $a / $b\" | bc\n```\n运行结果 :\n```\n$ ./bc.sh\n.9833\n```\n> ``scale``表示结果的小数精度。\n\n## Plan B\n使用``awk``进行处理。\n代码 :\n```\n#!/bin/bash\na=59\nb=60\nawk 'BEGIN{printf \"%.2f\\n\",('$a'/'$b')}'\n```\n\n运行结果 :\n```\n$ ./awk.sh\n0.98\n```\n\n\n## Compare\n\n使用bc :\n![bc](bc.png)\n\n使用awk :\n![awk](awk.png)\n\n> 可以看出使用``awk``的效率更高,特别是运算次数比较大时。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"floating-point-operation-in-script","published":1,"updated":"2020-07-21T01:40:07.137Z","layout":"post","photos":[],"link":"","_id":"cklumqgek000q79n5vvgavokf","content":"<p>本文将介绍几种Linux下通过Shell脚本进行浮点数计算的方法。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>Bash Shell本身不具备处理浮点计算的能力, 如<code>expr</code>命令只支持整数运算 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=59</span><br><span class=\"line\">b=60</span><br><span class=\"line\">expr <span class=\"variable\">$a</span> / <span class=\"variable\">$b</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./cal.sh</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Plan-A\"><a href=\"#Plan-A\" class=\"headerlink\" title=\"Plan A\"></a>Plan A</h2><p>使用<code>bc</code>进行处理。<br>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">a=59</span><br><span class=\"line\">b=60</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"scale=4; <span class=\"variable\">$a</span> / <span class=\"variable\">$b</span>\"</span> | bc</span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">./bc.sh</span></span><br><span class=\"line\"><span class=\"string\">.9833</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>scale</code>表示结果的小数精度。</p>\n</blockquote>\n<h2 id=\"Plan-B\"><a href=\"#Plan-B\" class=\"headerlink\" title=\"Plan B\"></a>Plan B</h2><p>使用<code>awk</code>进行处理。<br>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=59</span><br><span class=\"line\">b=60</span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;printf \"%.2f\\n\",('</span><span class=\"variable\">$a</span><span class=\"string\">'/'</span><span class=\"variable\">$b</span><span class=\"string\">')&#125;'</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./awk.sh</span><br><span class=\"line\"><span class=\"number\">0.98</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Compare\"><a href=\"#Compare\" class=\"headerlink\" title=\"Compare\"></a>Compare</h2><p>使用bc :<br><img src=\"/2016/09/05/floating-point-operation-in-script/bc.png\" alt=\"bc\"></p>\n<p>使用awk :<br><img src=\"/2016/09/05/floating-point-operation-in-script/awk.png\" alt=\"awk\"></p>\n<blockquote>\n<p>可以看出使用<code>awk</code>的效率更高,特别是运算次数比较大时。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍几种Linux下通过Shell脚本进行浮点数计算的方法。</p>\n<hr>","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>Bash Shell本身不具备处理浮点计算的能力, 如<code>expr</code>命令只支持整数运算 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=59</span><br><span class=\"line\">b=60</span><br><span class=\"line\">expr <span class=\"variable\">$a</span> / <span class=\"variable\">$b</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./cal.sh</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Plan-A\"><a href=\"#Plan-A\" class=\"headerlink\" title=\"Plan A\"></a>Plan A</h2><p>使用<code>bc</code>进行处理。<br>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">a=59</span><br><span class=\"line\">b=60</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"scale=4; <span class=\"variable\">$a</span> / <span class=\"variable\">$b</span>\"</span> | bc</span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">./bc.sh</span></span><br><span class=\"line\"><span class=\"string\">.9833</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>scale</code>表示结果的小数精度。</p>\n</blockquote>\n<h2 id=\"Plan-B\"><a href=\"#Plan-B\" class=\"headerlink\" title=\"Plan B\"></a>Plan B</h2><p>使用<code>awk</code>进行处理。<br>代码 :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=59</span><br><span class=\"line\">b=60</span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;printf \"%.2f\\n\",('</span><span class=\"variable\">$a</span><span class=\"string\">'/'</span><span class=\"variable\">$b</span><span class=\"string\">')&#125;'</span></span><br></pre></td></tr></table></figure></p>\n<p>运行结果 :<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./awk.sh</span><br><span class=\"line\"><span class=\"number\">0.98</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Compare\"><a href=\"#Compare\" class=\"headerlink\" title=\"Compare\"></a>Compare</h2><p>使用bc :<br><img src=\"/2016/09/05/floating-point-operation-in-script/bc.png\" alt=\"bc\"></p>\n<p>使用awk :<br><img src=\"/2016/09/05/floating-point-operation-in-script/awk.png\" alt=\"awk\"></p>\n<blockquote>\n<p>可以看出使用<code>awk</code>的效率更高,特别是运算次数比较大时。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"C代码覆盖率测试工具Gcov","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2018-09-25T10:48:49.000Z","_content":"\n代码覆盖率测试反映了测试的广度与深度，量化了测试和开发质量，是十分有必要的，业界目前有针对各种语言的覆盖率测试工具，本文主要介绍`C/C++`相关的覆盖率测试工具`Gcov`\n<!--more-->\n\n## 介绍\n### 简介\n`Gcov`是一个测试覆盖程序，是集成在`GCC`中的，随`GCC`一起发布\n\n### 基本概念\n#### 基本块BB\n基本块指一段程序的第一条语句被执行过一次后，这段程序中的每一跳语句都需要执行一次，称为基本块，因此基本块中的所有语句的执行次数是相同的，一般由多个顺序执行语句后边跟一个跳转语句组成\n\n#### 跳转ARC\n从一个`BB`到另外一个`BB`的跳转叫做一个`ARC`,要想知道程序中的每个语句和分支的执行次数，就必须知道每个`BB`和`ARC`的执行次数\n\n#### 程序流图\n如果把`BB`作为一个节点，这样一个函数中的所有`BB`就构成了一个有向图，要想知道程序中的每个语句和分支的执行次数，就必须知道每个`BB`和`ARC`的执行次数，根据图论可以知道有向图中`BB`的入度和出度是相同的，所以只要知道了部分的`BB`或者`ARC`大小，就可以推断所有的大小，这里选择由`ARC`的执行次数来推断`BB`的执行次数，所以对部分`ARC`插桩，只要满足可以统计出来所有的`BB`和`ARC`的执行次数即可\n\n### 原理\n测试程序首先进行编译预处理，生成汇编文件，并完成插桩，插桩的过程中会向源文件的末尾插入一个静态数组，数组的大小就是这个源文件中桩点的个数，数组的值就是桩点的执行次数，每个桩点插入3~4条汇编语句，直接插入生成的`*.s`文件中，最后汇编文件经过汇编生成目标文件，在程序运行过程中桩点负责收集程序的执行信息\n\n## 使用\n### 编译\n测试代码如下：  \n`say.c`:\n```\n#include <stdio.h>\n\nint say(char *what) {\n    printf(\"------ %s\\n\", what);\n    return 0;\n}\n```\n`main.c`\n```\n#include <stdio.h>\n\nextern int say(const char *);\n\nint main(int argc, const char *argv[]) {\n    \n    if (argv[1]) {\n        say(\"hello\");\n    } else {\n        say(\"bye\");\n    }\n    return 0;\n}\n\n```\n\n添加`-fprofile-arcs -ftest-coverage -fPIC`编译参数编译程序，生成可执行程序和`*.gcno`文件，里面记录了行信息和程序流图信息：\n```\n$ gcc -fprofile-arcs -ftest-coverage -fPIC -O0 say.c main.c\n\n$ ls\na.out  main.c  main.gcno  say.c  say.gcno  \n```\n\n### 数据收集\n运行可执行文件，生成`*.gcda`在默认生成在相应`*.o`文件目录，里面记录了`*.c`文件中程序的执行情况，包括跳变次数等:\n```\n$ ./a.out\n------ bye\n\n$ ls\na.out  main.c  main.gcda  main.gcno  say.c  say.gcda  say.gcno\n```\n可以通过设置环境变量`GCOV_PREFIX=/xxx/xxx`和`GCOV_PREFIX_STRIP=x`来改变路径，其中`GCOV_PREFIX_STRIP`表示去掉源代码路径中的前几级，默认为`0`，比如源代码路径为`/a/b/c/d.c`，`GCOV_PREFIX_STRIP=2`，则实际使用的路径是`c/d.c`，如果`GCOV_PREFIX=/e/f`，则`.gcda`实际存放的路径是`/e/f/c/d.gcda`\n\n### 报告生成\n针对某一个文件的执行情况，可以通过如下命令生成报告，并创建`*.gcov`文件：\n```\n$ gcov -a main.c\nFile 'main.c'\nLines executed:80.00% of 5\nCreating 'main.c.gcov'\n```\n常用选项，更多可参考[Invoking gcov](https://gcc.gnu.org/onlinedocs/gcc/Invoking-Gcov.html#Invoking-Gcov)：\n```\n-b：分支覆盖\n-a：所有基本块覆盖\n-f：函数覆盖\n```\n\n### 注意事项\n1. 在编译时不要加优化选项，否则代码会发生变化，无法准确定位\n2. 代码中复杂的宏，比如宏展开后是循环或者其他控制结构，可以用内联函数来代替，因为`gcov`只统计宏调用出现的那一行\n3. 代码每一行最好只有一条语句\n4. `*.gcno`与`*.gcda`需要匹配，两个文件是有时间戳来记录是不是匹配的\n5. 若是编译动态库，需要在链接时`-lgcov`\n\n\n### 图形化展示\n`gcov`生成的报告分散在各个源码文件所对应的`*.gcov`文件中，难以汇总分析，并且可视化效果较差，所以需要转化成可视图形化报告，有`lcov`或`gcovr`两个工具可以完成，两者功能基本相同，本文主要介绍`gcovr`，是一个用`Python`编写的开源软件，大小只有几十KB，安装参见[官网](https://gcovr.com/installation.html)\n\n#### 列表形式\n1. 代码覆盖率\n```\n$ gcovr -r .\n------------------------------------------------------------------------------\n                           GCC Code Coverage Report\nDirectory: .\n------------------------------------------------------------------------------\nFile                                       Lines    Exec  Cover   Missing\n------------------------------------------------------------------------------\nmain.c                                         5       4    80%   15\nsay.c                                          3       3   100%   \n------------------------------------------------------------------------------\nTOTAL                                          8       7    87%\n------------------------------------------------------------------------------\n```\n报告展示程序运行后覆盖了`80%`的代码\n\n2. 分支覆盖率\n```\n$ gcovr -b -r .\n------------------------------------------------------------------------------\n                           GCC Code Coverage Report\nDirectory: .\n------------------------------------------------------------------------------\nFile                                    Branches   Taken  Cover   Missing\n------------------------------------------------------------------------------\nmain.c                                         2       1    50%   14\nsay.c                                          0       0    --%   \n------------------------------------------------------------------------------\nTOTAL                                          2       1    50%\n------------------------------------------------------------------------------\n```\n报告展示了在`main.c`中有一个分支没有执行到\n\n#### XML文件形式\n```\n$ gcovr --xml-pretty -r .\n<?xml version=\"1.0\" ?>\n<!DOCTYPE coverage\n  SYSTEM 'http://cobertura.sourceforge.net/xml/coverage-04.dtd'>\n<coverage branch-rate=\"0.5\" branches-covered=\"1\" branches-valid=\"2\"\n complexity=\"0.0\" line-rate=\"0.875\" lines-covered=\"7\" lines-valid=\"8\"\n timestamp=\"1537930892\" version=\"gcovr 3.4\">\n <sources>\n  <source>.</source>\n </sources>\n <packages>\n  <package branch-rate=\"0.5\" complexity=\"0.0\" line-rate=\"0.875\" name=\"\">\n   <classes>\n    <class branch-rate=\"0.5\" complexity=\"0.0\" filename=\"main.c\"\n     line-rate=\"0.8\" name=\"main_c\">\n     <methods/>\n     <lines>\n      <line branch=\"false\" hits=\"1\" number=\"12\"/>\n      <line branch=\"true\" condition-coverage=\"50% (1/2)\" hits=\"1\" number=\"14\">\n       <conditions>\n        <condition coverage=\"50%\" number=\"0\" type=\"jump\"/>\n       </conditions>\n      </line>\n      <line branch=\"false\" hits=\"0\" number=\"15\"/>\n      <line branch=\"false\" hits=\"1\" number=\"17\"/>\n      <line branch=\"false\" hits=\"1\" number=\"19\"/>\n     </lines>\n    </class>\n    <class branch-rate=\"0.0\" complexity=\"0.0\" filename=\"say.c\" line-rate=\"1.0\"\n     name=\"say_c\">\n     <methods/>\n     <lines>\n      <line branch=\"false\" hits=\"1\" number=\"10\"/>\n      <line branch=\"false\" hits=\"1\" number=\"11\"/>\n      <line branch=\"false\" hits=\"1\" number=\"12\"/>\n     </lines>\n    </class>\n   </classes>\n  </package>\n </packages>\n</coverage>\n```\n\n#### HTML文件形式\n```\n$ gcovr -r . --html -o xxx.html\n$ ls\na.out  main.c  main.gcda  main.gcno  say.c  say.gcda  say.gcno  xxx.html\n```\n可以发现添加`--html`参数后，可以生成`html`文件，用浏览器打开，如下图：\n![gcovr_xxx.png](gcovr_xxx.png)\n\n还可以添加`--html-details`选项，为每个代码文件单独生成`html`\n```\n$ gcovr -r . --html --html-details -o xxx.html\n$ ls\na.out  main.c  main.gcda  main.gcno  say.c  say.gcda  say.gcno  xxx.html  xxx.main.c.html  xxx.say.c.html\n```\n可以发现多了`xxx.main.c.html`和`xxx.say.c.html`，用浏览器打开`xxx.html`，如下图：\n![gcovr_xxx_detail.png](gcovr_xxx_detail.png)\n文件名较之前带上了下划线，单击文件名，可以看到具体的代码覆盖情况，如下图：\n![gcovr_xxx_main.png](gcovr_xxx_main.png)\n\n#### 其它\n其它功能，如`Filters`等，可以参考[官方文档](https://gcovr.com/guide.html)\n\n## Reference\n- [gcov—a Test Coverage Program](https://gcc.gnu.org/onlinedocs/gcc/Gcov.html#Gcov)\n- [关于C++ code coverage tool 的研究 —GCOV 实现原理](https://blog.csdn.net/bryanlai0720/article/details/38729535)\n- [gcovr官网](https://gcovr.com/installation.html)\n\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/coverage-of-code.md","raw":"---\ntitle: C代码覆盖率测试工具Gcov\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags: 代码覆盖率\ndate: 2018-09-25 18:48:49\ncategories: C/C++\n---\n\n代码覆盖率测试反映了测试的广度与深度，量化了测试和开发质量，是十分有必要的，业界目前有针对各种语言的覆盖率测试工具，本文主要介绍`C/C++`相关的覆盖率测试工具`Gcov`\n<!--more-->\n\n## 介绍\n### 简介\n`Gcov`是一个测试覆盖程序，是集成在`GCC`中的，随`GCC`一起发布\n\n### 基本概念\n#### 基本块BB\n基本块指一段程序的第一条语句被执行过一次后，这段程序中的每一跳语句都需要执行一次，称为基本块，因此基本块中的所有语句的执行次数是相同的，一般由多个顺序执行语句后边跟一个跳转语句组成\n\n#### 跳转ARC\n从一个`BB`到另外一个`BB`的跳转叫做一个`ARC`,要想知道程序中的每个语句和分支的执行次数，就必须知道每个`BB`和`ARC`的执行次数\n\n#### 程序流图\n如果把`BB`作为一个节点，这样一个函数中的所有`BB`就构成了一个有向图，要想知道程序中的每个语句和分支的执行次数，就必须知道每个`BB`和`ARC`的执行次数，根据图论可以知道有向图中`BB`的入度和出度是相同的，所以只要知道了部分的`BB`或者`ARC`大小，就可以推断所有的大小，这里选择由`ARC`的执行次数来推断`BB`的执行次数，所以对部分`ARC`插桩，只要满足可以统计出来所有的`BB`和`ARC`的执行次数即可\n\n### 原理\n测试程序首先进行编译预处理，生成汇编文件，并完成插桩，插桩的过程中会向源文件的末尾插入一个静态数组，数组的大小就是这个源文件中桩点的个数，数组的值就是桩点的执行次数，每个桩点插入3~4条汇编语句，直接插入生成的`*.s`文件中，最后汇编文件经过汇编生成目标文件，在程序运行过程中桩点负责收集程序的执行信息\n\n## 使用\n### 编译\n测试代码如下：  \n`say.c`:\n```\n#include <stdio.h>\n\nint say(char *what) {\n    printf(\"------ %s\\n\", what);\n    return 0;\n}\n```\n`main.c`\n```\n#include <stdio.h>\n\nextern int say(const char *);\n\nint main(int argc, const char *argv[]) {\n    \n    if (argv[1]) {\n        say(\"hello\");\n    } else {\n        say(\"bye\");\n    }\n    return 0;\n}\n\n```\n\n添加`-fprofile-arcs -ftest-coverage -fPIC`编译参数编译程序，生成可执行程序和`*.gcno`文件，里面记录了行信息和程序流图信息：\n```\n$ gcc -fprofile-arcs -ftest-coverage -fPIC -O0 say.c main.c\n\n$ ls\na.out  main.c  main.gcno  say.c  say.gcno  \n```\n\n### 数据收集\n运行可执行文件，生成`*.gcda`在默认生成在相应`*.o`文件目录，里面记录了`*.c`文件中程序的执行情况，包括跳变次数等:\n```\n$ ./a.out\n------ bye\n\n$ ls\na.out  main.c  main.gcda  main.gcno  say.c  say.gcda  say.gcno\n```\n可以通过设置环境变量`GCOV_PREFIX=/xxx/xxx`和`GCOV_PREFIX_STRIP=x`来改变路径，其中`GCOV_PREFIX_STRIP`表示去掉源代码路径中的前几级，默认为`0`，比如源代码路径为`/a/b/c/d.c`，`GCOV_PREFIX_STRIP=2`，则实际使用的路径是`c/d.c`，如果`GCOV_PREFIX=/e/f`，则`.gcda`实际存放的路径是`/e/f/c/d.gcda`\n\n### 报告生成\n针对某一个文件的执行情况，可以通过如下命令生成报告，并创建`*.gcov`文件：\n```\n$ gcov -a main.c\nFile 'main.c'\nLines executed:80.00% of 5\nCreating 'main.c.gcov'\n```\n常用选项，更多可参考[Invoking gcov](https://gcc.gnu.org/onlinedocs/gcc/Invoking-Gcov.html#Invoking-Gcov)：\n```\n-b：分支覆盖\n-a：所有基本块覆盖\n-f：函数覆盖\n```\n\n### 注意事项\n1. 在编译时不要加优化选项，否则代码会发生变化，无法准确定位\n2. 代码中复杂的宏，比如宏展开后是循环或者其他控制结构，可以用内联函数来代替，因为`gcov`只统计宏调用出现的那一行\n3. 代码每一行最好只有一条语句\n4. `*.gcno`与`*.gcda`需要匹配，两个文件是有时间戳来记录是不是匹配的\n5. 若是编译动态库，需要在链接时`-lgcov`\n\n\n### 图形化展示\n`gcov`生成的报告分散在各个源码文件所对应的`*.gcov`文件中，难以汇总分析，并且可视化效果较差，所以需要转化成可视图形化报告，有`lcov`或`gcovr`两个工具可以完成，两者功能基本相同，本文主要介绍`gcovr`，是一个用`Python`编写的开源软件，大小只有几十KB，安装参见[官网](https://gcovr.com/installation.html)\n\n#### 列表形式\n1. 代码覆盖率\n```\n$ gcovr -r .\n------------------------------------------------------------------------------\n                           GCC Code Coverage Report\nDirectory: .\n------------------------------------------------------------------------------\nFile                                       Lines    Exec  Cover   Missing\n------------------------------------------------------------------------------\nmain.c                                         5       4    80%   15\nsay.c                                          3       3   100%   \n------------------------------------------------------------------------------\nTOTAL                                          8       7    87%\n------------------------------------------------------------------------------\n```\n报告展示程序运行后覆盖了`80%`的代码\n\n2. 分支覆盖率\n```\n$ gcovr -b -r .\n------------------------------------------------------------------------------\n                           GCC Code Coverage Report\nDirectory: .\n------------------------------------------------------------------------------\nFile                                    Branches   Taken  Cover   Missing\n------------------------------------------------------------------------------\nmain.c                                         2       1    50%   14\nsay.c                                          0       0    --%   \n------------------------------------------------------------------------------\nTOTAL                                          2       1    50%\n------------------------------------------------------------------------------\n```\n报告展示了在`main.c`中有一个分支没有执行到\n\n#### XML文件形式\n```\n$ gcovr --xml-pretty -r .\n<?xml version=\"1.0\" ?>\n<!DOCTYPE coverage\n  SYSTEM 'http://cobertura.sourceforge.net/xml/coverage-04.dtd'>\n<coverage branch-rate=\"0.5\" branches-covered=\"1\" branches-valid=\"2\"\n complexity=\"0.0\" line-rate=\"0.875\" lines-covered=\"7\" lines-valid=\"8\"\n timestamp=\"1537930892\" version=\"gcovr 3.4\">\n <sources>\n  <source>.</source>\n </sources>\n <packages>\n  <package branch-rate=\"0.5\" complexity=\"0.0\" line-rate=\"0.875\" name=\"\">\n   <classes>\n    <class branch-rate=\"0.5\" complexity=\"0.0\" filename=\"main.c\"\n     line-rate=\"0.8\" name=\"main_c\">\n     <methods/>\n     <lines>\n      <line branch=\"false\" hits=\"1\" number=\"12\"/>\n      <line branch=\"true\" condition-coverage=\"50% (1/2)\" hits=\"1\" number=\"14\">\n       <conditions>\n        <condition coverage=\"50%\" number=\"0\" type=\"jump\"/>\n       </conditions>\n      </line>\n      <line branch=\"false\" hits=\"0\" number=\"15\"/>\n      <line branch=\"false\" hits=\"1\" number=\"17\"/>\n      <line branch=\"false\" hits=\"1\" number=\"19\"/>\n     </lines>\n    </class>\n    <class branch-rate=\"0.0\" complexity=\"0.0\" filename=\"say.c\" line-rate=\"1.0\"\n     name=\"say_c\">\n     <methods/>\n     <lines>\n      <line branch=\"false\" hits=\"1\" number=\"10\"/>\n      <line branch=\"false\" hits=\"1\" number=\"11\"/>\n      <line branch=\"false\" hits=\"1\" number=\"12\"/>\n     </lines>\n    </class>\n   </classes>\n  </package>\n </packages>\n</coverage>\n```\n\n#### HTML文件形式\n```\n$ gcovr -r . --html -o xxx.html\n$ ls\na.out  main.c  main.gcda  main.gcno  say.c  say.gcda  say.gcno  xxx.html\n```\n可以发现添加`--html`参数后，可以生成`html`文件，用浏览器打开，如下图：\n![gcovr_xxx.png](gcovr_xxx.png)\n\n还可以添加`--html-details`选项，为每个代码文件单独生成`html`\n```\n$ gcovr -r . --html --html-details -o xxx.html\n$ ls\na.out  main.c  main.gcda  main.gcno  say.c  say.gcda  say.gcno  xxx.html  xxx.main.c.html  xxx.say.c.html\n```\n可以发现多了`xxx.main.c.html`和`xxx.say.c.html`，用浏览器打开`xxx.html`，如下图：\n![gcovr_xxx_detail.png](gcovr_xxx_detail.png)\n文件名较之前带上了下划线，单击文件名，可以看到具体的代码覆盖情况，如下图：\n![gcovr_xxx_main.png](gcovr_xxx_main.png)\n\n#### 其它\n其它功能，如`Filters`等，可以参考[官方文档](https://gcovr.com/guide.html)\n\n## Reference\n- [gcov—a Test Coverage Program](https://gcc.gnu.org/onlinedocs/gcc/Gcov.html#Gcov)\n- [关于C++ code coverage tool 的研究 —GCOV 实现原理](https://blog.csdn.net/bryanlai0720/article/details/38729535)\n- [gcovr官网](https://gcovr.com/installation.html)\n\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"coverage-of-code","published":1,"updated":"2019-07-24T03:19:00.895Z","layout":"post","photos":[],"link":"","_id":"cklumqgel000v79n59q4j7yv4","content":"<p>代码覆盖率测试反映了测试的广度与深度，量化了测试和开发质量，是十分有必要的，业界目前有针对各种语言的覆盖率测试工具，本文主要介绍<code>C/C++</code>相关的覆盖率测试工具<code>Gcov</code><br><a id=\"more\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><code>Gcov</code>是一个测试覆盖程序，是集成在<code>GCC</code>中的，随<code>GCC</code>一起发布</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"基本块BB\"><a href=\"#基本块BB\" class=\"headerlink\" title=\"基本块BB\"></a>基本块BB</h4><p>基本块指一段程序的第一条语句被执行过一次后，这段程序中的每一跳语句都需要执行一次，称为基本块，因此基本块中的所有语句的执行次数是相同的，一般由多个顺序执行语句后边跟一个跳转语句组成</p>\n<h4 id=\"跳转ARC\"><a href=\"#跳转ARC\" class=\"headerlink\" title=\"跳转ARC\"></a>跳转ARC</h4><p>从一个<code>BB</code>到另外一个<code>BB</code>的跳转叫做一个<code>ARC</code>,要想知道程序中的每个语句和分支的执行次数，就必须知道每个<code>BB</code>和<code>ARC</code>的执行次数</p>\n<h4 id=\"程序流图\"><a href=\"#程序流图\" class=\"headerlink\" title=\"程序流图\"></a>程序流图</h4><p>如果把<code>BB</code>作为一个节点，这样一个函数中的所有<code>BB</code>就构成了一个有向图，要想知道程序中的每个语句和分支的执行次数，就必须知道每个<code>BB</code>和<code>ARC</code>的执行次数，根据图论可以知道有向图中<code>BB</code>的入度和出度是相同的，所以只要知道了部分的<code>BB</code>或者<code>ARC</code>大小，就可以推断所有的大小，这里选择由<code>ARC</code>的执行次数来推断<code>BB</code>的执行次数，所以对部分<code>ARC</code>插桩，只要满足可以统计出来所有的<code>BB</code>和<code>ARC</code>的执行次数即可</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>测试程序首先进行编译预处理，生成汇编文件，并完成插桩，插桩的过程中会向源文件的末尾插入一个静态数组，数组的大小就是这个源文件中桩点的个数，数组的值就是桩点的执行次数，每个桩点插入3~4条汇编语句，直接插入生成的<code>*.s</code>文件中，最后汇编文件经过汇编生成目标文件，在程序运行过程中桩点负责收集程序的执行信息</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>测试代码如下：<br><code>say.c</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"keyword\">char</span> *what)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"------ %s\\n\"</span>, what);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>main.c</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argv[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        say(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        say(<span class=\"string\">\"bye\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加<code>-fprofile-arcs -ftest-coverage -fPIC</code>编译参数编译程序，生成可执行程序和<code>*.gcno</code>文件，里面记录了行信息和程序流图信息：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -fprofile-arcs -ftest-coverage -fPIC -O0 say<span class=\"selector-class\">.c</span> main.c</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.out</span>  main<span class=\"selector-class\">.c</span>  main<span class=\"selector-class\">.gcno</span>  say<span class=\"selector-class\">.c</span>  say.gcno</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据收集\"><a href=\"#数据收集\" class=\"headerlink\" title=\"数据收集\"></a>数据收集</h3><p>运行可执行文件，生成<code>*.gcda</code>在默认生成在相应<code>*.o</code>文件目录，里面记录了<code>*.c</code>文件中程序的执行情况，包括跳变次数等:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./<span class=\"selector-tag\">a</span>.out</span><br><span class=\"line\">------ bye</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.out</span>  main<span class=\"selector-class\">.c</span>  main<span class=\"selector-class\">.gcda</span>  main<span class=\"selector-class\">.gcno</span>  say<span class=\"selector-class\">.c</span>  say<span class=\"selector-class\">.gcda</span>  say.gcno</span><br></pre></td></tr></table></figure></p>\n<p>可以通过设置环境变量<code>GCOV_PREFIX=/xxx/xxx</code>和<code>GCOV_PREFIX_STRIP=x</code>来改变路径，其中<code>GCOV_PREFIX_STRIP</code>表示去掉源代码路径中的前几级，默认为<code>0</code>，比如源代码路径为<code>/a/b/c/d.c</code>，<code>GCOV_PREFIX_STRIP=2</code>，则实际使用的路径是<code>c/d.c</code>，如果<code>GCOV_PREFIX=/e/f</code>，则<code>.gcda</code>实际存放的路径是<code>/e/f/c/d.gcda</code></p>\n<h3 id=\"报告生成\"><a href=\"#报告生成\" class=\"headerlink\" title=\"报告生成\"></a>报告生成</h3><p>针对某一个文件的执行情况，可以通过如下命令生成报告，并创建<code>*.gcov</code>文件：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcov -<span class=\"selector-tag\">a</span> main.c</span><br><span class=\"line\">File <span class=\"string\">'main.c'</span></span><br><span class=\"line\">Lines executed:<span class=\"number\">80.00%</span> of <span class=\"number\">5</span></span><br><span class=\"line\">Creating <span class=\"string\">'main.c.gcov'</span></span><br></pre></td></tr></table></figure></p>\n<p>常用选项，更多可参考<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Invoking-Gcov.html#Invoking-Gcov\" target=\"_blank\" rel=\"noopener\">Invoking gcov</a>：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-b：分支覆盖</span></span><br><span class=\"line\"><span class=\"deletion\">-a：所有基本块覆盖</span></span><br><span class=\"line\"><span class=\"deletion\">-f：函数覆盖</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>在编译时不要加优化选项，否则代码会发生变化，无法准确定位</li>\n<li>代码中复杂的宏，比如宏展开后是循环或者其他控制结构，可以用内联函数来代替，因为<code>gcov</code>只统计宏调用出现的那一行</li>\n<li>代码每一行最好只有一条语句</li>\n<li><code>*.gcno</code>与<code>*.gcda</code>需要匹配，两个文件是有时间戳来记录是不是匹配的</li>\n<li>若是编译动态库，需要在链接时<code>-lgcov</code></li>\n</ol>\n<h3 id=\"图形化展示\"><a href=\"#图形化展示\" class=\"headerlink\" title=\"图形化展示\"></a>图形化展示</h3><p><code>gcov</code>生成的报告分散在各个源码文件所对应的<code>*.gcov</code>文件中，难以汇总分析，并且可视化效果较差，所以需要转化成可视图形化报告，有<code>lcov</code>或<code>gcovr</code>两个工具可以完成，两者功能基本相同，本文主要介绍<code>gcovr</code>，是一个用<code>Python</code>编写的开源软件，大小只有几十KB，安装参见<a href=\"https://gcovr.com/installation.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<h4 id=\"列表形式\"><a href=\"#列表形式\" class=\"headerlink\" title=\"列表形式\"></a>列表形式</h4><ol>\n<li>代码覆盖率<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr -r .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"code\">                           GCC Code Coverage Report</span></span><br><span class=\"line\">Directory: .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">File                                       Lines    Exec  Cover   Missing</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">main.c                                         5       4    80%   15</span><br><span class=\"line\">say.c                                          3       3   100%   </span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">TOTAL                                          8       7    87%</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>报告展示程序运行后覆盖了<code>80%</code>的代码</p>\n<ol start=\"2\">\n<li>分支覆盖率<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr -b -r .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"code\">                           GCC Code Coverage Report</span></span><br><span class=\"line\">Directory: .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">File                                    Branches   Taken  Cover   Missing</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">main.c                                         2       1    50%   14</span><br><span class=\"line\">say.c                                          0       0    --%   </span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">TOTAL                                          2       1    50%</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>报告展示了在<code>main.c</code>中有一个分支没有执行到</p>\n<h4 id=\"XML文件形式\"><a href=\"#XML文件形式\" class=\"headerlink\" title=\"XML文件形式\"></a>XML文件形式</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr --xml-pretty -r .</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE coverage</span></span><br><span class=\"line\"><span class=\"meta\">  SYSTEM 'http://cobertura.sourceforge.net/xml/coverage-04.dtd'&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">coverage</span> <span class=\"attr\">branch-rate</span>=<span class=\"string\">\"0.5\"</span> <span class=\"attr\">branches-covered</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">branches-valid</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">complexity</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">line-rate</span>=<span class=\"string\">\"0.875\"</span> <span class=\"attr\">lines-covered</span>=<span class=\"string\">\"7\"</span> <span class=\"attr\">lines-valid</span>=<span class=\"string\">\"8\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">timestamp</span>=<span class=\"string\">\"1537930892\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"gcovr 3.4\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">sources</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">sources</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">packages</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">branch-rate</span>=<span class=\"string\">\"0.5\"</span> <span class=\"attr\">complexity</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">line-rate</span>=<span class=\"string\">\"0.875\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">classes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">branch-rate</span>=<span class=\"string\">\"0.5\"</span> <span class=\"attr\">complexity</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">filename</span>=<span class=\"string\">\"main.c\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">line-rate</span>=<span class=\"string\">\"0.8\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"main_c\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">methods</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">lines</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"12\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">condition-coverage</span>=<span class=\"string\">\"50% (1/2)\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"14\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">conditions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">condition</span> <span class=\"attr\">coverage</span>=<span class=\"string\">\"50%\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"jump\"</span>/&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">conditions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">line</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"15\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"17\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"19\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">lines</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">branch-rate</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">complexity</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">filename</span>=<span class=\"string\">\"say.c\"</span> <span class=\"attr\">line-rate</span>=<span class=\"string\">\"1.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">name</span>=<span class=\"string\">\"say_c\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">methods</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">lines</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"11\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"12\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">lines</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">classes</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">packages</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">coverage</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML文件形式\"><a href=\"#HTML文件形式\" class=\"headerlink\" title=\"HTML文件形式\"></a>HTML文件形式</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr -r . --<span class=\"selector-tag\">html</span> -o xxx.html</span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.out</span>  main<span class=\"selector-class\">.c</span>  main<span class=\"selector-class\">.gcda</span>  main<span class=\"selector-class\">.gcno</span>  say<span class=\"selector-class\">.c</span>  say<span class=\"selector-class\">.gcda</span>  say<span class=\"selector-class\">.gcno</span>  xxx.html</span><br></pre></td></tr></table></figure>\n<p>可以发现添加<code>--html</code>参数后，可以生成<code>html</code>文件，用浏览器打开，如下图：<br><img src=\"/2018/09/25/coverage-of-code/gcovr_xxx.png\" alt=\"gcovr_xxx.png\"></p>\n<p>还可以添加<code>--html-details</code>选项，为每个代码文件单独生成<code>html</code><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr -r . --<span class=\"selector-tag\">html</span> --html-<span class=\"selector-tag\">details</span> -o xxx.html</span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.out</span>  main<span class=\"selector-class\">.c</span>  main<span class=\"selector-class\">.gcda</span>  main<span class=\"selector-class\">.gcno</span>  say<span class=\"selector-class\">.c</span>  say<span class=\"selector-class\">.gcda</span>  say<span class=\"selector-class\">.gcno</span>  xxx<span class=\"selector-class\">.html</span>  xxx<span class=\"selector-class\">.main</span><span class=\"selector-class\">.c</span><span class=\"selector-class\">.html</span>  xxx<span class=\"selector-class\">.say</span><span class=\"selector-class\">.c</span><span class=\"selector-class\">.html</span></span><br></pre></td></tr></table></figure></p>\n<p>可以发现多了<code>xxx.main.c.html</code>和<code>xxx.say.c.html</code>，用浏览器打开<code>xxx.html</code>，如下图：<br><img src=\"/2018/09/25/coverage-of-code/gcovr_xxx_detail.png\" alt=\"gcovr_xxx_detail.png\"><br>文件名较之前带上了下划线，单击文件名，可以看到具体的代码覆盖情况，如下图：<br><img src=\"/2018/09/25/coverage-of-code/gcovr_xxx_main.png\" alt=\"gcovr_xxx_main.png\"></p>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><p>其它功能，如<code>Filters</code>等，可以参考<a href=\"https://gcovr.com/guide.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Gcov.html#Gcov\" target=\"_blank\" rel=\"noopener\">gcov—a Test Coverage Program</a></li>\n<li><a href=\"https://blog.csdn.net/bryanlai0720/article/details/38729535\" target=\"_blank\" rel=\"noopener\">关于C++ code coverage tool 的研究 —GCOV 实现原理</a></li>\n<li><a href=\"https://gcovr.com/installation.html\" target=\"_blank\" rel=\"noopener\">gcovr官网</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>代码覆盖率测试反映了测试的广度与深度，量化了测试和开发质量，是十分有必要的，业界目前有针对各种语言的覆盖率测试工具，本文主要介绍<code>C/C++</code>相关的覆盖率测试工具<code>Gcov</code><br></p>","more":"<p></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><code>Gcov</code>是一个测试覆盖程序，是集成在<code>GCC</code>中的，随<code>GCC</code>一起发布</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"基本块BB\"><a href=\"#基本块BB\" class=\"headerlink\" title=\"基本块BB\"></a>基本块BB</h4><p>基本块指一段程序的第一条语句被执行过一次后，这段程序中的每一跳语句都需要执行一次，称为基本块，因此基本块中的所有语句的执行次数是相同的，一般由多个顺序执行语句后边跟一个跳转语句组成</p>\n<h4 id=\"跳转ARC\"><a href=\"#跳转ARC\" class=\"headerlink\" title=\"跳转ARC\"></a>跳转ARC</h4><p>从一个<code>BB</code>到另外一个<code>BB</code>的跳转叫做一个<code>ARC</code>,要想知道程序中的每个语句和分支的执行次数，就必须知道每个<code>BB</code>和<code>ARC</code>的执行次数</p>\n<h4 id=\"程序流图\"><a href=\"#程序流图\" class=\"headerlink\" title=\"程序流图\"></a>程序流图</h4><p>如果把<code>BB</code>作为一个节点，这样一个函数中的所有<code>BB</code>就构成了一个有向图，要想知道程序中的每个语句和分支的执行次数，就必须知道每个<code>BB</code>和<code>ARC</code>的执行次数，根据图论可以知道有向图中<code>BB</code>的入度和出度是相同的，所以只要知道了部分的<code>BB</code>或者<code>ARC</code>大小，就可以推断所有的大小，这里选择由<code>ARC</code>的执行次数来推断<code>BB</code>的执行次数，所以对部分<code>ARC</code>插桩，只要满足可以统计出来所有的<code>BB</code>和<code>ARC</code>的执行次数即可</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>测试程序首先进行编译预处理，生成汇编文件，并完成插桩，插桩的过程中会向源文件的末尾插入一个静态数组，数组的大小就是这个源文件中桩点的个数，数组的值就是桩点的执行次数，每个桩点插入3~4条汇编语句，直接插入生成的<code>*.s</code>文件中，最后汇编文件经过汇编生成目标文件，在程序运行过程中桩点负责收集程序的执行信息</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>测试代码如下：<br><code>say.c</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"keyword\">char</span> *what)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"------ %s\\n\"</span>, what);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>main.c</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argv[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        say(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        say(<span class=\"string\">\"bye\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加<code>-fprofile-arcs -ftest-coverage -fPIC</code>编译参数编译程序，生成可执行程序和<code>*.gcno</code>文件，里面记录了行信息和程序流图信息：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -fprofile-arcs -ftest-coverage -fPIC -O0 say<span class=\"selector-class\">.c</span> main.c</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.out</span>  main<span class=\"selector-class\">.c</span>  main<span class=\"selector-class\">.gcno</span>  say<span class=\"selector-class\">.c</span>  say.gcno</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据收集\"><a href=\"#数据收集\" class=\"headerlink\" title=\"数据收集\"></a>数据收集</h3><p>运行可执行文件，生成<code>*.gcda</code>在默认生成在相应<code>*.o</code>文件目录，里面记录了<code>*.c</code>文件中程序的执行情况，包括跳变次数等:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./<span class=\"selector-tag\">a</span>.out</span><br><span class=\"line\">------ bye</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.out</span>  main<span class=\"selector-class\">.c</span>  main<span class=\"selector-class\">.gcda</span>  main<span class=\"selector-class\">.gcno</span>  say<span class=\"selector-class\">.c</span>  say<span class=\"selector-class\">.gcda</span>  say.gcno</span><br></pre></td></tr></table></figure></p>\n<p>可以通过设置环境变量<code>GCOV_PREFIX=/xxx/xxx</code>和<code>GCOV_PREFIX_STRIP=x</code>来改变路径，其中<code>GCOV_PREFIX_STRIP</code>表示去掉源代码路径中的前几级，默认为<code>0</code>，比如源代码路径为<code>/a/b/c/d.c</code>，<code>GCOV_PREFIX_STRIP=2</code>，则实际使用的路径是<code>c/d.c</code>，如果<code>GCOV_PREFIX=/e/f</code>，则<code>.gcda</code>实际存放的路径是<code>/e/f/c/d.gcda</code></p>\n<h3 id=\"报告生成\"><a href=\"#报告生成\" class=\"headerlink\" title=\"报告生成\"></a>报告生成</h3><p>针对某一个文件的执行情况，可以通过如下命令生成报告，并创建<code>*.gcov</code>文件：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcov -<span class=\"selector-tag\">a</span> main.c</span><br><span class=\"line\">File <span class=\"string\">'main.c'</span></span><br><span class=\"line\">Lines executed:<span class=\"number\">80.00%</span> of <span class=\"number\">5</span></span><br><span class=\"line\">Creating <span class=\"string\">'main.c.gcov'</span></span><br></pre></td></tr></table></figure></p>\n<p>常用选项，更多可参考<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Invoking-Gcov.html#Invoking-Gcov\" target=\"_blank\" rel=\"noopener\">Invoking gcov</a>：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-b：分支覆盖</span></span><br><span class=\"line\"><span class=\"deletion\">-a：所有基本块覆盖</span></span><br><span class=\"line\"><span class=\"deletion\">-f：函数覆盖</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>在编译时不要加优化选项，否则代码会发生变化，无法准确定位</li>\n<li>代码中复杂的宏，比如宏展开后是循环或者其他控制结构，可以用内联函数来代替，因为<code>gcov</code>只统计宏调用出现的那一行</li>\n<li>代码每一行最好只有一条语句</li>\n<li><code>*.gcno</code>与<code>*.gcda</code>需要匹配，两个文件是有时间戳来记录是不是匹配的</li>\n<li>若是编译动态库，需要在链接时<code>-lgcov</code></li>\n</ol>\n<h3 id=\"图形化展示\"><a href=\"#图形化展示\" class=\"headerlink\" title=\"图形化展示\"></a>图形化展示</h3><p><code>gcov</code>生成的报告分散在各个源码文件所对应的<code>*.gcov</code>文件中，难以汇总分析，并且可视化效果较差，所以需要转化成可视图形化报告，有<code>lcov</code>或<code>gcovr</code>两个工具可以完成，两者功能基本相同，本文主要介绍<code>gcovr</code>，是一个用<code>Python</code>编写的开源软件，大小只有几十KB，安装参见<a href=\"https://gcovr.com/installation.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<h4 id=\"列表形式\"><a href=\"#列表形式\" class=\"headerlink\" title=\"列表形式\"></a>列表形式</h4><ol>\n<li>代码覆盖率<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr -r .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"code\">                           GCC Code Coverage Report</span></span><br><span class=\"line\">Directory: .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">File                                       Lines    Exec  Cover   Missing</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">main.c                                         5       4    80%   15</span><br><span class=\"line\">say.c                                          3       3   100%   </span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">TOTAL                                          8       7    87%</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>报告展示程序运行后覆盖了<code>80%</code>的代码</p>\n<ol start=\"2\">\n<li>分支覆盖率<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr -b -r .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"code\">                           GCC Code Coverage Report</span></span><br><span class=\"line\">Directory: .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">File                                    Branches   Taken  Cover   Missing</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">main.c                                         2       1    50%   14</span><br><span class=\"line\">say.c                                          0       0    --%   </span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">TOTAL                                          2       1    50%</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>报告展示了在<code>main.c</code>中有一个分支没有执行到</p>\n<h4 id=\"XML文件形式\"><a href=\"#XML文件形式\" class=\"headerlink\" title=\"XML文件形式\"></a>XML文件形式</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr --xml-pretty -r .</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE coverage</span></span><br><span class=\"line\"><span class=\"meta\">  SYSTEM 'http://cobertura.sourceforge.net/xml/coverage-04.dtd'&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">coverage</span> <span class=\"attr\">branch-rate</span>=<span class=\"string\">\"0.5\"</span> <span class=\"attr\">branches-covered</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">branches-valid</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">complexity</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">line-rate</span>=<span class=\"string\">\"0.875\"</span> <span class=\"attr\">lines-covered</span>=<span class=\"string\">\"7\"</span> <span class=\"attr\">lines-valid</span>=<span class=\"string\">\"8\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">timestamp</span>=<span class=\"string\">\"1537930892\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"gcovr 3.4\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">sources</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">sources</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">packages</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">branch-rate</span>=<span class=\"string\">\"0.5\"</span> <span class=\"attr\">complexity</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">line-rate</span>=<span class=\"string\">\"0.875\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">classes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">branch-rate</span>=<span class=\"string\">\"0.5\"</span> <span class=\"attr\">complexity</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">filename</span>=<span class=\"string\">\"main.c\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">line-rate</span>=<span class=\"string\">\"0.8\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"main_c\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">methods</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">lines</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"12\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">condition-coverage</span>=<span class=\"string\">\"50% (1/2)\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"14\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">conditions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">condition</span> <span class=\"attr\">coverage</span>=<span class=\"string\">\"50%\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"jump\"</span>/&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">conditions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">line</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"15\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"17\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"19\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">lines</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">branch-rate</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">complexity</span>=<span class=\"string\">\"0.0\"</span> <span class=\"attr\">filename</span>=<span class=\"string\">\"say.c\"</span> <span class=\"attr\">line-rate</span>=<span class=\"string\">\"1.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">name</span>=<span class=\"string\">\"say_c\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">methods</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">lines</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"11\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">branch</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">hits</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">number</span>=<span class=\"string\">\"12\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">lines</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">classes</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">packages</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">coverage</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML文件形式\"><a href=\"#HTML文件形式\" class=\"headerlink\" title=\"HTML文件形式\"></a>HTML文件形式</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr -r . --<span class=\"selector-tag\">html</span> -o xxx.html</span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.out</span>  main<span class=\"selector-class\">.c</span>  main<span class=\"selector-class\">.gcda</span>  main<span class=\"selector-class\">.gcno</span>  say<span class=\"selector-class\">.c</span>  say<span class=\"selector-class\">.gcda</span>  say<span class=\"selector-class\">.gcno</span>  xxx.html</span><br></pre></td></tr></table></figure>\n<p>可以发现添加<code>--html</code>参数后，可以生成<code>html</code>文件，用浏览器打开，如下图：<br><img src=\"/2018/09/25/coverage-of-code/gcovr_xxx.png\" alt=\"gcovr_xxx.png\"></p>\n<p>还可以添加<code>--html-details</code>选项，为每个代码文件单独生成<code>html</code><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcovr -r . --<span class=\"selector-tag\">html</span> --html-<span class=\"selector-tag\">details</span> -o xxx.html</span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.out</span>  main<span class=\"selector-class\">.c</span>  main<span class=\"selector-class\">.gcda</span>  main<span class=\"selector-class\">.gcno</span>  say<span class=\"selector-class\">.c</span>  say<span class=\"selector-class\">.gcda</span>  say<span class=\"selector-class\">.gcno</span>  xxx<span class=\"selector-class\">.html</span>  xxx<span class=\"selector-class\">.main</span><span class=\"selector-class\">.c</span><span class=\"selector-class\">.html</span>  xxx<span class=\"selector-class\">.say</span><span class=\"selector-class\">.c</span><span class=\"selector-class\">.html</span></span><br></pre></td></tr></table></figure></p>\n<p>可以发现多了<code>xxx.main.c.html</code>和<code>xxx.say.c.html</code>，用浏览器打开<code>xxx.html</code>，如下图：<br><img src=\"/2018/09/25/coverage-of-code/gcovr_xxx_detail.png\" alt=\"gcovr_xxx_detail.png\"><br>文件名较之前带上了下划线，单击文件名，可以看到具体的代码覆盖情况，如下图：<br><img src=\"/2018/09/25/coverage-of-code/gcovr_xxx_main.png\" alt=\"gcovr_xxx_main.png\"></p>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><p>其它功能，如<code>Filters</code>等，可以参考<a href=\"https://gcovr.com/guide.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Gcov.html#Gcov\" target=\"_blank\" rel=\"noopener\">gcov—a Test Coverage Program</a></li>\n<li><a href=\"https://blog.csdn.net/bryanlai0720/article/details/38729535\" target=\"_blank\" rel=\"noopener\">关于C++ code coverage tool 的研究 —GCOV 实现原理</a></li>\n<li><a href=\"https://gcovr.com/installation.html\" target=\"_blank\" rel=\"noopener\">gcovr官网</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux fork炸弹解析","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T05:52:31.000Z","_content":"\n**:(){ :|: & };:**是一个bash函数，以Fork Bomb闻名，是一个拒绝服务攻击 的Linux 系统。如果你好奇地去执行了这个命令，那么赶快重启系统吧~！\n\n----------\n<!--more-->\n\n## 命令解析\n```\n:()\n{\n\t: | : &\n};:\n```\n1. **：**在这里是一个函数名，我们定义之，并在后面执行它。\n2. **：|：&**，：函数的输出通过管道传给另一个冒号函数作为输入，并且在后台执行。\n3. **{ };**标识着里面的内容是一个函数主体。\n4. 最后一个**：**为定义完成后的一次函数执行。\n\n## 原理解析\n1. 首先需要说明的是**:**是一个shell内置命令，所以上面这段代码只有在bash中才可能产生fork炸弹，因为在其他一些shell中，内置命令的优先级高于函数，所以执行*:*，总是执行内置命令。（**：**是一个空命令，while true等同于 while **：**，常用作占位符）\n2.  先来看看函数的主体**：|：&**，使用管道的时候是两个进程同时开始执行。\n3.  所以当执行一个**：**函数时，产生两个新进程，然后一个原来的进程退出，这样不停地递归下去，就产生了一个无限递归。按照这个增长模式的化，其增长趋势约为$2^n$。\n\n## 总结\nLinux中还有很多这样存在这陷阱的命令，这也正是我喜欢Linux系统的原因，充满着探索性。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n","source":"_posts/fork-bomb.md","raw":"---\ntitle: Linux fork炸弹解析\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - fork bomb\ndate: 2016-07-14 13:52:31\ncategories: Shell脚本\n---\n\n**:(){ :|: & };:**是一个bash函数，以Fork Bomb闻名，是一个拒绝服务攻击 的Linux 系统。如果你好奇地去执行了这个命令，那么赶快重启系统吧~！\n\n----------\n<!--more-->\n\n## 命令解析\n```\n:()\n{\n\t: | : &\n};:\n```\n1. **：**在这里是一个函数名，我们定义之，并在后面执行它。\n2. **：|：&**，：函数的输出通过管道传给另一个冒号函数作为输入，并且在后台执行。\n3. **{ };**标识着里面的内容是一个函数主体。\n4. 最后一个**：**为定义完成后的一次函数执行。\n\n## 原理解析\n1. 首先需要说明的是**:**是一个shell内置命令，所以上面这段代码只有在bash中才可能产生fork炸弹，因为在其他一些shell中，内置命令的优先级高于函数，所以执行*:*，总是执行内置命令。（**：**是一个空命令，while true等同于 while **：**，常用作占位符）\n2.  先来看看函数的主体**：|：&**，使用管道的时候是两个进程同时开始执行。\n3.  所以当执行一个**：**函数时，产生两个新进程，然后一个原来的进程退出，这样不停地递归下去，就产生了一个无限递归。按照这个增长模式的化，其增长趋势约为$2^n$。\n\n## 总结\nLinux中还有很多这样存在这陷阱的命令，这也正是我喜欢Linux系统的原因，充满着探索性。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n","slug":"fork-bomb","published":1,"updated":"2020-07-21T01:40:07.137Z","layout":"post","photos":[],"link":"","_id":"cklumqgem000y79n51arcxpma","content":"<p><strong>:(){ :|: &amp; };:</strong>是一个bash函数，以Fork Bomb闻名，是一个拒绝服务攻击 的Linux 系统。如果你好奇地去执行了这个命令，那么赶快重启系统吧~！</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"命令解析\"><a href=\"#命令解析\" class=\"headerlink\" title=\"命令解析\"></a>命令解析</h2><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t: <span class=\"string\">| : &amp;</span></span><br><span class=\"line\">&#125;;:</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>：</strong>在这里是一个函数名，我们定义之，并在后面执行它。</li>\n<li><strong>：|：&amp;</strong>，：函数的输出通过管道传给另一个冒号函数作为输入，并且在后台执行。</li>\n<li><strong>{ };</strong>标识着里面的内容是一个函数主体。</li>\n<li>最后一个<strong>：</strong>为定义完成后的一次函数执行。</li>\n</ol>\n<h2 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h2><ol>\n<li>首先需要说明的是<strong>:</strong>是一个shell内置命令，所以上面这段代码只有在bash中才可能产生fork炸弹，因为在其他一些shell中，内置命令的优先级高于函数，所以执行<em>:</em>，总是执行内置命令。（<strong>：</strong>是一个空命令，while true等同于 while <strong>：</strong>，常用作占位符）</li>\n<li>先来看看函数的主体<strong>：|：&amp;</strong>，使用管道的时候是两个进程同时开始执行。</li>\n<li>所以当执行一个<strong>：</strong>函数时，产生两个新进程，然后一个原来的进程退出，这样不停地递归下去，就产生了一个无限递归。按照这个增长模式的化，其增长趋势约为$2^n$。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Linux中还有很多这样存在这陷阱的命令，这也正是我喜欢Linux系统的原因，充满着探索性。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p><strong>:(){ :|: &amp; };:</strong>是一个bash函数，以Fork Bomb闻名，是一个拒绝服务攻击 的Linux 系统。如果你好奇地去执行了这个命令，那么赶快重启系统吧~！</p>\n<hr>","more":"<h2 id=\"命令解析\"><a href=\"#命令解析\" class=\"headerlink\" title=\"命令解析\"></a>命令解析</h2><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t: <span class=\"string\">| : &amp;</span></span><br><span class=\"line\">&#125;;:</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>：</strong>在这里是一个函数名，我们定义之，并在后面执行它。</li>\n<li><strong>：|：&amp;</strong>，：函数的输出通过管道传给另一个冒号函数作为输入，并且在后台执行。</li>\n<li><strong>{ };</strong>标识着里面的内容是一个函数主体。</li>\n<li>最后一个<strong>：</strong>为定义完成后的一次函数执行。</li>\n</ol>\n<h2 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h2><ol>\n<li>首先需要说明的是<strong>:</strong>是一个shell内置命令，所以上面这段代码只有在bash中才可能产生fork炸弹，因为在其他一些shell中，内置命令的优先级高于函数，所以执行<em>:</em>，总是执行内置命令。（<strong>：</strong>是一个空命令，while true等同于 while <strong>：</strong>，常用作占位符）</li>\n<li>先来看看函数的主体<strong>：|：&amp;</strong>，使用管道的时候是两个进程同时开始执行。</li>\n<li>所以当执行一个<strong>：</strong>函数时，产生两个新进程，然后一个原来的进程退出，这样不停地递归下去，就产生了一个无限递归。按照这个增长模式的化，其增长趋势约为$2^n$。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Linux中还有很多这样存在这陷阱的命令，这也正是我喜欢Linux系统的原因，充满着探索性。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"RPATH与RUNPATH的区别","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2021-02-22T10:26:04.000Z","_content":"\n本文从一个实际遇到的问题出发，分析 `RPATH` 与 `RUNPATH` 的区别，以及产生的原因。\n\n-----\n<!--more-->\n\n# RPATH与RUNPATH的区别\n\n年前升级了操作系统后，同样的代码在新系统编译后无法执行，提示找不到依赖库，本文用来记录一下是如何解决这个问题的。\n## 源文件\n`main.c` ：\n```c\n#include \"a.h\"\n\nint main() {\n\ta();\n\treturn 0;\n}\n```\n`libA.so`：\n```c\n// a.c\n#include \"b.h\"\n\nvoid a() {\n\tb();\n}\n```\n```c\n// a.h\nvoid a();\n```\n`ubuntu 16.04(gcc version 5.4.0)`：\n```bash\n$ gcc -fPIC -shared a.c -I. -L. -lB -o libA.so\n```\n`libB.so`：\n```c\n// b.c\n#include <stdio.h>\n\nvoid b() {\n\tprintf(\"Hello, World\\n\");\n}\n```\n```c\n// b.h\nvoid b();\n```\n`ubuntu 16.04(gcc version 5.4.0)`：\n```bash\n$ gcc -fPIC -shared -I. b.c -o libB.so\n```\n\n\n> **函数调用依赖关系：`main` -> `a` -> `b`**。\n\n\n\n## 复现步骤\n\n1. 分别在 `ubuntu 16.04(gcc version 5.4.0)` 和 `ubuntu 20.04(gcc version 9.3.0)` 编译可执行程序：\n```bash\n$ gcc -I. -o main main.c -Wl,--rpath,. -L. -lA -lB\n```\n\n\n2. 在 `ubuntu 16.04(gcc version 5.4.0)` 运行**成功**：\n```bash\n$ ./main\nHello, World\n```\n\n3. 在 `ubuntu 20.04(gcc version 9.3.0)` 运行**失败**：\n```bash\n$ ./main \n./main: error while loading shared libraries: libB.so: cannot open shared object file: No such file or directory\n```\n> 错误提示为找不到可执行程序 `./main` 依赖的共享库 `libB.so` 。\n\n\n\n## 问题原因\n### 排除共享库本身问题\n首先，由于 `libA.so` 和 `libB.so` 是在 `ubuntu 16.04(gcc version 5.4.0)` 上编译的，所以重新在`ubuntu 20.04(gcc version 9.3.0)` 上编译 `libA.so` 和 `libB.so`，并重复复现步骤，现象相同，说明不是 `libA.so` 和 `libB.so` 导致的问题；\n\n\n### 分析库查找过程\n使用 **`LD_DEBUG`**，打开链接器的调试功能，分析共享库的查找过程：\n`ubuntu 16.04(gcc version 5.4.0)`：\n```bash\n$ LD_DEBUG=libs ./main                                                        [16:37:15]\n     22331:\tfind library=libA.so [0]; searching\n     22331:\t search path=./tls/x86_64:./tls:./x86_64:.\t\t(RPATH from file ./main)\n......\n     22331:\t  trying file=./libA.so\n......\n     22331:\tfind library=libB.so [0]; searching\n     22331:\t search path=./tls/x86_64:./tls:./x86_64:.\t\t(RPATH from file ./main)\n......\n     22331:\t  trying file=./libB.so\n ......\n```\n`ubuntu 20.04(gcc version 9.3.0)`：\n```bash\n$ LD_DEBUG=libs ./main\n     33218:\tfind library=libA.so [0]; searching\n     33218:\t search path=./tls/haswell/x86_64:./tls/haswell:./tls/x86_64:./tls:./haswell/x86_64:./haswell:./x86_64:.\t\t(RUNPATH from file ./main)\n......\n     33218:\t  trying file=./libA.so\n......\n     33218:\tfind library=libB.so [0]; searching\n     33218:\t search cache=/etc/ld.so.cache\n     33218:\t search path=/lib/x86_64-linux-gnu/tls/haswell/x86_64:/lib/x86_64-linux-gnu/tls/haswell:/lib/x86_64-linux-gnu/tls/x86_64:/lib/x86_64-linux-gnu/tls:/lib/x86_64-linux-gnu/haswell/x86_64:/lib/x86_64-linux-gnu/haswell:/lib/x86_64-linux-gnu/x86_64:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/tls/haswell/x86_64:/usr/lib/x86_64-linux-gnu/tls/haswell:/usr/lib/x86_64-linux-gnu/tls/x86_64:/usr/lib/x86_64-linux-gnu/tls:/usr/lib/x86_64-linux-gnu/haswell/x86_64:/usr/lib/x86_64-linux-gnu/haswell:/usr/lib/x86_64-linux-gnu/x86_64:/usr/lib/x86_64-linux-gnu:/lib/tls/haswell/x86_64:/lib/tls/haswell:/lib/tls/x86_64:/lib/tls:/lib/haswell/x86_64:/lib/haswell:/lib/x86_64:/lib:/usr/lib/tls/haswell/x86_64:/usr/lib/tls/haswell:/usr/lib/tls/x86_64:/usr/lib/tls:/usr/lib/haswell/x86_64:/usr/lib/haswell:/usr/lib/x86_64:/usr/lib\t\t(system search path)\n......\n./main: error while loading shared libraries: libB.so: cannot open shared object file: No such file or directory\n\n```\n结果在 `ubuntu 20.04(gcc version 9.3.0)` 中， 可以正确查找到 `libA.so` ，但是无法正确查找到 `libB.so` 。\n`libB.so` 的查找路径是 `system search path` ，而非我们在编译时设定的查找时路径 `./` ，导致可执行程序无法加载 `libB.so` 。\n> 动态链接器对共享库的查找顺序：\n> 1. `LD_LIBRARY_PATH`、`-L` 和 `-rpath`；\n> 1. `/etc/ld.so.cache`；\n> 1. 默认共享库目录：`/usr/lib`、`/lib`；\n\n\n\n### RPATH与RUNPATH的区别\n由上分析可以得出是共享库运行时加载路径非法导致的问题，在排除设置 `LD_LIBRARY_PATH` 等环境变量的情况下，可以将焦点锁定在使用的链接选项 `-rpath` 上，查看源文件依赖：\n`ubuntu 16.04(gcc version 5.4.0)`：\n```bash\n$ readelf -d main\nDynamic section at offset 0xe08 contains 26 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libA.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n 0x000000000000000f (RPATH)              Library rpath: [.]\n \n $ readelf -d libA.so\nDynamic section at offset 0xe08 contains 25 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libB.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n \n $ readelf -d libB.so\nDynamic section at offset 0xe18 contains 24 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n```\n`ubuntu 20.04(gcc version 9.3.0)`：\n```bash\n$ readelf -d main \nDynamic section at offset 0x2da8 contains 29 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libA.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n 0x000000000000001d (RUNPATH)            Library runpath: [.]\n \n $ readelf -d libA.so \nDynamic section at offset 0xe08 contains 25 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libB.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n \n $ readelf -d libB.so \nDynamic section at offset 0xe18 contains 24 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n```\n发现在 `ubuntu 20.04(gcc version 9.3.0)` 上 `RPATH` 变成了 `RUNPATH` ，说明链接器选项 `-rpath` 的行为发生了改变。\n> 源文件依赖关系：`main` -> `libA.so` -> `libB.so`；\n\n\n\n**综上，问题的原因是 `ubuntu 20.04(gcc version 9.3.0) `上，链接器选项 `-rpath` 的行为发生改变，默认配置为 `RUNPATH` 而不是 `RPATH`；由于 `RUNPATH` 不适用于间接依赖的库，所以导致在 `ubuntu 20.04(gcc version 9.3.0)` 上只能正确查找到 `libA.so` ，而无法正确查找到 `libB.so` 。**\n> `gcc version >= 7.5.0`时，`-rpath`默认行为即发生改变。\n\n\n\n## 解决方案\n### LD_LIBRARY_PATH（不推荐）\n`LD_LIBRARY_PATH` 是一个环境变量，作用是**临时**改变链接器的加载路径，可以存储多个路径，用冒号分隔：\n```bash\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./libs\n```\n不推荐的原因：\n\n1. 若全局设置 `LD_LIBRARY_PATH`，会影响其它应用程序的共享库加载过程；\n1. 若只在该应用程序启动时局部设置 `LD_LIBRARY_PATH`，则每次启动都需要设置，步骤过于繁琐；\n\n\n\n### --disable-new-dtags\n可以使用 `-Wl,--disable-new-dtags` 选项来使链接器保持旧行为，即在 `ubuntu 20.04(gcc version 9.3.0)` 使用如下命令编译：\n```bash\n$ gcc -I. -o main main.c -Wl,--disable-new-dtags,--rpath,. -L. -lA -lB\n```\n重新运行并查看依赖：\n```bash\n$ ./main \nHello, World\n\n$ readelf -d main\nDynamic section at offset 0x2da8 contains 29 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libA.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n 0x000000000000000f (RPATH)              Library rpath: [.]\n```\n可执行程序 `main` 可以正确运行，`RUNPATH` 也变成了 `RPATH`，链接器行为与 `ubuntu 16.04(gcc version 5.4.0)` 保持一致了。\n> 同理，也有 `-Wl,--enable-new-dtags` 选项来使链接器保持新行为\n\n\n\n如下为官方解释：\n```\n--enable-new-dtags\n--disable-new-dtags\nThis linker can create the new dynamic tags in ELF. But the older ELF systems may not understand them. If you specify --enable-new-dtags, the new dynamic tags will be created as needed and older dynamic tags will be omitted. If you specify --disable-new-dtags, no new dynamic tags will be created. By default, the new dynamic tags are not created. Note that those options are only available for ELF systems.\n```\n## 参考\n\n- [How to set RPATH and RUNPATH with GCC/LD?](https://stackoverflow.com/questions/52018092/how-to-set-rpath-and-runpath-with-gcc-ld)\n- [use RPATH but not RUNPATH?](https://stackoverflow.com/questions/7967848/use-rpath-but-not-runpath)\n\n-----\n\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)","source":"_posts/difference-between-RPATH-and-RUNPATH.md","raw":"---\ntitle: RPATH与RUNPATH的区别\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - RPATH\n  - RUNPATH\n  - LD_DEBUG\ndate: 2021-02-22 18:26:04\ncategories: 编译链接\n---\n\n本文从一个实际遇到的问题出发，分析 `RPATH` 与 `RUNPATH` 的区别，以及产生的原因。\n\n-----\n<!--more-->\n\n# RPATH与RUNPATH的区别\n\n年前升级了操作系统后，同样的代码在新系统编译后无法执行，提示找不到依赖库，本文用来记录一下是如何解决这个问题的。\n## 源文件\n`main.c` ：\n```c\n#include \"a.h\"\n\nint main() {\n\ta();\n\treturn 0;\n}\n```\n`libA.so`：\n```c\n// a.c\n#include \"b.h\"\n\nvoid a() {\n\tb();\n}\n```\n```c\n// a.h\nvoid a();\n```\n`ubuntu 16.04(gcc version 5.4.0)`：\n```bash\n$ gcc -fPIC -shared a.c -I. -L. -lB -o libA.so\n```\n`libB.so`：\n```c\n// b.c\n#include <stdio.h>\n\nvoid b() {\n\tprintf(\"Hello, World\\n\");\n}\n```\n```c\n// b.h\nvoid b();\n```\n`ubuntu 16.04(gcc version 5.4.0)`：\n```bash\n$ gcc -fPIC -shared -I. b.c -o libB.so\n```\n\n\n> **函数调用依赖关系：`main` -> `a` -> `b`**。\n\n\n\n## 复现步骤\n\n1. 分别在 `ubuntu 16.04(gcc version 5.4.0)` 和 `ubuntu 20.04(gcc version 9.3.0)` 编译可执行程序：\n```bash\n$ gcc -I. -o main main.c -Wl,--rpath,. -L. -lA -lB\n```\n\n\n2. 在 `ubuntu 16.04(gcc version 5.4.0)` 运行**成功**：\n```bash\n$ ./main\nHello, World\n```\n\n3. 在 `ubuntu 20.04(gcc version 9.3.0)` 运行**失败**：\n```bash\n$ ./main \n./main: error while loading shared libraries: libB.so: cannot open shared object file: No such file or directory\n```\n> 错误提示为找不到可执行程序 `./main` 依赖的共享库 `libB.so` 。\n\n\n\n## 问题原因\n### 排除共享库本身问题\n首先，由于 `libA.so` 和 `libB.so` 是在 `ubuntu 16.04(gcc version 5.4.0)` 上编译的，所以重新在`ubuntu 20.04(gcc version 9.3.0)` 上编译 `libA.so` 和 `libB.so`，并重复复现步骤，现象相同，说明不是 `libA.so` 和 `libB.so` 导致的问题；\n\n\n### 分析库查找过程\n使用 **`LD_DEBUG`**，打开链接器的调试功能，分析共享库的查找过程：\n`ubuntu 16.04(gcc version 5.4.0)`：\n```bash\n$ LD_DEBUG=libs ./main                                                        [16:37:15]\n     22331:\tfind library=libA.so [0]; searching\n     22331:\t search path=./tls/x86_64:./tls:./x86_64:.\t\t(RPATH from file ./main)\n......\n     22331:\t  trying file=./libA.so\n......\n     22331:\tfind library=libB.so [0]; searching\n     22331:\t search path=./tls/x86_64:./tls:./x86_64:.\t\t(RPATH from file ./main)\n......\n     22331:\t  trying file=./libB.so\n ......\n```\n`ubuntu 20.04(gcc version 9.3.0)`：\n```bash\n$ LD_DEBUG=libs ./main\n     33218:\tfind library=libA.so [0]; searching\n     33218:\t search path=./tls/haswell/x86_64:./tls/haswell:./tls/x86_64:./tls:./haswell/x86_64:./haswell:./x86_64:.\t\t(RUNPATH from file ./main)\n......\n     33218:\t  trying file=./libA.so\n......\n     33218:\tfind library=libB.so [0]; searching\n     33218:\t search cache=/etc/ld.so.cache\n     33218:\t search path=/lib/x86_64-linux-gnu/tls/haswell/x86_64:/lib/x86_64-linux-gnu/tls/haswell:/lib/x86_64-linux-gnu/tls/x86_64:/lib/x86_64-linux-gnu/tls:/lib/x86_64-linux-gnu/haswell/x86_64:/lib/x86_64-linux-gnu/haswell:/lib/x86_64-linux-gnu/x86_64:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/tls/haswell/x86_64:/usr/lib/x86_64-linux-gnu/tls/haswell:/usr/lib/x86_64-linux-gnu/tls/x86_64:/usr/lib/x86_64-linux-gnu/tls:/usr/lib/x86_64-linux-gnu/haswell/x86_64:/usr/lib/x86_64-linux-gnu/haswell:/usr/lib/x86_64-linux-gnu/x86_64:/usr/lib/x86_64-linux-gnu:/lib/tls/haswell/x86_64:/lib/tls/haswell:/lib/tls/x86_64:/lib/tls:/lib/haswell/x86_64:/lib/haswell:/lib/x86_64:/lib:/usr/lib/tls/haswell/x86_64:/usr/lib/tls/haswell:/usr/lib/tls/x86_64:/usr/lib/tls:/usr/lib/haswell/x86_64:/usr/lib/haswell:/usr/lib/x86_64:/usr/lib\t\t(system search path)\n......\n./main: error while loading shared libraries: libB.so: cannot open shared object file: No such file or directory\n\n```\n结果在 `ubuntu 20.04(gcc version 9.3.0)` 中， 可以正确查找到 `libA.so` ，但是无法正确查找到 `libB.so` 。\n`libB.so` 的查找路径是 `system search path` ，而非我们在编译时设定的查找时路径 `./` ，导致可执行程序无法加载 `libB.so` 。\n> 动态链接器对共享库的查找顺序：\n> 1. `LD_LIBRARY_PATH`、`-L` 和 `-rpath`；\n> 1. `/etc/ld.so.cache`；\n> 1. 默认共享库目录：`/usr/lib`、`/lib`；\n\n\n\n### RPATH与RUNPATH的区别\n由上分析可以得出是共享库运行时加载路径非法导致的问题，在排除设置 `LD_LIBRARY_PATH` 等环境变量的情况下，可以将焦点锁定在使用的链接选项 `-rpath` 上，查看源文件依赖：\n`ubuntu 16.04(gcc version 5.4.0)`：\n```bash\n$ readelf -d main\nDynamic section at offset 0xe08 contains 26 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libA.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n 0x000000000000000f (RPATH)              Library rpath: [.]\n \n $ readelf -d libA.so\nDynamic section at offset 0xe08 contains 25 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libB.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n \n $ readelf -d libB.so\nDynamic section at offset 0xe18 contains 24 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n```\n`ubuntu 20.04(gcc version 9.3.0)`：\n```bash\n$ readelf -d main \nDynamic section at offset 0x2da8 contains 29 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libA.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n 0x000000000000001d (RUNPATH)            Library runpath: [.]\n \n $ readelf -d libA.so \nDynamic section at offset 0xe08 contains 25 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libB.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n \n $ readelf -d libB.so \nDynamic section at offset 0xe18 contains 24 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n```\n发现在 `ubuntu 20.04(gcc version 9.3.0)` 上 `RPATH` 变成了 `RUNPATH` ，说明链接器选项 `-rpath` 的行为发生了改变。\n> 源文件依赖关系：`main` -> `libA.so` -> `libB.so`；\n\n\n\n**综上，问题的原因是 `ubuntu 20.04(gcc version 9.3.0) `上，链接器选项 `-rpath` 的行为发生改变，默认配置为 `RUNPATH` 而不是 `RPATH`；由于 `RUNPATH` 不适用于间接依赖的库，所以导致在 `ubuntu 20.04(gcc version 9.3.0)` 上只能正确查找到 `libA.so` ，而无法正确查找到 `libB.so` 。**\n> `gcc version >= 7.5.0`时，`-rpath`默认行为即发生改变。\n\n\n\n## 解决方案\n### LD_LIBRARY_PATH（不推荐）\n`LD_LIBRARY_PATH` 是一个环境变量，作用是**临时**改变链接器的加载路径，可以存储多个路径，用冒号分隔：\n```bash\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./libs\n```\n不推荐的原因：\n\n1. 若全局设置 `LD_LIBRARY_PATH`，会影响其它应用程序的共享库加载过程；\n1. 若只在该应用程序启动时局部设置 `LD_LIBRARY_PATH`，则每次启动都需要设置，步骤过于繁琐；\n\n\n\n### --disable-new-dtags\n可以使用 `-Wl,--disable-new-dtags` 选项来使链接器保持旧行为，即在 `ubuntu 20.04(gcc version 9.3.0)` 使用如下命令编译：\n```bash\n$ gcc -I. -o main main.c -Wl,--disable-new-dtags,--rpath,. -L. -lA -lB\n```\n重新运行并查看依赖：\n```bash\n$ ./main \nHello, World\n\n$ readelf -d main\nDynamic section at offset 0x2da8 contains 29 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libA.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n 0x000000000000000f (RPATH)              Library rpath: [.]\n```\n可执行程序 `main` 可以正确运行，`RUNPATH` 也变成了 `RPATH`，链接器行为与 `ubuntu 16.04(gcc version 5.4.0)` 保持一致了。\n> 同理，也有 `-Wl,--enable-new-dtags` 选项来使链接器保持新行为\n\n\n\n如下为官方解释：\n```\n--enable-new-dtags\n--disable-new-dtags\nThis linker can create the new dynamic tags in ELF. But the older ELF systems may not understand them. If you specify --enable-new-dtags, the new dynamic tags will be created as needed and older dynamic tags will be omitted. If you specify --disable-new-dtags, no new dynamic tags will be created. By default, the new dynamic tags are not created. Note that those options are only available for ELF systems.\n```\n## 参考\n\n- [How to set RPATH and RUNPATH with GCC/LD?](https://stackoverflow.com/questions/52018092/how-to-set-rpath-and-runpath-with-gcc-ld)\n- [use RPATH but not RUNPATH?](https://stackoverflow.com/questions/7967848/use-rpath-but-not-runpath)\n\n-----\n\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)","slug":"difference-between-RPATH-and-RUNPATH","published":1,"updated":"2021-02-22T10:31:18.825Z","layout":"post","photos":[],"link":"","_id":"cklumqgen001279n56wgmoyq1","content":"<p>本文从一个实际遇到的问题出发，分析 <code>RPATH</code> 与 <code>RUNPATH</code> 的区别，以及产生的原因。</p>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"RPATH与RUNPATH的区别\"><a href=\"#RPATH与RUNPATH的区别\" class=\"headerlink\" title=\"RPATH与RUNPATH的区别\"></a>RPATH与RUNPATH的区别</h1><p>年前升级了操作系统后，同样的代码在新系统编译后无法执行，提示找不到依赖库，本文用来记录一下是如何解决这个问题的。</p>\n<h2 id=\"源文件\"><a href=\"#源文件\" class=\"headerlink\" title=\"源文件\"></a>源文件</h2><p><code>main.c</code> ：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\ta();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>libA.so</code>：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">a</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tb();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>ubuntu 16.04(gcc version 5.4.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -fPIC -shared a.c -I. -L. -lB -o libA.so</span><br></pre></td></tr></table></figure></p>\n<p><code>libB.so</code>：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">b</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">b</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>ubuntu 16.04(gcc version 5.4.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -fPIC -shared -I. b.c -o libB.so</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>函数调用依赖关系：<code>main</code> -&gt; <code>a</code> -&gt; <code>b</code></strong>。</p>\n</blockquote>\n<h2 id=\"复现步骤\"><a href=\"#复现步骤\" class=\"headerlink\" title=\"复现步骤\"></a>复现步骤</h2><ol>\n<li><p>分别在 <code>ubuntu 16.04(gcc version 5.4.0)</code> 和 <code>ubuntu 20.04(gcc version 9.3.0)</code> 编译可执行程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -I. -o main main.c -Wl,--rpath,. -L. -lA -lB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>ubuntu 16.04(gcc version 5.4.0)</code> 运行<strong>成功</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./main</span><br><span class=\"line\">Hello, World</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 运行<strong>失败</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./main </span><br><span class=\"line\">./main: error <span class=\"keyword\">while</span> loading shared libraries: libB.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>错误提示为找不到可执行程序 <code>./main</code> 依赖的共享库 <code>libB.so</code> 。</p>\n</blockquote>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><h3 id=\"排除共享库本身问题\"><a href=\"#排除共享库本身问题\" class=\"headerlink\" title=\"排除共享库本身问题\"></a>排除共享库本身问题</h3><p>首先，由于 <code>libA.so</code> 和 <code>libB.so</code> 是在 <code>ubuntu 16.04(gcc version 5.4.0)</code> 上编译的，所以重新在<code>ubuntu 20.04(gcc version 9.3.0)</code> 上编译 <code>libA.so</code> 和 <code>libB.so</code>，并重复复现步骤，现象相同，说明不是 <code>libA.so</code> 和 <code>libB.so</code> 导致的问题；</p>\n<h3 id=\"分析库查找过程\"><a href=\"#分析库查找过程\" class=\"headerlink\" title=\"分析库查找过程\"></a>分析库查找过程</h3><p>使用 <strong><code>LD_DEBUG</code></strong>，打开链接器的调试功能，分析共享库的查找过程：<br><code>ubuntu 16.04(gcc version 5.4.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ LD_DEBUG=libs ./main                                                        [16:37:15]</span><br><span class=\"line\">     22331:\tfind library=libA.so [0]; searching</span><br><span class=\"line\">     22331:\t search path=./tls/x86_64:./tls:./x86_64:.\t\t(RPATH from file ./main)</span><br><span class=\"line\">......</span><br><span class=\"line\">     22331:\t  trying file=./libA.so</span><br><span class=\"line\">......</span><br><span class=\"line\">     22331:\tfind library=libB.so [0]; searching</span><br><span class=\"line\">     22331:\t search path=./tls/x86_64:./tls:./x86_64:.\t\t(RPATH from file ./main)</span><br><span class=\"line\">......</span><br><span class=\"line\">     22331:\t  trying file=./libB.so</span><br><span class=\"line\"> ......</span><br></pre></td></tr></table></figure></p>\n<p><code>ubuntu 20.04(gcc version 9.3.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ LD_DEBUG=libs ./main</span><br><span class=\"line\">     33218:\tfind library=libA.so [0]; searching</span><br><span class=\"line\">     33218:\t search path=./tls/haswell/x86_64:./tls/haswell:./tls/x86_64:./tls:./haswell/x86_64:./haswell:./x86_64:.\t\t(RUNPATH from file ./main)</span><br><span class=\"line\">......</span><br><span class=\"line\">     33218:\t  trying file=./libA.so</span><br><span class=\"line\">......</span><br><span class=\"line\">     33218:\tfind library=libB.so [0]; searching</span><br><span class=\"line\">     33218:\t search cache=/etc/ld.so.cache</span><br><span class=\"line\">     33218:\t search path=/lib/x86_64-linux-gnu/tls/haswell/x86_64:/lib/x86_64-linux-gnu/tls/haswell:/lib/x86_64-linux-gnu/tls/x86_64:/lib/x86_64-linux-gnu/tls:/lib/x86_64-linux-gnu/haswell/x86_64:/lib/x86_64-linux-gnu/haswell:/lib/x86_64-linux-gnu/x86_64:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/tls/haswell/x86_64:/usr/lib/x86_64-linux-gnu/tls/haswell:/usr/lib/x86_64-linux-gnu/tls/x86_64:/usr/lib/x86_64-linux-gnu/tls:/usr/lib/x86_64-linux-gnu/haswell/x86_64:/usr/lib/x86_64-linux-gnu/haswell:/usr/lib/x86_64-linux-gnu/x86_64:/usr/lib/x86_64-linux-gnu:/lib/tls/haswell/x86_64:/lib/tls/haswell:/lib/tls/x86_64:/lib/tls:/lib/haswell/x86_64:/lib/haswell:/lib/x86_64:/lib:/usr/lib/tls/haswell/x86_64:/usr/lib/tls/haswell:/usr/lib/tls/x86_64:/usr/lib/tls:/usr/lib/haswell/x86_64:/usr/lib/haswell:/usr/lib/x86_64:/usr/lib\t\t(system search path)</span><br><span class=\"line\">......</span><br><span class=\"line\">./main: error <span class=\"keyword\">while</span> loading shared libraries: libB.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>结果在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 中， 可以正确查找到 <code>libA.so</code> ，但是无法正确查找到 <code>libB.so</code> 。<br><code>libB.so</code> 的查找路径是 <code>system search path</code> ，而非我们在编译时设定的查找时路径 <code>./</code> ，导致可执行程序无法加载 <code>libB.so</code> 。</p>\n<blockquote>\n<p>动态链接器对共享库的查找顺序：</p>\n<ol>\n<li><code>LD_LIBRARY_PATH</code>、<code>-L</code> 和 <code>-rpath</code>；</li>\n<li><code>/etc/ld.so.cache</code>；</li>\n<li>默认共享库目录：<code>/usr/lib</code>、<code>/lib</code>；</li>\n</ol>\n</blockquote>\n<h3 id=\"RPATH与RUNPATH的区别-1\"><a href=\"#RPATH与RUNPATH的区别-1\" class=\"headerlink\" title=\"RPATH与RUNPATH的区别\"></a>RPATH与RUNPATH的区别</h3><p>由上分析可以得出是共享库运行时加载路径非法导致的问题，在排除设置 <code>LD_LIBRARY_PATH</code> 等环境变量的情况下，可以将焦点锁定在使用的链接选项 <code>-rpath</code> 上，查看源文件依赖：<br><code>ubuntu 16.04(gcc version 5.4.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -d main</span><br><span class=\"line\">Dynamic section at offset 0xe08 contains 26 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libA.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> 0x000000000000000f (RPATH)              Library rpath: [.]</span><br><span class=\"line\"> </span><br><span class=\"line\"> $ readelf -d libA.so</span><br><span class=\"line\">Dynamic section at offset 0xe08 contains 25 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libB.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> </span><br><span class=\"line\"> $ readelf -d libB.so</span><br><span class=\"line\">Dynamic section at offset 0xe18 contains 24 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br></pre></td></tr></table></figure></p>\n<p><code>ubuntu 20.04(gcc version 9.3.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -d main </span><br><span class=\"line\">Dynamic section at offset 0x2da8 contains 29 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libA.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> 0x000000000000001d (RUNPATH)            Library runpath: [.]</span><br><span class=\"line\"> </span><br><span class=\"line\"> $ readelf -d libA.so </span><br><span class=\"line\">Dynamic section at offset 0xe08 contains 25 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libB.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> </span><br><span class=\"line\"> $ readelf -d libB.so </span><br><span class=\"line\">Dynamic section at offset 0xe18 contains 24 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br></pre></td></tr></table></figure></p>\n<p>发现在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 上 <code>RPATH</code> 变成了 <code>RUNPATH</code> ，说明链接器选项 <code>-rpath</code> 的行为发生了改变。</p>\n<blockquote>\n<p>源文件依赖关系：<code>main</code> -&gt; <code>libA.so</code> -&gt; <code>libB.so</code>；</p>\n</blockquote>\n<p><strong>综上，问题的原因是 <code>ubuntu 20.04(gcc version 9.3.0)</code>上，链接器选项 <code>-rpath</code> 的行为发生改变，默认配置为 <code>RUNPATH</code> 而不是 <code>RPATH</code>；由于 <code>RUNPATH</code> 不适用于间接依赖的库，所以导致在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 上只能正确查找到 <code>libA.so</code> ，而无法正确查找到 <code>libB.so</code> 。</strong></p>\n<blockquote>\n<p><code>gcc version &gt;= 7.5.0</code>时，<code>-rpath</code>默认行为即发生改变。</p>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"LD-LIBRARY-PATH（不推荐）\"><a href=\"#LD-LIBRARY-PATH（不推荐）\" class=\"headerlink\" title=\"LD_LIBRARY_PATH（不推荐）\"></a>LD_LIBRARY_PATH（不推荐）</h3><p><code>LD_LIBRARY_PATH</code> 是一个环境变量，作用是<strong>临时</strong>改变链接器的加载路径，可以存储多个路径，用冒号分隔：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> LD_LIBRARY_PATH=<span class=\"variable\">$LD_LIBRARY_PATH</span>:./libs</span><br></pre></td></tr></table></figure></p>\n<p>不推荐的原因：</p>\n<ol>\n<li>若全局设置 <code>LD_LIBRARY_PATH</code>，会影响其它应用程序的共享库加载过程；</li>\n<li>若只在该应用程序启动时局部设置 <code>LD_LIBRARY_PATH</code>，则每次启动都需要设置，步骤过于繁琐；</li>\n</ol>\n<h3 id=\"–disable-new-dtags\"><a href=\"#–disable-new-dtags\" class=\"headerlink\" title=\"–disable-new-dtags\"></a>–disable-new-dtags</h3><p>可以使用 <code>-Wl,--disable-new-dtags</code> 选项来使链接器保持旧行为，即在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 使用如下命令编译：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -I. -o main main.c -Wl,--<span class=\"built_in\">disable</span>-new-dtags,--rpath,. -L. -lA -lB</span><br></pre></td></tr></table></figure></p>\n<p>重新运行并查看依赖：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./main </span><br><span class=\"line\">Hello, World</span><br><span class=\"line\"></span><br><span class=\"line\">$ readelf -d main</span><br><span class=\"line\">Dynamic section at offset 0x2da8 contains 29 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libA.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> 0x000000000000000f (RPATH)              Library rpath: [.]</span><br></pre></td></tr></table></figure></p>\n<p>可执行程序 <code>main</code> 可以正确运行，<code>RUNPATH</code> 也变成了 <code>RPATH</code>，链接器行为与 <code>ubuntu 16.04(gcc version 5.4.0)</code> 保持一致了。</p>\n<blockquote>\n<p>同理，也有 <code>-Wl,--enable-new-dtags</code> 选项来使链接器保持新行为</p>\n</blockquote>\n<p>如下为官方解释：<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-<span class=\"keyword\">new</span>-dtags</span><br><span class=\"line\">--disable-<span class=\"keyword\">new</span>-dtags</span><br><span class=\"line\">This linker can <span class=\"keyword\">create</span> the <span class=\"keyword\">new</span> <span class=\"keyword\">dynamic</span> tags <span class=\"keyword\">in</span> ELF. But the older ELF systems may <span class=\"keyword\">not</span> understand them. <span class=\"keyword\">If</span> you specify --enable-<span class=\"keyword\">new</span>-dtags, the <span class=\"keyword\">new</span> <span class=\"keyword\">dynamic</span> tags will be created <span class=\"keyword\">as</span> needed <span class=\"keyword\">and</span> older <span class=\"keyword\">dynamic</span> tags will be omitted. <span class=\"keyword\">If</span> you specify --disable-<span class=\"keyword\">new</span>-dtags, no <span class=\"keyword\">new</span> <span class=\"keyword\">dynamic</span> tags will be created. <span class=\"keyword\">By</span> <span class=\"keyword\">default</span>, the <span class=\"keyword\">new</span> <span class=\"keyword\">dynamic</span> tags are <span class=\"keyword\">not</span> created. Note that those options are only available <span class=\"keyword\">for</span> ELF systems.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/52018092/how-to-set-rpath-and-runpath-with-gcc-ld\" target=\"_blank\" rel=\"noopener\">How to set RPATH and RUNPATH with GCC/LD?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/7967848/use-rpath-but-not-runpath\" target=\"_blank\" rel=\"noopener\">use RPATH but not RUNPATH?</a></li>\n</ul>\n<hr>\n<p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文从一个实际遇到的问题出发，分析 <code>RPATH</code> 与 <code>RUNPATH</code> 的区别，以及产生的原因。</p>\n<hr>","more":"<h1 id=\"RPATH与RUNPATH的区别\"><a href=\"#RPATH与RUNPATH的区别\" class=\"headerlink\" title=\"RPATH与RUNPATH的区别\"></a>RPATH与RUNPATH的区别</h1><p>年前升级了操作系统后，同样的代码在新系统编译后无法执行，提示找不到依赖库，本文用来记录一下是如何解决这个问题的。</p>\n<h2 id=\"源文件\"><a href=\"#源文件\" class=\"headerlink\" title=\"源文件\"></a>源文件</h2><p><code>main.c</code> ：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\ta();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>libA.so</code>：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">a</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tb();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>ubuntu 16.04(gcc version 5.4.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -fPIC -shared a.c -I. -L. -lB -o libA.so</span><br></pre></td></tr></table></figure></p>\n<p><code>libB.so</code>：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">b</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">b</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>ubuntu 16.04(gcc version 5.4.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -fPIC -shared -I. b.c -o libB.so</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>函数调用依赖关系：<code>main</code> -&gt; <code>a</code> -&gt; <code>b</code></strong>。</p>\n</blockquote>\n<h2 id=\"复现步骤\"><a href=\"#复现步骤\" class=\"headerlink\" title=\"复现步骤\"></a>复现步骤</h2><ol>\n<li><p>分别在 <code>ubuntu 16.04(gcc version 5.4.0)</code> 和 <code>ubuntu 20.04(gcc version 9.3.0)</code> 编译可执行程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -I. -o main main.c -Wl,--rpath,. -L. -lA -lB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>ubuntu 16.04(gcc version 5.4.0)</code> 运行<strong>成功</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./main</span><br><span class=\"line\">Hello, World</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 运行<strong>失败</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./main </span><br><span class=\"line\">./main: error <span class=\"keyword\">while</span> loading shared libraries: libB.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>错误提示为找不到可执行程序 <code>./main</code> 依赖的共享库 <code>libB.so</code> 。</p>\n</blockquote>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><h3 id=\"排除共享库本身问题\"><a href=\"#排除共享库本身问题\" class=\"headerlink\" title=\"排除共享库本身问题\"></a>排除共享库本身问题</h3><p>首先，由于 <code>libA.so</code> 和 <code>libB.so</code> 是在 <code>ubuntu 16.04(gcc version 5.4.0)</code> 上编译的，所以重新在<code>ubuntu 20.04(gcc version 9.3.0)</code> 上编译 <code>libA.so</code> 和 <code>libB.so</code>，并重复复现步骤，现象相同，说明不是 <code>libA.so</code> 和 <code>libB.so</code> 导致的问题；</p>\n<h3 id=\"分析库查找过程\"><a href=\"#分析库查找过程\" class=\"headerlink\" title=\"分析库查找过程\"></a>分析库查找过程</h3><p>使用 <strong><code>LD_DEBUG</code></strong>，打开链接器的调试功能，分析共享库的查找过程：<br><code>ubuntu 16.04(gcc version 5.4.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ LD_DEBUG=libs ./main                                                        [16:37:15]</span><br><span class=\"line\">     22331:\tfind library=libA.so [0]; searching</span><br><span class=\"line\">     22331:\t search path=./tls/x86_64:./tls:./x86_64:.\t\t(RPATH from file ./main)</span><br><span class=\"line\">......</span><br><span class=\"line\">     22331:\t  trying file=./libA.so</span><br><span class=\"line\">......</span><br><span class=\"line\">     22331:\tfind library=libB.so [0]; searching</span><br><span class=\"line\">     22331:\t search path=./tls/x86_64:./tls:./x86_64:.\t\t(RPATH from file ./main)</span><br><span class=\"line\">......</span><br><span class=\"line\">     22331:\t  trying file=./libB.so</span><br><span class=\"line\"> ......</span><br></pre></td></tr></table></figure></p>\n<p><code>ubuntu 20.04(gcc version 9.3.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ LD_DEBUG=libs ./main</span><br><span class=\"line\">     33218:\tfind library=libA.so [0]; searching</span><br><span class=\"line\">     33218:\t search path=./tls/haswell/x86_64:./tls/haswell:./tls/x86_64:./tls:./haswell/x86_64:./haswell:./x86_64:.\t\t(RUNPATH from file ./main)</span><br><span class=\"line\">......</span><br><span class=\"line\">     33218:\t  trying file=./libA.so</span><br><span class=\"line\">......</span><br><span class=\"line\">     33218:\tfind library=libB.so [0]; searching</span><br><span class=\"line\">     33218:\t search cache=/etc/ld.so.cache</span><br><span class=\"line\">     33218:\t search path=/lib/x86_64-linux-gnu/tls/haswell/x86_64:/lib/x86_64-linux-gnu/tls/haswell:/lib/x86_64-linux-gnu/tls/x86_64:/lib/x86_64-linux-gnu/tls:/lib/x86_64-linux-gnu/haswell/x86_64:/lib/x86_64-linux-gnu/haswell:/lib/x86_64-linux-gnu/x86_64:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/tls/haswell/x86_64:/usr/lib/x86_64-linux-gnu/tls/haswell:/usr/lib/x86_64-linux-gnu/tls/x86_64:/usr/lib/x86_64-linux-gnu/tls:/usr/lib/x86_64-linux-gnu/haswell/x86_64:/usr/lib/x86_64-linux-gnu/haswell:/usr/lib/x86_64-linux-gnu/x86_64:/usr/lib/x86_64-linux-gnu:/lib/tls/haswell/x86_64:/lib/tls/haswell:/lib/tls/x86_64:/lib/tls:/lib/haswell/x86_64:/lib/haswell:/lib/x86_64:/lib:/usr/lib/tls/haswell/x86_64:/usr/lib/tls/haswell:/usr/lib/tls/x86_64:/usr/lib/tls:/usr/lib/haswell/x86_64:/usr/lib/haswell:/usr/lib/x86_64:/usr/lib\t\t(system search path)</span><br><span class=\"line\">......</span><br><span class=\"line\">./main: error <span class=\"keyword\">while</span> loading shared libraries: libB.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>结果在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 中， 可以正确查找到 <code>libA.so</code> ，但是无法正确查找到 <code>libB.so</code> 。<br><code>libB.so</code> 的查找路径是 <code>system search path</code> ，而非我们在编译时设定的查找时路径 <code>./</code> ，导致可执行程序无法加载 <code>libB.so</code> 。</p>\n<blockquote>\n<p>动态链接器对共享库的查找顺序：</p>\n<ol>\n<li><code>LD_LIBRARY_PATH</code>、<code>-L</code> 和 <code>-rpath</code>；</li>\n<li><code>/etc/ld.so.cache</code>；</li>\n<li>默认共享库目录：<code>/usr/lib</code>、<code>/lib</code>；</li>\n</ol>\n</blockquote>\n<h3 id=\"RPATH与RUNPATH的区别-1\"><a href=\"#RPATH与RUNPATH的区别-1\" class=\"headerlink\" title=\"RPATH与RUNPATH的区别\"></a>RPATH与RUNPATH的区别</h3><p>由上分析可以得出是共享库运行时加载路径非法导致的问题，在排除设置 <code>LD_LIBRARY_PATH</code> 等环境变量的情况下，可以将焦点锁定在使用的链接选项 <code>-rpath</code> 上，查看源文件依赖：<br><code>ubuntu 16.04(gcc version 5.4.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -d main</span><br><span class=\"line\">Dynamic section at offset 0xe08 contains 26 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libA.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> 0x000000000000000f (RPATH)              Library rpath: [.]</span><br><span class=\"line\"> </span><br><span class=\"line\"> $ readelf -d libA.so</span><br><span class=\"line\">Dynamic section at offset 0xe08 contains 25 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libB.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> </span><br><span class=\"line\"> $ readelf -d libB.so</span><br><span class=\"line\">Dynamic section at offset 0xe18 contains 24 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br></pre></td></tr></table></figure></p>\n<p><code>ubuntu 20.04(gcc version 9.3.0)</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -d main </span><br><span class=\"line\">Dynamic section at offset 0x2da8 contains 29 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libA.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> 0x000000000000001d (RUNPATH)            Library runpath: [.]</span><br><span class=\"line\"> </span><br><span class=\"line\"> $ readelf -d libA.so </span><br><span class=\"line\">Dynamic section at offset 0xe08 contains 25 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libB.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> </span><br><span class=\"line\"> $ readelf -d libB.so </span><br><span class=\"line\">Dynamic section at offset 0xe18 contains 24 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br></pre></td></tr></table></figure></p>\n<p>发现在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 上 <code>RPATH</code> 变成了 <code>RUNPATH</code> ，说明链接器选项 <code>-rpath</code> 的行为发生了改变。</p>\n<blockquote>\n<p>源文件依赖关系：<code>main</code> -&gt; <code>libA.so</code> -&gt; <code>libB.so</code>；</p>\n</blockquote>\n<p><strong>综上，问题的原因是 <code>ubuntu 20.04(gcc version 9.3.0)</code>上，链接器选项 <code>-rpath</code> 的行为发生改变，默认配置为 <code>RUNPATH</code> 而不是 <code>RPATH</code>；由于 <code>RUNPATH</code> 不适用于间接依赖的库，所以导致在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 上只能正确查找到 <code>libA.so</code> ，而无法正确查找到 <code>libB.so</code> 。</strong></p>\n<blockquote>\n<p><code>gcc version &gt;= 7.5.0</code>时，<code>-rpath</code>默认行为即发生改变。</p>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"LD-LIBRARY-PATH（不推荐）\"><a href=\"#LD-LIBRARY-PATH（不推荐）\" class=\"headerlink\" title=\"LD_LIBRARY_PATH（不推荐）\"></a>LD_LIBRARY_PATH（不推荐）</h3><p><code>LD_LIBRARY_PATH</code> 是一个环境变量，作用是<strong>临时</strong>改变链接器的加载路径，可以存储多个路径，用冒号分隔：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> LD_LIBRARY_PATH=<span class=\"variable\">$LD_LIBRARY_PATH</span>:./libs</span><br></pre></td></tr></table></figure></p>\n<p>不推荐的原因：</p>\n<ol>\n<li>若全局设置 <code>LD_LIBRARY_PATH</code>，会影响其它应用程序的共享库加载过程；</li>\n<li>若只在该应用程序启动时局部设置 <code>LD_LIBRARY_PATH</code>，则每次启动都需要设置，步骤过于繁琐；</li>\n</ol>\n<h3 id=\"–disable-new-dtags\"><a href=\"#–disable-new-dtags\" class=\"headerlink\" title=\"–disable-new-dtags\"></a>–disable-new-dtags</h3><p>可以使用 <code>-Wl,--disable-new-dtags</code> 选项来使链接器保持旧行为，即在 <code>ubuntu 20.04(gcc version 9.3.0)</code> 使用如下命令编译：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -I. -o main main.c -Wl,--<span class=\"built_in\">disable</span>-new-dtags,--rpath,. -L. -lA -lB</span><br></pre></td></tr></table></figure></p>\n<p>重新运行并查看依赖：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./main </span><br><span class=\"line\">Hello, World</span><br><span class=\"line\"></span><br><span class=\"line\">$ readelf -d main</span><br><span class=\"line\">Dynamic section at offset 0x2da8 contains 29 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libA.so]</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class=\"line\"> 0x000000000000000f (RPATH)              Library rpath: [.]</span><br></pre></td></tr></table></figure></p>\n<p>可执行程序 <code>main</code> 可以正确运行，<code>RUNPATH</code> 也变成了 <code>RPATH</code>，链接器行为与 <code>ubuntu 16.04(gcc version 5.4.0)</code> 保持一致了。</p>\n<blockquote>\n<p>同理，也有 <code>-Wl,--enable-new-dtags</code> 选项来使链接器保持新行为</p>\n</blockquote>\n<p>如下为官方解释：<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-<span class=\"keyword\">new</span>-dtags</span><br><span class=\"line\">--disable-<span class=\"keyword\">new</span>-dtags</span><br><span class=\"line\">This linker can <span class=\"keyword\">create</span> the <span class=\"keyword\">new</span> <span class=\"keyword\">dynamic</span> tags <span class=\"keyword\">in</span> ELF. But the older ELF systems may <span class=\"keyword\">not</span> understand them. <span class=\"keyword\">If</span> you specify --enable-<span class=\"keyword\">new</span>-dtags, the <span class=\"keyword\">new</span> <span class=\"keyword\">dynamic</span> tags will be created <span class=\"keyword\">as</span> needed <span class=\"keyword\">and</span> older <span class=\"keyword\">dynamic</span> tags will be omitted. <span class=\"keyword\">If</span> you specify --disable-<span class=\"keyword\">new</span>-dtags, no <span class=\"keyword\">new</span> <span class=\"keyword\">dynamic</span> tags will be created. <span class=\"keyword\">By</span> <span class=\"keyword\">default</span>, the <span class=\"keyword\">new</span> <span class=\"keyword\">dynamic</span> tags are <span class=\"keyword\">not</span> created. Note that those options are only available <span class=\"keyword\">for</span> ELF systems.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/52018092/how-to-set-rpath-and-runpath-with-gcc-ld\" target=\"_blank\" rel=\"noopener\">How to set RPATH and RUNPATH with GCC/LD?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/7967848/use-rpath-but-not-runpath\" target=\"_blank\" rel=\"noopener\">use RPATH but not RUNPATH?</a></li>\n</ul>\n<hr>\n<p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>"},{"title":"GCC编译ARM篇","Antuor":"AnSwEr(Weijie Yuan)","toc":true,"date":"2017-08-04T08:30:40.000Z","_content":"\n`ARM` 平台下`GCC`编译相关介绍，待补充\n<!--more-->\n\n## ARM处理器架构\n`ARM`处理器架构，通过选项`-march`指定，如`-march=armv7-a`，常见的有\n1. `armv5te`\n`arm9`系列使用该架构\n2. ` armv6`\n`arm11`系列使用该架构\n3. `armv7-a`\n`cortex-a`系列使用该架构，如`cortex-a5、a7、a8、a9、a12、a15`\n4. `armv8`\n`cortex-a`系列使用该架构，如`cortex-a53、a57、a72`\n\n## 指令集\n指令集，通过选项`-m`指定，如`-mthumb`，常见的有\n1. `thumb`\n16位指令集，它将32位arm指令的压缩成16位的指令编码方式，节省代码存储空间，实现低功耗\n2. `thumb-2`\n16位/32位指令集，对`thumb`指令集进行了扩充，增加了一些32位指令，改善`thumb`指令集的性能\n3. `arm`\n32位指令集, 兼容所有`arm`架构，性能高\n\n## 浮点类型\n浮点运算的类型，通过选项`-mfloat-abi`指定，如`-mfloat-abi=hard`，有三种类型\n1. `soft`\n使用软浮点库进行浮点运算，不使用硬浮点单元，适用于不含`FPU`的`CPU`\n2. `softfp`\n使用硬浮点单元进行浮点运算，生成硬浮点指令，调用接口的规则和`soft`兼容\n3. `hard`\n使用硬浮点单元进行浮点运算，生成硬浮点指令，与`softfp`的区别在于调用接口的规则不同\n\n硬浮点指令的类型，通过选项`-mfpu`指定，如`-mfpu=neon`，常用的有两种\n1. `vfp`\n其中`vfpv2`应用于`armv5te, armv6`架构中的浮点计算指令集，`vfpv3`和`vfpv4`应用于部分`armv7a`架构中的浮点计算指令集\n2. `neon`\n应用于`cortex-a`系列处理器，性能好\n\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/gcc-compilation-of-arm-articles.md","raw":"---\ntitle: GCC编译ARM篇\nAntuor: AnSwEr(Weijie Yuan)\ntoc: true\ndate: 2017-08-04 16:30:40\ncategories: 编译链接\ntags: gcc\n---\n\n`ARM` 平台下`GCC`编译相关介绍，待补充\n<!--more-->\n\n## ARM处理器架构\n`ARM`处理器架构，通过选项`-march`指定，如`-march=armv7-a`，常见的有\n1. `armv5te`\n`arm9`系列使用该架构\n2. ` armv6`\n`arm11`系列使用该架构\n3. `armv7-a`\n`cortex-a`系列使用该架构，如`cortex-a5、a7、a8、a9、a12、a15`\n4. `armv8`\n`cortex-a`系列使用该架构，如`cortex-a53、a57、a72`\n\n## 指令集\n指令集，通过选项`-m`指定，如`-mthumb`，常见的有\n1. `thumb`\n16位指令集，它将32位arm指令的压缩成16位的指令编码方式，节省代码存储空间，实现低功耗\n2. `thumb-2`\n16位/32位指令集，对`thumb`指令集进行了扩充，增加了一些32位指令，改善`thumb`指令集的性能\n3. `arm`\n32位指令集, 兼容所有`arm`架构，性能高\n\n## 浮点类型\n浮点运算的类型，通过选项`-mfloat-abi`指定，如`-mfloat-abi=hard`，有三种类型\n1. `soft`\n使用软浮点库进行浮点运算，不使用硬浮点单元，适用于不含`FPU`的`CPU`\n2. `softfp`\n使用硬浮点单元进行浮点运算，生成硬浮点指令，调用接口的规则和`soft`兼容\n3. `hard`\n使用硬浮点单元进行浮点运算，生成硬浮点指令，与`softfp`的区别在于调用接口的规则不同\n\n硬浮点指令的类型，通过选项`-mfpu`指定，如`-mfpu=neon`，常用的有两种\n1. `vfp`\n其中`vfpv2`应用于`armv5te, armv6`架构中的浮点计算指令集，`vfpv3`和`vfpv4`应用于部分`armv7a`架构中的浮点计算指令集\n2. `neon`\n应用于`cortex-a`系列处理器，性能好\n\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"gcc-compilation-of-arm-articles","published":1,"updated":"2020-07-21T01:40:07.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklumqgeo001579n58mldib35","content":"<p><code>ARM</code> 平台下<code>GCC</code>编译相关介绍，待补充<br><a id=\"more\"></a></p>\n<h2 id=\"ARM处理器架构\"><a href=\"#ARM处理器架构\" class=\"headerlink\" title=\"ARM处理器架构\"></a>ARM处理器架构</h2><p><code>ARM</code>处理器架构，通过选项<code>-march</code>指定，如<code>-march=armv7-a</code>，常见的有</p>\n<ol>\n<li><code>armv5te</code><br><code>arm9</code>系列使用该架构</li>\n<li><code>armv6</code><br><code>arm11</code>系列使用该架构</li>\n<li><code>armv7-a</code><br><code>cortex-a</code>系列使用该架构，如<code>cortex-a5、a7、a8、a9、a12、a15</code></li>\n<li><code>armv8</code><br><code>cortex-a</code>系列使用该架构，如<code>cortex-a53、a57、a72</code></li>\n</ol>\n<h2 id=\"指令集\"><a href=\"#指令集\" class=\"headerlink\" title=\"指令集\"></a>指令集</h2><p>指令集，通过选项<code>-m</code>指定，如<code>-mthumb</code>，常见的有</p>\n<ol>\n<li><code>thumb</code><br>16位指令集，它将32位arm指令的压缩成16位的指令编码方式，节省代码存储空间，实现低功耗</li>\n<li><code>thumb-2</code><br>16位/32位指令集，对<code>thumb</code>指令集进行了扩充，增加了一些32位指令，改善<code>thumb</code>指令集的性能</li>\n<li><code>arm</code><br>32位指令集, 兼容所有<code>arm</code>架构，性能高</li>\n</ol>\n<h2 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h2><p>浮点运算的类型，通过选项<code>-mfloat-abi</code>指定，如<code>-mfloat-abi=hard</code>，有三种类型</p>\n<ol>\n<li><code>soft</code><br>使用软浮点库进行浮点运算，不使用硬浮点单元，适用于不含<code>FPU</code>的<code>CPU</code></li>\n<li><code>softfp</code><br>使用硬浮点单元进行浮点运算，生成硬浮点指令，调用接口的规则和<code>soft</code>兼容</li>\n<li><code>hard</code><br>使用硬浮点单元进行浮点运算，生成硬浮点指令，与<code>softfp</code>的区别在于调用接口的规则不同</li>\n</ol>\n<p>硬浮点指令的类型，通过选项<code>-mfpu</code>指定，如<code>-mfpu=neon</code>，常用的有两种</p>\n<ol>\n<li><code>vfp</code><br>其中<code>vfpv2</code>应用于<code>armv5te, armv6</code>架构中的浮点计算指令集，<code>vfpv3</code>和<code>vfpv4</code>应用于部分<code>armv7a</code>架构中的浮点计算指令集</li>\n<li><code>neon</code><br>应用于<code>cortex-a</code>系列处理器，性能好</li>\n</ol>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p><code>ARM</code> 平台下<code>GCC</code>编译相关介绍，待补充<br></p>","more":"<p></p>\n<h2 id=\"ARM处理器架构\"><a href=\"#ARM处理器架构\" class=\"headerlink\" title=\"ARM处理器架构\"></a>ARM处理器架构</h2><p><code>ARM</code>处理器架构，通过选项<code>-march</code>指定，如<code>-march=armv7-a</code>，常见的有</p>\n<ol>\n<li><code>armv5te</code><br><code>arm9</code>系列使用该架构</li>\n<li><code>armv6</code><br><code>arm11</code>系列使用该架构</li>\n<li><code>armv7-a</code><br><code>cortex-a</code>系列使用该架构，如<code>cortex-a5、a7、a8、a9、a12、a15</code></li>\n<li><code>armv8</code><br><code>cortex-a</code>系列使用该架构，如<code>cortex-a53、a57、a72</code></li>\n</ol>\n<h2 id=\"指令集\"><a href=\"#指令集\" class=\"headerlink\" title=\"指令集\"></a>指令集</h2><p>指令集，通过选项<code>-m</code>指定，如<code>-mthumb</code>，常见的有</p>\n<ol>\n<li><code>thumb</code><br>16位指令集，它将32位arm指令的压缩成16位的指令编码方式，节省代码存储空间，实现低功耗</li>\n<li><code>thumb-2</code><br>16位/32位指令集，对<code>thumb</code>指令集进行了扩充，增加了一些32位指令，改善<code>thumb</code>指令集的性能</li>\n<li><code>arm</code><br>32位指令集, 兼容所有<code>arm</code>架构，性能高</li>\n</ol>\n<h2 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h2><p>浮点运算的类型，通过选项<code>-mfloat-abi</code>指定，如<code>-mfloat-abi=hard</code>，有三种类型</p>\n<ol>\n<li><code>soft</code><br>使用软浮点库进行浮点运算，不使用硬浮点单元，适用于不含<code>FPU</code>的<code>CPU</code></li>\n<li><code>softfp</code><br>使用硬浮点单元进行浮点运算，生成硬浮点指令，调用接口的规则和<code>soft</code>兼容</li>\n<li><code>hard</code><br>使用硬浮点单元进行浮点运算，生成硬浮点指令，与<code>softfp</code>的区别在于调用接口的规则不同</li>\n</ol>\n<p>硬浮点指令的类型，通过选项<code>-mfpu</code>指定，如<code>-mfpu=neon</code>，常用的有两种</p>\n<ol>\n<li><code>vfp</code><br>其中<code>vfpv2</code>应用于<code>armv5te, armv6</code>架构中的浮点计算指令集，<code>vfpv3</code>和<code>vfpv4</code>应用于部分<code>armv7a</code>架构中的浮点计算指令集</li>\n<li><code>neon</code><br>应用于<code>cortex-a</code>系列处理器，性能好</li>\n</ol>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"C语言生成随机数","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T06:16:51.000Z","_content":"\n本文将介绍C语言生成随机数的方法,主要使用 *rand()* 函数和 *srand()* 函数.\n\n----------\n<!--more-->\n\n## rand函数\n\n### 函数介绍\n*rand()*函数是产生随机数的一个随机函数：\n```\n#include<stdlib.h>\n\nint rand(void);\n```\n返回值：\n*rand()*返回值为一随机数值，范围在0至RAND_MAX 间（RAND_MAX定义在stdlib.h，其值为2147483647）。\n\n>**注：**在调用此函数前，必须先利用srand()设好随机数种子。如果未设随机数种子，rand()在调用时会自动设随机数种子为1。\n\n### 示例一：\n代码：\n```\n/*************************************************************************\n\t> File Name: rand.c\n\t> Author: AnSwEr\n\t> Mail: 1045837697@qq.com\n\t> Created Time: 2015年10月24日 星期六 20时50分59秒\n ************************************************************************/\n\n/*\n * 产生1到6的随机数\n */\n\n#include<stdio.h>\n#include<stdlib.h>\n\nint main(void)\n{\n    int i = 0;\n\n    for(i=0;i<10;i++)\n    {\n        printf(\"%d \",rand()%6+1);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```\n\n运行结果：\n![这里写图片描述](http://img.blog.csdn.net/20151024205732527)\n\n**说明：**这里两次运行的结果相同，是因为未利用*srand()*设置随机数种子，所以rand()在调用时会自动设随机数种子为1。\n\n## srand函数\n### 函数介绍\n*srand()*函数是随机数发生器的初始化函数：\n```\n#include<stdlib.h>\n\nvoid srand (unsigned int seed);\n```\n参数：\nseed必须是个整数，通常可以利用*geypid()*或*time(0)*的返回值来当做seed。如果每次seed都设相同值，那么*rand()*所产生的随机数值会像上面的示例一每次就会一样。\n\n### 示例二：\n代码：\n```\n/*************************************************************************\n\t> File Name: srand.c\n\t> Author: AnSwEr\n\t> Mail: 1045837697@qq.com\n\t> Created Time: 2015年10月24日 星期六 21时01分58秒\n ************************************************************************/\n\n/*\n * 产生1-6的随机数\n */\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\nint main(void)\n{\n    int i = 0;\n\n    srand((unsigned int)time(NULL));\n    for(i=0;i<10;i++)\n    {\n        printf(\"%d \",rand()%6+1);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```\n\n运行结果：\n![这里写图片描述](http://img.blog.csdn.net/20151024210616461)\n\n哈哈，这下两次结果就不同了吧。\n\n## 总结\n关于随机数的知识就先总结这么多，以后碰到更复杂的再继续。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","source":"_posts/generate-random-numbers.md","raw":"---\ntitle: C语言生成随机数\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - 随机数\ndate: 2016-07-14 14:16:51\ncategories: C/C++\n---\n\n本文将介绍C语言生成随机数的方法,主要使用 *rand()* 函数和 *srand()* 函数.\n\n----------\n<!--more-->\n\n## rand函数\n\n### 函数介绍\n*rand()*函数是产生随机数的一个随机函数：\n```\n#include<stdlib.h>\n\nint rand(void);\n```\n返回值：\n*rand()*返回值为一随机数值，范围在0至RAND_MAX 间（RAND_MAX定义在stdlib.h，其值为2147483647）。\n\n>**注：**在调用此函数前，必须先利用srand()设好随机数种子。如果未设随机数种子，rand()在调用时会自动设随机数种子为1。\n\n### 示例一：\n代码：\n```\n/*************************************************************************\n\t> File Name: rand.c\n\t> Author: AnSwEr\n\t> Mail: 1045837697@qq.com\n\t> Created Time: 2015年10月24日 星期六 20时50分59秒\n ************************************************************************/\n\n/*\n * 产生1到6的随机数\n */\n\n#include<stdio.h>\n#include<stdlib.h>\n\nint main(void)\n{\n    int i = 0;\n\n    for(i=0;i<10;i++)\n    {\n        printf(\"%d \",rand()%6+1);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```\n\n运行结果：\n![这里写图片描述](http://img.blog.csdn.net/20151024205732527)\n\n**说明：**这里两次运行的结果相同，是因为未利用*srand()*设置随机数种子，所以rand()在调用时会自动设随机数种子为1。\n\n## srand函数\n### 函数介绍\n*srand()*函数是随机数发生器的初始化函数：\n```\n#include<stdlib.h>\n\nvoid srand (unsigned int seed);\n```\n参数：\nseed必须是个整数，通常可以利用*geypid()*或*time(0)*的返回值来当做seed。如果每次seed都设相同值，那么*rand()*所产生的随机数值会像上面的示例一每次就会一样。\n\n### 示例二：\n代码：\n```\n/*************************************************************************\n\t> File Name: srand.c\n\t> Author: AnSwEr\n\t> Mail: 1045837697@qq.com\n\t> Created Time: 2015年10月24日 星期六 21时01分58秒\n ************************************************************************/\n\n/*\n * 产生1-6的随机数\n */\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\nint main(void)\n{\n    int i = 0;\n\n    srand((unsigned int)time(NULL));\n    for(i=0;i<10;i++)\n    {\n        printf(\"%d \",rand()%6+1);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```\n\n运行结果：\n![这里写图片描述](http://img.blog.csdn.net/20151024210616461)\n\n哈哈，这下两次结果就不同了吧。\n\n## 总结\n关于随机数的知识就先总结这么多，以后碰到更复杂的再继续。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","slug":"generate-random-numbers","published":1,"updated":"2019-07-24T03:27:04.254Z","layout":"post","photos":[],"link":"","_id":"cklumqgep001879n54hm7vd3u","content":"<p>本文将介绍C语言生成随机数的方法,主要使用 <em>rand()</em> 函数和 <em>srand()</em> 函数.</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"rand函数\"><a href=\"#rand函数\" class=\"headerlink\" title=\"rand函数\"></a>rand函数</h2><h3 id=\"函数介绍\"><a href=\"#函数介绍\" class=\"headerlink\" title=\"函数介绍\"></a>函数介绍</h3><p><em>rand()</em>函数是产生随机数的一个随机函数：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rand</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>返回值：<br><em>rand()</em>返回值为一随机数值，范围在0至RAND_MAX 间（RAND_MAX定义在stdlib.h，其值为2147483647）。</p>\n<blockquote>\n<p><strong>注：</strong>在调用此函数前，必须先利用srand()设好随机数种子。如果未设随机数种子，rand()在调用时会自动设随机数种子为1。</p>\n</blockquote>\n<h3 id=\"示例一：\"><a href=\"#示例一：\" class=\"headerlink\" title=\"示例一：\"></a>示例一：</h3><p>代码：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; File Name: rand.c</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Author: AnSwEr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Mail: 1045837697@qq.com</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Created Time: 2015年10月24日 星期六 20时50分59秒</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span>**/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 产生1到6的随机数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%d \"</span>,rand()%<span class=\"number\">6</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><img src=\"http://img.blog.csdn.net/20151024205732527\" alt=\"这里写图片描述\"></p>\n<p><strong>说明：</strong>这里两次运行的结果相同，是因为未利用<em>srand()</em>设置随机数种子，所以rand()在调用时会自动设随机数种子为1。</p>\n<h2 id=\"srand函数\"><a href=\"#srand函数\" class=\"headerlink\" title=\"srand函数\"></a>srand函数</h2><h3 id=\"函数介绍-1\"><a href=\"#函数介绍-1\" class=\"headerlink\" title=\"函数介绍\"></a>函数介绍</h3><p><em>srand()</em>函数是随机数发生器的初始化函数：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">srand</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> seed)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>参数：<br>seed必须是个整数，通常可以利用<em>geypid()</em>或<em>time(0)</em>的返回值来当做seed。如果每次seed都设相同值，那么<em>rand()</em>所产生的随机数值会像上面的示例一每次就会一样。</p>\n<h3 id=\"示例二：\"><a href=\"#示例二：\" class=\"headerlink\" title=\"示例二：\"></a>示例二：</h3><p>代码：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; File Name: srand.c</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Author: AnSwEr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Mail: 1045837697@qq.com</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Created Time: 2015年10月24日 星期六 21时01分58秒</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span>**/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 产生1-6的随机数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;time.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    srand((unsigned <span class=\"built_in\">int</span>)time(NULL));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%d \"</span>,rand()%<span class=\"number\">6</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><img src=\"http://img.blog.csdn.net/20151024210616461\" alt=\"这里写图片描述\"></p>\n<p>哈哈，这下两次结果就不同了吧。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关于随机数的知识就先总结这么多，以后碰到更复杂的再继续。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍C语言生成随机数的方法,主要使用 <em>rand()</em> 函数和 <em>srand()</em> 函数.</p>\n<hr>","more":"<h2 id=\"rand函数\"><a href=\"#rand函数\" class=\"headerlink\" title=\"rand函数\"></a>rand函数</h2><h3 id=\"函数介绍\"><a href=\"#函数介绍\" class=\"headerlink\" title=\"函数介绍\"></a>函数介绍</h3><p><em>rand()</em>函数是产生随机数的一个随机函数：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rand</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>返回值：<br><em>rand()</em>返回值为一随机数值，范围在0至RAND_MAX 间（RAND_MAX定义在stdlib.h，其值为2147483647）。</p>\n<blockquote>\n<p><strong>注：</strong>在调用此函数前，必须先利用srand()设好随机数种子。如果未设随机数种子，rand()在调用时会自动设随机数种子为1。</p>\n</blockquote>\n<h3 id=\"示例一：\"><a href=\"#示例一：\" class=\"headerlink\" title=\"示例一：\"></a>示例一：</h3><p>代码：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; File Name: rand.c</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Author: AnSwEr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Mail: 1045837697@qq.com</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Created Time: 2015年10月24日 星期六 20时50分59秒</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span>**/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 产生1到6的随机数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%d \"</span>,rand()%<span class=\"number\">6</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><img src=\"http://img.blog.csdn.net/20151024205732527\" alt=\"这里写图片描述\"></p>\n<p><strong>说明：</strong>这里两次运行的结果相同，是因为未利用<em>srand()</em>设置随机数种子，所以rand()在调用时会自动设随机数种子为1。</p>\n<h2 id=\"srand函数\"><a href=\"#srand函数\" class=\"headerlink\" title=\"srand函数\"></a>srand函数</h2><h3 id=\"函数介绍-1\"><a href=\"#函数介绍-1\" class=\"headerlink\" title=\"函数介绍\"></a>函数介绍</h3><p><em>srand()</em>函数是随机数发生器的初始化函数：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">srand</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> seed)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>参数：<br>seed必须是个整数，通常可以利用<em>geypid()</em>或<em>time(0)</em>的返回值来当做seed。如果每次seed都设相同值，那么<em>rand()</em>所产生的随机数值会像上面的示例一每次就会一样。</p>\n<h3 id=\"示例二：\"><a href=\"#示例二：\" class=\"headerlink\" title=\"示例二：\"></a>示例二：</h3><p>代码：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; File Name: srand.c</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Author: AnSwEr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Mail: 1045837697@qq.com</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">\t&gt; Created Time: 2015年10月24日 星期六 21时01分58秒</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span>**/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 产生1-6的随机数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;time.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    srand((unsigned <span class=\"built_in\">int</span>)time(NULL));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%d \"</span>,rand()%<span class=\"number\">6</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><img src=\"http://img.blog.csdn.net/20151024210616461\" alt=\"这里写图片描述\"></p>\n<p>哈哈，这下两次结果就不同了吧。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关于随机数的知识就先总结这么多，以后碰到更复杂的再继续。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"从文件流中读写整数--C语言","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-12-06T06:16:51.000Z","_content":"\n本文将介绍在文本流中,读写整数的两个接口-- ``int getw(FILE *fp)``和``int putw(int w, FILE *fp)``,并且与你分享改进后的更实用的接口-- ``unsigned int get_uint(FILE *fp)``和``unsigned int put_uint(unsigned int i,FILE *fp)``.\n\n----------\n<!--more-->\n\n## 从文件流中读写整数--C语言\n我们都知道,数据在计算机内存中都是以二进制的形式存储的,大多数PC的存储方式为小端存储,关于大小端字节序的讨论请参考[阮一峰的理解字节序](http://www.ruanyifeng.com/blog/2016/11/byte-order.html). 如果想直接读写整数,并不是很方便,这里就为你介绍两个接口,需要注意的是这两个接口非ANSI标准函数.\n\n### getw \n函数原型：\n```\nint getw(FILE *fp);\n```\n函数功能：\n```\n从fp所指向文件读取下一个整数.\n```\n返回值：\n```\n返回输入的整数,如果文件结束或者出错返回-1.\n```\n\n### putw\n函数原型：\n```\nint putw(int w, FILE *fp);\n```\n函数功能：\n```\n将整型w写进fp指向的文件.\n```\n返回值：\n```\n返回输出的整数,如果出错,则返回EOF.\n```\n\n### 应用\n代码:\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc,char *argv[])\n{\n\tFILE *fp = NULL;\n    int num[2] = {-2147483648,2147483647};\n    \n    fp = fopen(\"./log\", \"wb\");\n    if (fp == NULL)\n    {\n        fprintf(stderr,\"open file failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    putw(num[0],fp);\n    putw(num[1],fp);\n\n    fclose(fp);\n    fp = NULL;\n    \n    fp = fopen(\"./log\", \"rb\");\n    if (fp == NULL)\n    {\n        fprintf(stderr,\"open file failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"%d %d\\n\",getw(fp),getw(fp));\n\n    fclose(fp);\n\tfp = NULL;\n\t\n    return 0;\n}\n```\n结果为:\n```\n$ 2147483647 -2147483648\n```\n> 注意: 函数参数的压栈顺序是从左到右的,所以最后一个参数``getw(fp)``在栈顶,第一个出栈执行.\n\n### 实现与改进([完整代码](https://github.com/AnSwErYWJ/DogFood/blob/master/C/file/io2stream.c))\n由于上述两个接口支持的是int型,所以取值范围为``-2147483648～2147483647``.(此文认为int型都为4个字节).笔者需要使用这两个接口去读写文件的大小,负数无用处的,所以决定改装一下这两个函数,顺便探究一下这个函数的实现:\n```\nunsigned int get_uint(FILE *fp)\n{\n    unsigned char *s;\n    unsigned int i;\n    s = (unsigned char *)&i;\n    s[0]=getc(fp);\n    printf(\"%x\\n\",s[0]);\n    s[1]=getc(fp);\n    printf(\"%x\\n\",s[1]);\n    s[2]=getc(fp);\n    printf(\"%x\\n\",s[2]);\n    s[3]=getc(fp);\n    printf(\"%x\\n\",s[3]);\n    return i;\n}\n```\n\n```\nunsigned int put_uint(unsigned int i,FILE *fp)\n{\n    unsigned char *s;\n    s=(unsigned char *)&i;\n    putc(s[0],fp);\n    //printf(\"%x\\n\",s[0]);\n    putc(s[1],fp);\n    //printf(\"%x\\n\",s[1]);\n    putc(s[2],fp);\n    //printf(\"%x\\n\",s[2]);\n    putc(s[3],fp);\n    //printf(\"%x\\n\",s[3]);\n    return i;\n}\n```\n\n>改进后取值范围为``0~4294967295``.\n\n同理,你也可以将这两个接口改为支持 ``long long``和``unsigned long int``等不同长度的整数类型.\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","source":"_posts/getw-and-putw.md","raw":"---\ntitle: 从文件流中读写整数--C语言\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - getw\ndate: 2016-12-06 14:16:51\ncategories: C/C++\n---\n\n本文将介绍在文本流中,读写整数的两个接口-- ``int getw(FILE *fp)``和``int putw(int w, FILE *fp)``,并且与你分享改进后的更实用的接口-- ``unsigned int get_uint(FILE *fp)``和``unsigned int put_uint(unsigned int i,FILE *fp)``.\n\n----------\n<!--more-->\n\n## 从文件流中读写整数--C语言\n我们都知道,数据在计算机内存中都是以二进制的形式存储的,大多数PC的存储方式为小端存储,关于大小端字节序的讨论请参考[阮一峰的理解字节序](http://www.ruanyifeng.com/blog/2016/11/byte-order.html). 如果想直接读写整数,并不是很方便,这里就为你介绍两个接口,需要注意的是这两个接口非ANSI标准函数.\n\n### getw \n函数原型：\n```\nint getw(FILE *fp);\n```\n函数功能：\n```\n从fp所指向文件读取下一个整数.\n```\n返回值：\n```\n返回输入的整数,如果文件结束或者出错返回-1.\n```\n\n### putw\n函数原型：\n```\nint putw(int w, FILE *fp);\n```\n函数功能：\n```\n将整型w写进fp指向的文件.\n```\n返回值：\n```\n返回输出的整数,如果出错,则返回EOF.\n```\n\n### 应用\n代码:\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc,char *argv[])\n{\n\tFILE *fp = NULL;\n    int num[2] = {-2147483648,2147483647};\n    \n    fp = fopen(\"./log\", \"wb\");\n    if (fp == NULL)\n    {\n        fprintf(stderr,\"open file failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    putw(num[0],fp);\n    putw(num[1],fp);\n\n    fclose(fp);\n    fp = NULL;\n    \n    fp = fopen(\"./log\", \"rb\");\n    if (fp == NULL)\n    {\n        fprintf(stderr,\"open file failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"%d %d\\n\",getw(fp),getw(fp));\n\n    fclose(fp);\n\tfp = NULL;\n\t\n    return 0;\n}\n```\n结果为:\n```\n$ 2147483647 -2147483648\n```\n> 注意: 函数参数的压栈顺序是从左到右的,所以最后一个参数``getw(fp)``在栈顶,第一个出栈执行.\n\n### 实现与改进([完整代码](https://github.com/AnSwErYWJ/DogFood/blob/master/C/file/io2stream.c))\n由于上述两个接口支持的是int型,所以取值范围为``-2147483648～2147483647``.(此文认为int型都为4个字节).笔者需要使用这两个接口去读写文件的大小,负数无用处的,所以决定改装一下这两个函数,顺便探究一下这个函数的实现:\n```\nunsigned int get_uint(FILE *fp)\n{\n    unsigned char *s;\n    unsigned int i;\n    s = (unsigned char *)&i;\n    s[0]=getc(fp);\n    printf(\"%x\\n\",s[0]);\n    s[1]=getc(fp);\n    printf(\"%x\\n\",s[1]);\n    s[2]=getc(fp);\n    printf(\"%x\\n\",s[2]);\n    s[3]=getc(fp);\n    printf(\"%x\\n\",s[3]);\n    return i;\n}\n```\n\n```\nunsigned int put_uint(unsigned int i,FILE *fp)\n{\n    unsigned char *s;\n    s=(unsigned char *)&i;\n    putc(s[0],fp);\n    //printf(\"%x\\n\",s[0]);\n    putc(s[1],fp);\n    //printf(\"%x\\n\",s[1]);\n    putc(s[2],fp);\n    //printf(\"%x\\n\",s[2]);\n    putc(s[3],fp);\n    //printf(\"%x\\n\",s[3]);\n    return i;\n}\n```\n\n>改进后取值范围为``0~4294967295``.\n\n同理,你也可以将这两个接口改为支持 ``long long``和``unsigned long int``等不同长度的整数类型.\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","slug":"getw-and-putw","published":1,"updated":"2019-07-24T03:26:59.895Z","layout":"post","photos":[],"link":"","_id":"cklumqgeq001b79n5lhdhow0x","content":"<p>本文将介绍在文本流中,读写整数的两个接口– <code>int getw(FILE *fp)</code>和<code>int putw(int w, FILE *fp)</code>,并且与你分享改进后的更实用的接口– <code>unsigned int get_uint(FILE *fp)</code>和<code>unsigned int put_uint(unsigned int i,FILE *fp)</code>.</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"从文件流中读写整数–C语言\"><a href=\"#从文件流中读写整数–C语言\" class=\"headerlink\" title=\"从文件流中读写整数–C语言\"></a>从文件流中读写整数–C语言</h2><p>我们都知道,数据在计算机内存中都是以二进制的形式存储的,大多数PC的存储方式为小端存储,关于大小端字节序的讨论请参考<a href=\"http://www.ruanyifeng.com/blog/2016/11/byte-order.html\" target=\"_blank\" rel=\"noopener\">阮一峰的理解字节序</a>. 如果想直接读写整数,并不是很方便,这里就为你介绍两个接口,需要注意的是这两个接口非ANSI标准函数.</p>\n<h3 id=\"getw\"><a href=\"#getw\" class=\"headerlink\" title=\"getw\"></a>getw</h3><p>函数原型：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getw</span><span class=\"params\">(FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>函数功能：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从<span class=\"built_in\">fp</span>所指向文件读取下一个整数.</span><br></pre></td></tr></table></figure></p>\n<p>返回值：<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回输入的整数,如果文件结束或者出错返回-<span class=\"number\">1</span>.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"putw\"><a href=\"#putw\" class=\"headerlink\" title=\"putw\"></a>putw</h3><p>函数原型：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">putw</span><span class=\"params\">(<span class=\"keyword\">int</span> w, FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>函数功能：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将整型w写进<span class=\"built_in\">fp</span>指向的文件.</span><br></pre></td></tr></table></figure></p>\n<p>返回值：<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回输出的整数,如果出错,则返回EOF.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>代码:<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc,char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE *<span class=\"built_in\">fp</span> = NULL<span class=\"comment\">;</span></span><br><span class=\"line\">    int num[<span class=\"number\">2</span>] = &#123;-<span class=\"number\">2147483648</span>,<span class=\"number\">2147483647</span>&#125;<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fp</span> = fopen(<span class=\"string\">\"./log\"</span>, <span class=\"string\">\"wb\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    if (<span class=\"built_in\">fp</span> == NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fprintf(stderr,<span class=\"string\">\"open file failed\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        exit(EXIT_FAILURE)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    putw(num[<span class=\"number\">0</span>],<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    putw(num[<span class=\"number\">1</span>],<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fclose(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">fp</span> = NULL<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fp</span> = fopen(<span class=\"string\">\"./log\"</span>, <span class=\"string\">\"rb\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    if (<span class=\"built_in\">fp</span> == NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fprintf(stderr,<span class=\"string\">\"open file failed\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        exit(EXIT_FAILURE)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(<span class=\"string\">\"%d %d\\n\"</span>,getw(<span class=\"built_in\">fp</span>),getw(<span class=\"built_in\">fp</span>))<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fclose(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"built_in\">fp</span> = NULL<span class=\"comment\">;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    return <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果为:<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"number\">2147483647</span> -<span class=\"number\">2147483648</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意: 函数参数的压栈顺序是从左到右的,所以最后一个参数<code>getw(fp)</code>在栈顶,第一个出栈执行.</p>\n</blockquote>\n<h3 id=\"实现与改进-完整代码\"><a href=\"#实现与改进-完整代码\" class=\"headerlink\" title=\"实现与改进(完整代码)\"></a>实现与改进(<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/file/io2stream.c\" target=\"_blank\" rel=\"noopener\">完整代码</a>)</h3><p>由于上述两个接口支持的是int型,所以取值范围为<code>-2147483648～2147483647</code>.(此文认为int型都为4个字节).笔者需要使用这两个接口去读写文件的大小,负数无用处的,所以决定改装一下这两个函数,顺便探究一下这个函数的实现:<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int get_uint(FILE *<span class=\"built_in\">fp</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *s<span class=\"comment\">;</span></span><br><span class=\"line\">    unsigned int i<span class=\"comment\">;</span></span><br><span class=\"line\">    s = (unsigned char *)&amp;i<span class=\"comment\">;</span></span><br><span class=\"line\">    s[<span class=\"number\">0</span>]=getc(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"%x\\n\"</span>,s[<span class=\"number\">0</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">    s[<span class=\"number\">1</span>]=getc(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"%x\\n\"</span>,s[<span class=\"number\">1</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">    s[<span class=\"number\">2</span>]=getc(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"%x\\n\"</span>,s[<span class=\"number\">2</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">    s[<span class=\"number\">3</span>]=getc(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"%x\\n\"</span>,s[<span class=\"number\">3</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">    return i<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">put_uint</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i,FILE *fp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *s;</span><br><span class=\"line\">    s=(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&amp;i;</span><br><span class=\"line\">    putc(s[<span class=\"number\">0</span>],fp);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"%x\\n\",s[0]);</span></span><br><span class=\"line\">    putc(s[<span class=\"number\">1</span>],fp);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"%x\\n\",s[1]);</span></span><br><span class=\"line\">    putc(s[<span class=\"number\">2</span>],fp);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"%x\\n\",s[2]);</span></span><br><span class=\"line\">    putc(s[<span class=\"number\">3</span>],fp);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"%x\\n\",s[3]);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>改进后取值范围为<code>0~4294967295</code>.</p>\n</blockquote>\n<p>同理,你也可以将这两个接口改为支持 <code>long long</code>和<code>unsigned long int</code>等不同长度的整数类型.</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍在文本流中,读写整数的两个接口– <code>int getw(FILE *fp)</code>和<code>int putw(int w, FILE *fp)</code>,并且与你分享改进后的更实用的接口– <code>unsigned int get_uint(FILE *fp)</code>和<code>unsigned int put_uint(unsigned int i,FILE *fp)</code>.</p>\n<hr>","more":"<h2 id=\"从文件流中读写整数–C语言\"><a href=\"#从文件流中读写整数–C语言\" class=\"headerlink\" title=\"从文件流中读写整数–C语言\"></a>从文件流中读写整数–C语言</h2><p>我们都知道,数据在计算机内存中都是以二进制的形式存储的,大多数PC的存储方式为小端存储,关于大小端字节序的讨论请参考<a href=\"http://www.ruanyifeng.com/blog/2016/11/byte-order.html\" target=\"_blank\" rel=\"noopener\">阮一峰的理解字节序</a>. 如果想直接读写整数,并不是很方便,这里就为你介绍两个接口,需要注意的是这两个接口非ANSI标准函数.</p>\n<h3 id=\"getw\"><a href=\"#getw\" class=\"headerlink\" title=\"getw\"></a>getw</h3><p>函数原型：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getw</span><span class=\"params\">(FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>函数功能：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从<span class=\"built_in\">fp</span>所指向文件读取下一个整数.</span><br></pre></td></tr></table></figure></p>\n<p>返回值：<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回输入的整数,如果文件结束或者出错返回-<span class=\"number\">1</span>.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"putw\"><a href=\"#putw\" class=\"headerlink\" title=\"putw\"></a>putw</h3><p>函数原型：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">putw</span><span class=\"params\">(<span class=\"keyword\">int</span> w, FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>函数功能：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将整型w写进<span class=\"built_in\">fp</span>指向的文件.</span><br></pre></td></tr></table></figure></p>\n<p>返回值：<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回输出的整数,如果出错,则返回EOF.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>代码:<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc,char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE *<span class=\"built_in\">fp</span> = NULL<span class=\"comment\">;</span></span><br><span class=\"line\">    int num[<span class=\"number\">2</span>] = &#123;-<span class=\"number\">2147483648</span>,<span class=\"number\">2147483647</span>&#125;<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fp</span> = fopen(<span class=\"string\">\"./log\"</span>, <span class=\"string\">\"wb\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    if (<span class=\"built_in\">fp</span> == NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fprintf(stderr,<span class=\"string\">\"open file failed\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        exit(EXIT_FAILURE)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    putw(num[<span class=\"number\">0</span>],<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    putw(num[<span class=\"number\">1</span>],<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fclose(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">fp</span> = NULL<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fp</span> = fopen(<span class=\"string\">\"./log\"</span>, <span class=\"string\">\"rb\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    if (<span class=\"built_in\">fp</span> == NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fprintf(stderr,<span class=\"string\">\"open file failed\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        exit(EXIT_FAILURE)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(<span class=\"string\">\"%d %d\\n\"</span>,getw(<span class=\"built_in\">fp</span>),getw(<span class=\"built_in\">fp</span>))<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fclose(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"built_in\">fp</span> = NULL<span class=\"comment\">;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    return <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果为:<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"number\">2147483647</span> -<span class=\"number\">2147483648</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意: 函数参数的压栈顺序是从左到右的,所以最后一个参数<code>getw(fp)</code>在栈顶,第一个出栈执行.</p>\n</blockquote>\n<h3 id=\"实现与改进-完整代码\"><a href=\"#实现与改进-完整代码\" class=\"headerlink\" title=\"实现与改进(完整代码)\"></a>实现与改进(<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/file/io2stream.c\" target=\"_blank\" rel=\"noopener\">完整代码</a>)</h3><p>由于上述两个接口支持的是int型,所以取值范围为<code>-2147483648～2147483647</code>.(此文认为int型都为4个字节).笔者需要使用这两个接口去读写文件的大小,负数无用处的,所以决定改装一下这两个函数,顺便探究一下这个函数的实现:<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int get_uint(FILE *<span class=\"built_in\">fp</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *s<span class=\"comment\">;</span></span><br><span class=\"line\">    unsigned int i<span class=\"comment\">;</span></span><br><span class=\"line\">    s = (unsigned char *)&amp;i<span class=\"comment\">;</span></span><br><span class=\"line\">    s[<span class=\"number\">0</span>]=getc(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"%x\\n\"</span>,s[<span class=\"number\">0</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">    s[<span class=\"number\">1</span>]=getc(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"%x\\n\"</span>,s[<span class=\"number\">1</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">    s[<span class=\"number\">2</span>]=getc(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"%x\\n\"</span>,s[<span class=\"number\">2</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">    s[<span class=\"number\">3</span>]=getc(<span class=\"built_in\">fp</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"%x\\n\"</span>,s[<span class=\"number\">3</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">    return i<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">put_uint</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i,FILE *fp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *s;</span><br><span class=\"line\">    s=(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&amp;i;</span><br><span class=\"line\">    putc(s[<span class=\"number\">0</span>],fp);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"%x\\n\",s[0]);</span></span><br><span class=\"line\">    putc(s[<span class=\"number\">1</span>],fp);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"%x\\n\",s[1]);</span></span><br><span class=\"line\">    putc(s[<span class=\"number\">2</span>],fp);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"%x\\n\",s[2]);</span></span><br><span class=\"line\">    putc(s[<span class=\"number\">3</span>],fp);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"%x\\n\",s[3]);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>改进后取值范围为<code>0~4294967295</code>.</p>\n</blockquote>\n<p>同理,你也可以将这两个接口改为支持 <code>long long</code>和<code>unsigned long int</code>等不同长度的整数类型.</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Git仓库过大导致clone失败的解决方法","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2019-09-09T04:00:40.000Z","_content":"\n本文记录工作中遇到的`clone`大仓库失败的解决过程，以下问题与解决方案均基于`https`访问。\n\n----------\n\n<!--more-->\n\n## 错误一\n从`web`端查看仓库大小，大约`1.5G`左右，首先直接执行`git clone`，报错如下：\n```\nremote: Counting objects: 10994, done.\nremote: Compressing objects: 100% (3085/3085), done.\nerror: RPC failed; curl 56 GnuTLS recv error (-110): The TLS connection was non-properly terminated.\nfatal: The remote end hung up unexpectedly\nfatal: early EOF\nfatal: index-pack failed\n```\n\n### 增大postBuffer\n在增大`postBuffer`的同时，关闭`ssl`认证：\n```\n$ git config --global http.postBuffer 2048000000 # 设置为2G\n$ git config --global http.sslVerify false # 关闭sslVerify\n```\n设置成功后，重新`clone`，错误依旧。\n\n### 使用openssl替换gunssl\n1.安装相关依赖环境：\n```\n$ sudo apt-get install build-essential fakeroot dpkg-dev libcurl4-openssl-dev\n```\n\n2.获取git源码：\n```\n$ sudo apt-get source git\n```\n若出现如下错误：\n```\nE: You must put some 'source' URIs in your sources.list\n```\n则需要将设置->`Software & Updates`->`Ubuntu Software`->`Source code`勾选：\n![source_code](source_code.png)\n\n若出现如下错误：\n```\ncouldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied) [duplicate]\n```\n则需要更改权限：\n```\nsudo chown _apt /var/lib/update-notifier/package-data-downloads/partial/\n```\n\n3.安装`git`的依赖\n```\n$ sudo apt-get build-dep git\n```\n\n4.进入`git`目录，重新编译：\n```\n$ cd git-2.7.4/\n$ vim ./debian/control # 将libcurl4-gnutls-dev修改为libcurl4-openssl-dev\n$ vim ./debian/rules # 整行删除TEST=test\n$ sudo dpkg-buildpackage -rfakeroot -b -uc -us -j4 # 编译\n```\n\n5.回到上一级目录，安装编译好的安装包：\n```\n$ cd ..\n$ sudo dpkg -i git_2.7.4-0ubuntuxxx_amd64.deb # 安装包名字可能有所不同\n```\n\n执行完成如上步骤后，重新`clone`，发现依旧报错，请看错误二。\n\n## 错误二\n```\nremote: Counting objects: 10994, done.\nremote: Compressing objects: 100% (3085/3085), done.\nerror: RPC failed; curl 18 transfer closed with outstanding read data remaining\nfatal: The remote end hung up unexpectedly\nfatal: early EOF\nfatal: index-pack failed\n```\n\n重新确认`postBuffer`，配置确实生效了：\n```\n$ cat ~/.gitconfig\n\n[http]\n\tsslVerify = false\n\tpostBuffer = 2048000000\n```\n\n### 浅层clone\n晕，实在搞不定了，采取极端方法，首先`clone`一层：\n```\n$ git clone --depth=1 http://xxx.git\n```\n浅层`clone`成功后，再完整拉取：\n```\n$ git fetch --unshallow # 拉取完整当前分支\n$ git remote set-branches origin '*' # 追踪所有远程分支\n$ git fetch -v # 拉取所有远程分支\n```\n\n至此，终于成功地`clone`了一个完整的仓库。\n\n## Reference\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/git-clone-extra-large-project.md","raw":"---\ntitle: Git仓库过大导致clone失败的解决方法\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - git仓库过大\ndate: 2019-09-09 12:00:40\ncategories: Git\n---\n\n本文记录工作中遇到的`clone`大仓库失败的解决过程，以下问题与解决方案均基于`https`访问。\n\n----------\n\n<!--more-->\n\n## 错误一\n从`web`端查看仓库大小，大约`1.5G`左右，首先直接执行`git clone`，报错如下：\n```\nremote: Counting objects: 10994, done.\nremote: Compressing objects: 100% (3085/3085), done.\nerror: RPC failed; curl 56 GnuTLS recv error (-110): The TLS connection was non-properly terminated.\nfatal: The remote end hung up unexpectedly\nfatal: early EOF\nfatal: index-pack failed\n```\n\n### 增大postBuffer\n在增大`postBuffer`的同时，关闭`ssl`认证：\n```\n$ git config --global http.postBuffer 2048000000 # 设置为2G\n$ git config --global http.sslVerify false # 关闭sslVerify\n```\n设置成功后，重新`clone`，错误依旧。\n\n### 使用openssl替换gunssl\n1.安装相关依赖环境：\n```\n$ sudo apt-get install build-essential fakeroot dpkg-dev libcurl4-openssl-dev\n```\n\n2.获取git源码：\n```\n$ sudo apt-get source git\n```\n若出现如下错误：\n```\nE: You must put some 'source' URIs in your sources.list\n```\n则需要将设置->`Software & Updates`->`Ubuntu Software`->`Source code`勾选：\n![source_code](source_code.png)\n\n若出现如下错误：\n```\ncouldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied) [duplicate]\n```\n则需要更改权限：\n```\nsudo chown _apt /var/lib/update-notifier/package-data-downloads/partial/\n```\n\n3.安装`git`的依赖\n```\n$ sudo apt-get build-dep git\n```\n\n4.进入`git`目录，重新编译：\n```\n$ cd git-2.7.4/\n$ vim ./debian/control # 将libcurl4-gnutls-dev修改为libcurl4-openssl-dev\n$ vim ./debian/rules # 整行删除TEST=test\n$ sudo dpkg-buildpackage -rfakeroot -b -uc -us -j4 # 编译\n```\n\n5.回到上一级目录，安装编译好的安装包：\n```\n$ cd ..\n$ sudo dpkg -i git_2.7.4-0ubuntuxxx_amd64.deb # 安装包名字可能有所不同\n```\n\n执行完成如上步骤后，重新`clone`，发现依旧报错，请看错误二。\n\n## 错误二\n```\nremote: Counting objects: 10994, done.\nremote: Compressing objects: 100% (3085/3085), done.\nerror: RPC failed; curl 18 transfer closed with outstanding read data remaining\nfatal: The remote end hung up unexpectedly\nfatal: early EOF\nfatal: index-pack failed\n```\n\n重新确认`postBuffer`，配置确实生效了：\n```\n$ cat ~/.gitconfig\n\n[http]\n\tsslVerify = false\n\tpostBuffer = 2048000000\n```\n\n### 浅层clone\n晕，实在搞不定了，采取极端方法，首先`clone`一层：\n```\n$ git clone --depth=1 http://xxx.git\n```\n浅层`clone`成功后，再完整拉取：\n```\n$ git fetch --unshallow # 拉取完整当前分支\n$ git remote set-branches origin '*' # 追踪所有远程分支\n$ git fetch -v # 拉取所有远程分支\n```\n\n至此，终于成功地`clone`了一个完整的仓库。\n\n## Reference\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"git-clone-extra-large-project","published":1,"updated":"2019-09-09T10:57:31.028Z","layout":"post","photos":[],"link":"","_id":"cklumqger001e79n5izpboogj","content":"<p>本文记录工作中遇到的<code>clone</code>大仓库失败的解决过程，以下问题与解决方案均基于<code>https</code>访问。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"错误一\"><a href=\"#错误一\" class=\"headerlink\" title=\"错误一\"></a>错误一</h2><p>从<code>web</code>端查看仓库大小，大约<code>1.5G</code>左右，首先直接执行<code>git clone</code>，报错如下：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Counting objects: 10994, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (3085/3085), done.</span><br><span class=\"line\">error: RPC failed; curl 56 GnuTLS recv <span class=\"builtin-name\">error</span> (-110): The TLS<span class=\"built_in\"> connection </span>was non-properly terminated.</span><br><span class=\"line\">fatal: The remote end hung up unexpectedly</span><br><span class=\"line\">fatal: early EOF</span><br><span class=\"line\">fatal: index-pack failed</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"增大postBuffer\"><a href=\"#增大postBuffer\" class=\"headerlink\" title=\"增大postBuffer\"></a>增大postBuffer</h3><p>在增大<code>postBuffer</code>的同时，关闭<code>ssl</code>认证：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global http.postBuffer 2048000000 # 设置为2G</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global http.sslVerify <span class=\"literal\">false</span> # 关闭sslVerify</span><br></pre></td></tr></table></figure></p>\n<p>设置成功后，重新<code>clone</code>，错误依旧。</p>\n<h3 id=\"使用openssl替换gunssl\"><a href=\"#使用openssl替换gunssl\" class=\"headerlink\" title=\"使用openssl替换gunssl\"></a>使用openssl替换gunssl</h3><p>1.安装相关依赖环境：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"built_in\">get</span> install build-essential fakeroot dpkg-<span class=\"built_in\">dev</span> libcurl4-openssl-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure></p>\n<p>2.获取git源码：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"builtin-name\">get</span> source git</span><br></pre></td></tr></table></figure></p>\n<p>若出现如下错误：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: You must <span class=\"keyword\">put</span> <span class=\"keyword\">some</span> 'source' URIs <span class=\"keyword\">in</span> your sources.<span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure></p>\n<p>则需要将设置-&gt;<code>Software &amp; Updates</code>-&gt;<code>Ubuntu Software</code>-&gt;<code>Source code</code>勾选：<br><img src=\"/2019/09/09/git-clone-extra-large-project/source_code.png\" alt=\"source_code\"></p>\n<p>若出现如下错误：<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">couldn<span class=\"symbol\">'t</span> <span class=\"keyword\">be</span> accessed by user <span class=\"symbol\">'_apt</span>'. - pkgAcquire::Run (<span class=\"number\">13</span>: Permission denied) [duplicate]</span><br></pre></td></tr></table></figure></p>\n<p>则需要更改权限：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown _apt /var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">update</span>-<span class=\"title\">notifier</span>/<span class=\"title\">package</span>-<span class=\"title\">data</span>-<span class=\"title\">downloads</span>/<span class=\"title\">partial</span>/</span></span><br></pre></td></tr></table></figure></p>\n<p>3.安装<code>git</code>的依赖<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"meta\">get</span> <span class=\"keyword\">build-dep </span>git</span><br></pre></td></tr></table></figure></p>\n<p>4.进入<code>git</code>目录，重新编译：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> git-2.7.4/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim ./debian/control <span class=\"comment\"># 将libcurl4-gnutls-dev修改为libcurl4-openssl-dev</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim ./debian/rules <span class=\"comment\"># 整行删除TEST=test</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo dpkg-buildpackage -rfakeroot -b -uc -us -j4 <span class=\"comment\"># 编译</span></span></span><br></pre></td></tr></table></figure></p>\n<p>5.回到上一级目录，安装编译好的安装包：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ..</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo dpkg -i git_2.7.4-0ubuntuxxx_amd64.deb <span class=\"comment\"># 安装包名字可能有所不同</span></span></span><br></pre></td></tr></table></figure></p>\n<p>执行完成如上步骤后，重新<code>clone</code>，发现依旧报错，请看错误二。</p>\n<h2 id=\"错误二\"><a href=\"#错误二\" class=\"headerlink\" title=\"错误二\"></a>错误二</h2><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Counting objects: 10994, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (3085/3085), done.</span><br><span class=\"line\"><span class=\"keyword\">error: </span>RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class=\"line\">fatal: The remote end hung up unexpectedly</span><br><span class=\"line\">fatal: early EOF</span><br><span class=\"line\">fatal: index-pack failed</span><br></pre></td></tr></table></figure>\n<p>重新确认<code>postBuffer</code>，配置确实生效了：<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.gitconfig</span><br><span class=\"line\"></span><br><span class=\"line\">[http]</span><br><span class=\"line\">\t<span class=\"attr\">sslVerify</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">\t<span class=\"attr\">postBuffer</span> = <span class=\"number\">2048000000</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"浅层clone\"><a href=\"#浅层clone\" class=\"headerlink\" title=\"浅层clone\"></a>浅层clone</h3><p>晕，实在搞不定了，采取极端方法，首先<code>clone</code>一层：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">--depth</span>=<span class=\"number\">1</span> http://xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>浅层<code>clone</code>成功后，再完整拉取：<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">fetch </span><span class=\"built_in\">--unshallow</span> <span class=\"comment\"># 拉取完整当前分支</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-branches</span> <span class=\"string\">origin </span><span class=\"string\">'*'</span> <span class=\"comment\"># 追踪所有远程分支</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">fetch </span>-v <span class=\"comment\"># 拉取所有远程分支</span></span><br></pre></td></tr></table></figure></p>\n<p>至此，终于成功地<code>clone</code>了一个完整的仓库。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文记录工作中遇到的<code>clone</code>大仓库失败的解决过程，以下问题与解决方案均基于<code>https</code>访问。</p>\n<hr>","more":"<h2 id=\"错误一\"><a href=\"#错误一\" class=\"headerlink\" title=\"错误一\"></a>错误一</h2><p>从<code>web</code>端查看仓库大小，大约<code>1.5G</code>左右，首先直接执行<code>git clone</code>，报错如下：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Counting objects: 10994, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (3085/3085), done.</span><br><span class=\"line\">error: RPC failed; curl 56 GnuTLS recv <span class=\"builtin-name\">error</span> (-110): The TLS<span class=\"built_in\"> connection </span>was non-properly terminated.</span><br><span class=\"line\">fatal: The remote end hung up unexpectedly</span><br><span class=\"line\">fatal: early EOF</span><br><span class=\"line\">fatal: index-pack failed</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"增大postBuffer\"><a href=\"#增大postBuffer\" class=\"headerlink\" title=\"增大postBuffer\"></a>增大postBuffer</h3><p>在增大<code>postBuffer</code>的同时，关闭<code>ssl</code>认证：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global http.postBuffer 2048000000 # 设置为2G</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global http.sslVerify <span class=\"literal\">false</span> # 关闭sslVerify</span><br></pre></td></tr></table></figure></p>\n<p>设置成功后，重新<code>clone</code>，错误依旧。</p>\n<h3 id=\"使用openssl替换gunssl\"><a href=\"#使用openssl替换gunssl\" class=\"headerlink\" title=\"使用openssl替换gunssl\"></a>使用openssl替换gunssl</h3><p>1.安装相关依赖环境：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"built_in\">get</span> install build-essential fakeroot dpkg-<span class=\"built_in\">dev</span> libcurl4-openssl-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure></p>\n<p>2.获取git源码：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"builtin-name\">get</span> source git</span><br></pre></td></tr></table></figure></p>\n<p>若出现如下错误：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: You must <span class=\"keyword\">put</span> <span class=\"keyword\">some</span> 'source' URIs <span class=\"keyword\">in</span> your sources.<span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure></p>\n<p>则需要将设置-&gt;<code>Software &amp; Updates</code>-&gt;<code>Ubuntu Software</code>-&gt;<code>Source code</code>勾选：<br><img src=\"/2019/09/09/git-clone-extra-large-project/source_code.png\" alt=\"source_code\"></p>\n<p>若出现如下错误：<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">couldn<span class=\"symbol\">'t</span> <span class=\"keyword\">be</span> accessed by user <span class=\"symbol\">'_apt</span>'. - pkgAcquire::Run (<span class=\"number\">13</span>: Permission denied) [duplicate]</span><br></pre></td></tr></table></figure></p>\n<p>则需要更改权限：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown _apt /var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">update</span>-<span class=\"title\">notifier</span>/<span class=\"title\">package</span>-<span class=\"title\">data</span>-<span class=\"title\">downloads</span>/<span class=\"title\">partial</span>/</span></span><br></pre></td></tr></table></figure></p>\n<p>3.安装<code>git</code>的依赖<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"meta\">get</span> <span class=\"keyword\">build-dep </span>git</span><br></pre></td></tr></table></figure></p>\n<p>4.进入<code>git</code>目录，重新编译：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> git-2.7.4/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim ./debian/control <span class=\"comment\"># 将libcurl4-gnutls-dev修改为libcurl4-openssl-dev</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim ./debian/rules <span class=\"comment\"># 整行删除TEST=test</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo dpkg-buildpackage -rfakeroot -b -uc -us -j4 <span class=\"comment\"># 编译</span></span></span><br></pre></td></tr></table></figure></p>\n<p>5.回到上一级目录，安装编译好的安装包：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ..</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo dpkg -i git_2.7.4-0ubuntuxxx_amd64.deb <span class=\"comment\"># 安装包名字可能有所不同</span></span></span><br></pre></td></tr></table></figure></p>\n<p>执行完成如上步骤后，重新<code>clone</code>，发现依旧报错，请看错误二。</p>\n<h2 id=\"错误二\"><a href=\"#错误二\" class=\"headerlink\" title=\"错误二\"></a>错误二</h2><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Counting objects: 10994, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (3085/3085), done.</span><br><span class=\"line\"><span class=\"keyword\">error: </span>RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class=\"line\">fatal: The remote end hung up unexpectedly</span><br><span class=\"line\">fatal: early EOF</span><br><span class=\"line\">fatal: index-pack failed</span><br></pre></td></tr></table></figure>\n<p>重新确认<code>postBuffer</code>，配置确实生效了：<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.gitconfig</span><br><span class=\"line\"></span><br><span class=\"line\">[http]</span><br><span class=\"line\">\t<span class=\"attr\">sslVerify</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">\t<span class=\"attr\">postBuffer</span> = <span class=\"number\">2048000000</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"浅层clone\"><a href=\"#浅层clone\" class=\"headerlink\" title=\"浅层clone\"></a>浅层clone</h3><p>晕，实在搞不定了，采取极端方法，首先<code>clone</code>一层：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">--depth</span>=<span class=\"number\">1</span> http://xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>浅层<code>clone</code>成功后，再完整拉取：<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">fetch </span><span class=\"built_in\">--unshallow</span> <span class=\"comment\"># 拉取完整当前分支</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-branches</span> <span class=\"string\">origin </span><span class=\"string\">'*'</span> <span class=\"comment\"># 追踪所有远程分支</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">fetch </span>-v <span class=\"comment\"># 拉取所有远程分支</span></span><br></pre></td></tr></table></figure></p>\n<p>至此，终于成功地<code>clone</code>了一个完整的仓库。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"写好技术简历的一些建议","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2020-07-03T03:00:04.000Z","_content":"\n根据我求职与招聘的经验，结合网上相关资料，这里整理了一些写好技术简历的建议。\n\n-----\n<!--more-->\n\n> 这里提供了一份[简历模版](https://github.com/AnSwErYWJ/resume/blob/master/template.md)，可供参考。\n\n## 保证内容真实性\n写简历必须要保证内容的真实性，这是候选人个人诚信的体现，无论在简历中如何自夸，最终会在面试过程中也会露怯；同时现在大部分企业在招聘时，都会进行背调，所以请务必保证简历内容包括面试过程的真实性，实事求是，**“知之为知之，不知为不知”**。\n\n## 项目描述不是流水账\n对于技术人员来说，项目经历是简历的主体，也是简历中最需要突出的部分，项目中涉及的技能和成果等，是对求职者能力最具说服力的证明。\n\n据说，谷歌要求求职者描述项目经历时，必须提供下面三个信息：\n- 做了什么产品\n- 用到了什么技术\n- 取得了什么结果（**量化**）\n\n这里我认为还可以增加一个信息，即在项目中的角色：\n- 独立完成开发\n- 协作开发，为主导开发，或辅助开发\n- 团队领导者，团队规模为多少人\n\n比如，\"在 `xx` 产品中，主导开发了 `xx` 功能，使用了 `xx` 技术，解决了 `xx` 问题，带来了` xx` 增长或收入\"。\n\n> 特别需要注意的是，取得的结果一定要量化，如功能被多少人使用、性能提升多少倍、节约了多少成本、带来了多少收益等等\n\n除此之外，还请注意下面几点：\n- 挑选近 `3~5` 年内的项目，除非特别有价值，否则不要描述过于旧的项目；\n- 将项目分类，每类挑选 `2~3` 个核心的项目详细描述，其余可一笔带过；\n- 量化项目结果时，注重实际收益，如用户增长、经济收益等；\n\n## 筛选专业技能\n我遇到过很多刚毕业或毕业不久的求职者，简历中的专业技能十分齐全，但是面试过程中却发现大多的技能，仅仅是接触过或者在学校学过，这会给人感觉**“你什么都会一点，但是什么都不精通”**，这样做的伤害大于帮助。\n\n所以，请筛选你的专业技能，建议可以按照熟练程度进行分类：\n- **了解**：有使用过该技能做过一点东西，清楚其使用场景、能够解决的问题；若面试官提及，能够接上话；\n- **熟悉**：经常性使用该技能、以该技能为主进行研发，对其原理有初步了解；若面试官提及，能够有来有回的聊起来；\n- **精通（慎用）**：熟练使用该技能，对其原理理解透彻；若面试官提及，能够直接碾压他！\n\n最后，与专业无关的技能切勿出现在简历中，那这些内容对企业没用，缺乏针对性，只会浪费简历空间，如在校上过的课程、得过的奖学金、当过学生会干部，会计证、驾驶证、英语四六级考试等。\n\n## 具有岗位相关性\n企业招聘的目的，是希望找到能够帮助它干活或解决问题的人，仅仅通过一份简历，它也没有把握什么样的人匹配这个岗位，所以它只能假设如果你掌握了这个岗位所需要的某几种核心专业技能，你就是初步合格的候选人。\n\n所以简历应该针对每个应聘的岗位，突出该岗位所需要的项目经历和专业技能，来证明你可以胜任这份工作。\n\n## 页数不超过三页\n简历是求职者用来向企业传递信息的，一般来说企业招聘人员在筛选简历时，阅读简历的时间不会超过半分钟，如果看不到想要的点，就会直接 `pass`；所以一定要突出重点内容，不要写得密密麻麻，堆砌各种无关的信息，这样只会增加简历的阅读难度，让招聘人员抓不到重点，对于技术人员来说，重点就是你的项目经历以及专业技能。\n\n## 避免错别字和语法错误\n简历中应该避免出现错别字、语法错误等低级错误，这很有可能会给企业留下不严谨、做事马虎的印象；同时技术名词大小写也应该遵循业内规范，保持专业性。\n\n如果对自己不放心，可以在发送简历之前，请朋友检查一遍简历。\n\n## 自我评价\n一般简历中，都会要求候选人进行自我评价，请注意不要描述自己的工作态度，如积极进取、工作努力等，这是默认应该做到的，不是加分项。\n自我评价可以针对如下四点进行：\n- 学习能力\n- 沟通能力\n- 协作能力\n- 执行能力\n\n## 优化细节\n优化企业招聘人员在阅读简历时的体验，使你的简历比别人读起来更舒服，自然简历通过的机会也会更高，可以关注以下细节：\n- 在各类联系方式后面，注明最优联系时间，以免错过面试邀约；\n- 若手机为外地号码，最好注明；\n- 简历使用 `markdown` 编写，转换成 `pdf` 格式发出，可以避免样式丢失或格式不兼容；\n\n## 写在最后\n重中之重，还是需要提高自己的能力，正所谓 **“酒香不怕巷子深“**。\n\n## Reference\n- [8 Hacks For Your Next Tech Resume](https://dev.to/gemography/common-mistakes-in-dev-cvs-2a17)\n- [如何写一份有效的技术简历？](http://www.ruanyifeng.com/blog/2020/01/technical-resume.html)\n\n-----\n\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)","source":"_posts/gudie-of-technical-resume.md","raw":"---\ntitle: 写好技术简历的一些建议\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - resume\n  - 技术简历\n  - 求职招聘\ndate: 2020-07-03 11:00:04\ncategories: 科普\n---\n\n根据我求职与招聘的经验，结合网上相关资料，这里整理了一些写好技术简历的建议。\n\n-----\n<!--more-->\n\n> 这里提供了一份[简历模版](https://github.com/AnSwErYWJ/resume/blob/master/template.md)，可供参考。\n\n## 保证内容真实性\n写简历必须要保证内容的真实性，这是候选人个人诚信的体现，无论在简历中如何自夸，最终会在面试过程中也会露怯；同时现在大部分企业在招聘时，都会进行背调，所以请务必保证简历内容包括面试过程的真实性，实事求是，**“知之为知之，不知为不知”**。\n\n## 项目描述不是流水账\n对于技术人员来说，项目经历是简历的主体，也是简历中最需要突出的部分，项目中涉及的技能和成果等，是对求职者能力最具说服力的证明。\n\n据说，谷歌要求求职者描述项目经历时，必须提供下面三个信息：\n- 做了什么产品\n- 用到了什么技术\n- 取得了什么结果（**量化**）\n\n这里我认为还可以增加一个信息，即在项目中的角色：\n- 独立完成开发\n- 协作开发，为主导开发，或辅助开发\n- 团队领导者，团队规模为多少人\n\n比如，\"在 `xx` 产品中，主导开发了 `xx` 功能，使用了 `xx` 技术，解决了 `xx` 问题，带来了` xx` 增长或收入\"。\n\n> 特别需要注意的是，取得的结果一定要量化，如功能被多少人使用、性能提升多少倍、节约了多少成本、带来了多少收益等等\n\n除此之外，还请注意下面几点：\n- 挑选近 `3~5` 年内的项目，除非特别有价值，否则不要描述过于旧的项目；\n- 将项目分类，每类挑选 `2~3` 个核心的项目详细描述，其余可一笔带过；\n- 量化项目结果时，注重实际收益，如用户增长、经济收益等；\n\n## 筛选专业技能\n我遇到过很多刚毕业或毕业不久的求职者，简历中的专业技能十分齐全，但是面试过程中却发现大多的技能，仅仅是接触过或者在学校学过，这会给人感觉**“你什么都会一点，但是什么都不精通”**，这样做的伤害大于帮助。\n\n所以，请筛选你的专业技能，建议可以按照熟练程度进行分类：\n- **了解**：有使用过该技能做过一点东西，清楚其使用场景、能够解决的问题；若面试官提及，能够接上话；\n- **熟悉**：经常性使用该技能、以该技能为主进行研发，对其原理有初步了解；若面试官提及，能够有来有回的聊起来；\n- **精通（慎用）**：熟练使用该技能，对其原理理解透彻；若面试官提及，能够直接碾压他！\n\n最后，与专业无关的技能切勿出现在简历中，那这些内容对企业没用，缺乏针对性，只会浪费简历空间，如在校上过的课程、得过的奖学金、当过学生会干部，会计证、驾驶证、英语四六级考试等。\n\n## 具有岗位相关性\n企业招聘的目的，是希望找到能够帮助它干活或解决问题的人，仅仅通过一份简历，它也没有把握什么样的人匹配这个岗位，所以它只能假设如果你掌握了这个岗位所需要的某几种核心专业技能，你就是初步合格的候选人。\n\n所以简历应该针对每个应聘的岗位，突出该岗位所需要的项目经历和专业技能，来证明你可以胜任这份工作。\n\n## 页数不超过三页\n简历是求职者用来向企业传递信息的，一般来说企业招聘人员在筛选简历时，阅读简历的时间不会超过半分钟，如果看不到想要的点，就会直接 `pass`；所以一定要突出重点内容，不要写得密密麻麻，堆砌各种无关的信息，这样只会增加简历的阅读难度，让招聘人员抓不到重点，对于技术人员来说，重点就是你的项目经历以及专业技能。\n\n## 避免错别字和语法错误\n简历中应该避免出现错别字、语法错误等低级错误，这很有可能会给企业留下不严谨、做事马虎的印象；同时技术名词大小写也应该遵循业内规范，保持专业性。\n\n如果对自己不放心，可以在发送简历之前，请朋友检查一遍简历。\n\n## 自我评价\n一般简历中，都会要求候选人进行自我评价，请注意不要描述自己的工作态度，如积极进取、工作努力等，这是默认应该做到的，不是加分项。\n自我评价可以针对如下四点进行：\n- 学习能力\n- 沟通能力\n- 协作能力\n- 执行能力\n\n## 优化细节\n优化企业招聘人员在阅读简历时的体验，使你的简历比别人读起来更舒服，自然简历通过的机会也会更高，可以关注以下细节：\n- 在各类联系方式后面，注明最优联系时间，以免错过面试邀约；\n- 若手机为外地号码，最好注明；\n- 简历使用 `markdown` 编写，转换成 `pdf` 格式发出，可以避免样式丢失或格式不兼容；\n\n## 写在最后\n重中之重，还是需要提高自己的能力，正所谓 **“酒香不怕巷子深“**。\n\n## Reference\n- [8 Hacks For Your Next Tech Resume](https://dev.to/gemography/common-mistakes-in-dev-cvs-2a17)\n- [如何写一份有效的技术简历？](http://www.ruanyifeng.com/blog/2020/01/technical-resume.html)\n\n-----\n\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)","slug":"gudie-of-technical-resume","published":1,"updated":"2020-07-23T09:19:34.519Z","layout":"post","photos":[],"link":"","_id":"cklumqges001g79n5ic2cexro","content":"<p>根据我求职与招聘的经验，结合网上相关资料，这里整理了一些写好技术简历的建议。</p>\n<hr>\n<a id=\"more\"></a>\n<blockquote>\n<p>这里提供了一份<a href=\"https://github.com/AnSwErYWJ/resume/blob/master/template.md\" target=\"_blank\" rel=\"noopener\">简历模版</a>，可供参考。</p>\n</blockquote>\n<h2 id=\"保证内容真实性\"><a href=\"#保证内容真实性\" class=\"headerlink\" title=\"保证内容真实性\"></a>保证内容真实性</h2><p>写简历必须要保证内容的真实性，这是候选人个人诚信的体现，无论在简历中如何自夸，最终会在面试过程中也会露怯；同时现在大部分企业在招聘时，都会进行背调，所以请务必保证简历内容包括面试过程的真实性，实事求是，<strong>“知之为知之，不知为不知”</strong>。</p>\n<h2 id=\"项目描述不是流水账\"><a href=\"#项目描述不是流水账\" class=\"headerlink\" title=\"项目描述不是流水账\"></a>项目描述不是流水账</h2><p>对于技术人员来说，项目经历是简历的主体，也是简历中最需要突出的部分，项目中涉及的技能和成果等，是对求职者能力最具说服力的证明。</p>\n<p>据说，谷歌要求求职者描述项目经历时，必须提供下面三个信息：</p>\n<ul>\n<li>做了什么产品</li>\n<li>用到了什么技术</li>\n<li>取得了什么结果（<strong>量化</strong>）</li>\n</ul>\n<p>这里我认为还可以增加一个信息，即在项目中的角色：</p>\n<ul>\n<li>独立完成开发</li>\n<li>协作开发，为主导开发，或辅助开发</li>\n<li>团队领导者，团队规模为多少人</li>\n</ul>\n<p>比如，”在 <code>xx</code> 产品中，主导开发了 <code>xx</code> 功能，使用了 <code>xx</code> 技术，解决了 <code>xx</code> 问题，带来了<code>xx</code> 增长或收入”。</p>\n<blockquote>\n<p>特别需要注意的是，取得的结果一定要量化，如功能被多少人使用、性能提升多少倍、节约了多少成本、带来了多少收益等等</p>\n</blockquote>\n<p>除此之外，还请注意下面几点：</p>\n<ul>\n<li>挑选近 <code>3~5</code> 年内的项目，除非特别有价值，否则不要描述过于旧的项目；</li>\n<li>将项目分类，每类挑选 <code>2~3</code> 个核心的项目详细描述，其余可一笔带过；</li>\n<li>量化项目结果时，注重实际收益，如用户增长、经济收益等；</li>\n</ul>\n<h2 id=\"筛选专业技能\"><a href=\"#筛选专业技能\" class=\"headerlink\" title=\"筛选专业技能\"></a>筛选专业技能</h2><p>我遇到过很多刚毕业或毕业不久的求职者，简历中的专业技能十分齐全，但是面试过程中却发现大多的技能，仅仅是接触过或者在学校学过，这会给人感觉<strong>“你什么都会一点，但是什么都不精通”</strong>，这样做的伤害大于帮助。</p>\n<p>所以，请筛选你的专业技能，建议可以按照熟练程度进行分类：</p>\n<ul>\n<li><strong>了解</strong>：有使用过该技能做过一点东西，清楚其使用场景、能够解决的问题；若面试官提及，能够接上话；</li>\n<li><strong>熟悉</strong>：经常性使用该技能、以该技能为主进行研发，对其原理有初步了解；若面试官提及，能够有来有回的聊起来；</li>\n<li><strong>精通（慎用）</strong>：熟练使用该技能，对其原理理解透彻；若面试官提及，能够直接碾压他！</li>\n</ul>\n<p>最后，与专业无关的技能切勿出现在简历中，那这些内容对企业没用，缺乏针对性，只会浪费简历空间，如在校上过的课程、得过的奖学金、当过学生会干部，会计证、驾驶证、英语四六级考试等。</p>\n<h2 id=\"具有岗位相关性\"><a href=\"#具有岗位相关性\" class=\"headerlink\" title=\"具有岗位相关性\"></a>具有岗位相关性</h2><p>企业招聘的目的，是希望找到能够帮助它干活或解决问题的人，仅仅通过一份简历，它也没有把握什么样的人匹配这个岗位，所以它只能假设如果你掌握了这个岗位所需要的某几种核心专业技能，你就是初步合格的候选人。</p>\n<p>所以简历应该针对每个应聘的岗位，突出该岗位所需要的项目经历和专业技能，来证明你可以胜任这份工作。</p>\n<h2 id=\"页数不超过三页\"><a href=\"#页数不超过三页\" class=\"headerlink\" title=\"页数不超过三页\"></a>页数不超过三页</h2><p>简历是求职者用来向企业传递信息的，一般来说企业招聘人员在筛选简历时，阅读简历的时间不会超过半分钟，如果看不到想要的点，就会直接 <code>pass</code>；所以一定要突出重点内容，不要写得密密麻麻，堆砌各种无关的信息，这样只会增加简历的阅读难度，让招聘人员抓不到重点，对于技术人员来说，重点就是你的项目经历以及专业技能。</p>\n<h2 id=\"避免错别字和语法错误\"><a href=\"#避免错别字和语法错误\" class=\"headerlink\" title=\"避免错别字和语法错误\"></a>避免错别字和语法错误</h2><p>简历中应该避免出现错别字、语法错误等低级错误，这很有可能会给企业留下不严谨、做事马虎的印象；同时技术名词大小写也应该遵循业内规范，保持专业性。</p>\n<p>如果对自己不放心，可以在发送简历之前，请朋友检查一遍简历。</p>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><p>一般简历中，都会要求候选人进行自我评价，请注意不要描述自己的工作态度，如积极进取、工作努力等，这是默认应该做到的，不是加分项。<br>自我评价可以针对如下四点进行：</p>\n<ul>\n<li>学习能力</li>\n<li>沟通能力</li>\n<li>协作能力</li>\n<li>执行能力</li>\n</ul>\n<h2 id=\"优化细节\"><a href=\"#优化细节\" class=\"headerlink\" title=\"优化细节\"></a>优化细节</h2><p>优化企业招聘人员在阅读简历时的体验，使你的简历比别人读起来更舒服，自然简历通过的机会也会更高，可以关注以下细节：</p>\n<ul>\n<li>在各类联系方式后面，注明最优联系时间，以免错过面试邀约；</li>\n<li>若手机为外地号码，最好注明；</li>\n<li>简历使用 <code>markdown</code> 编写，转换成 <code>pdf</code> 格式发出，可以避免样式丢失或格式不兼容；</li>\n</ul>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>重中之重，还是需要提高自己的能力，正所谓 <strong>“酒香不怕巷子深“</strong>。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://dev.to/gemography/common-mistakes-in-dev-cvs-2a17\" target=\"_blank\" rel=\"noopener\">8 Hacks For Your Next Tech Resume</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2020/01/technical-resume.html\" target=\"_blank\" rel=\"noopener\">如何写一份有效的技术简历？</a></li>\n</ul>\n<hr>\n<p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>根据我求职与招聘的经验，结合网上相关资料，这里整理了一些写好技术简历的建议。</p>\n<hr>","more":"<blockquote>\n<p>这里提供了一份<a href=\"https://github.com/AnSwErYWJ/resume/blob/master/template.md\" target=\"_blank\" rel=\"noopener\">简历模版</a>，可供参考。</p>\n</blockquote>\n<h2 id=\"保证内容真实性\"><a href=\"#保证内容真实性\" class=\"headerlink\" title=\"保证内容真实性\"></a>保证内容真实性</h2><p>写简历必须要保证内容的真实性，这是候选人个人诚信的体现，无论在简历中如何自夸，最终会在面试过程中也会露怯；同时现在大部分企业在招聘时，都会进行背调，所以请务必保证简历内容包括面试过程的真实性，实事求是，<strong>“知之为知之，不知为不知”</strong>。</p>\n<h2 id=\"项目描述不是流水账\"><a href=\"#项目描述不是流水账\" class=\"headerlink\" title=\"项目描述不是流水账\"></a>项目描述不是流水账</h2><p>对于技术人员来说，项目经历是简历的主体，也是简历中最需要突出的部分，项目中涉及的技能和成果等，是对求职者能力最具说服力的证明。</p>\n<p>据说，谷歌要求求职者描述项目经历时，必须提供下面三个信息：</p>\n<ul>\n<li>做了什么产品</li>\n<li>用到了什么技术</li>\n<li>取得了什么结果（<strong>量化</strong>）</li>\n</ul>\n<p>这里我认为还可以增加一个信息，即在项目中的角色：</p>\n<ul>\n<li>独立完成开发</li>\n<li>协作开发，为主导开发，或辅助开发</li>\n<li>团队领导者，团队规模为多少人</li>\n</ul>\n<p>比如，”在 <code>xx</code> 产品中，主导开发了 <code>xx</code> 功能，使用了 <code>xx</code> 技术，解决了 <code>xx</code> 问题，带来了<code>xx</code> 增长或收入”。</p>\n<blockquote>\n<p>特别需要注意的是，取得的结果一定要量化，如功能被多少人使用、性能提升多少倍、节约了多少成本、带来了多少收益等等</p>\n</blockquote>\n<p>除此之外，还请注意下面几点：</p>\n<ul>\n<li>挑选近 <code>3~5</code> 年内的项目，除非特别有价值，否则不要描述过于旧的项目；</li>\n<li>将项目分类，每类挑选 <code>2~3</code> 个核心的项目详细描述，其余可一笔带过；</li>\n<li>量化项目结果时，注重实际收益，如用户增长、经济收益等；</li>\n</ul>\n<h2 id=\"筛选专业技能\"><a href=\"#筛选专业技能\" class=\"headerlink\" title=\"筛选专业技能\"></a>筛选专业技能</h2><p>我遇到过很多刚毕业或毕业不久的求职者，简历中的专业技能十分齐全，但是面试过程中却发现大多的技能，仅仅是接触过或者在学校学过，这会给人感觉<strong>“你什么都会一点，但是什么都不精通”</strong>，这样做的伤害大于帮助。</p>\n<p>所以，请筛选你的专业技能，建议可以按照熟练程度进行分类：</p>\n<ul>\n<li><strong>了解</strong>：有使用过该技能做过一点东西，清楚其使用场景、能够解决的问题；若面试官提及，能够接上话；</li>\n<li><strong>熟悉</strong>：经常性使用该技能、以该技能为主进行研发，对其原理有初步了解；若面试官提及，能够有来有回的聊起来；</li>\n<li><strong>精通（慎用）</strong>：熟练使用该技能，对其原理理解透彻；若面试官提及，能够直接碾压他！</li>\n</ul>\n<p>最后，与专业无关的技能切勿出现在简历中，那这些内容对企业没用，缺乏针对性，只会浪费简历空间，如在校上过的课程、得过的奖学金、当过学生会干部，会计证、驾驶证、英语四六级考试等。</p>\n<h2 id=\"具有岗位相关性\"><a href=\"#具有岗位相关性\" class=\"headerlink\" title=\"具有岗位相关性\"></a>具有岗位相关性</h2><p>企业招聘的目的，是希望找到能够帮助它干活或解决问题的人，仅仅通过一份简历，它也没有把握什么样的人匹配这个岗位，所以它只能假设如果你掌握了这个岗位所需要的某几种核心专业技能，你就是初步合格的候选人。</p>\n<p>所以简历应该针对每个应聘的岗位，突出该岗位所需要的项目经历和专业技能，来证明你可以胜任这份工作。</p>\n<h2 id=\"页数不超过三页\"><a href=\"#页数不超过三页\" class=\"headerlink\" title=\"页数不超过三页\"></a>页数不超过三页</h2><p>简历是求职者用来向企业传递信息的，一般来说企业招聘人员在筛选简历时，阅读简历的时间不会超过半分钟，如果看不到想要的点，就会直接 <code>pass</code>；所以一定要突出重点内容，不要写得密密麻麻，堆砌各种无关的信息，这样只会增加简历的阅读难度，让招聘人员抓不到重点，对于技术人员来说，重点就是你的项目经历以及专业技能。</p>\n<h2 id=\"避免错别字和语法错误\"><a href=\"#避免错别字和语法错误\" class=\"headerlink\" title=\"避免错别字和语法错误\"></a>避免错别字和语法错误</h2><p>简历中应该避免出现错别字、语法错误等低级错误，这很有可能会给企业留下不严谨、做事马虎的印象；同时技术名词大小写也应该遵循业内规范，保持专业性。</p>\n<p>如果对自己不放心，可以在发送简历之前，请朋友检查一遍简历。</p>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><p>一般简历中，都会要求候选人进行自我评价，请注意不要描述自己的工作态度，如积极进取、工作努力等，这是默认应该做到的，不是加分项。<br>自我评价可以针对如下四点进行：</p>\n<ul>\n<li>学习能力</li>\n<li>沟通能力</li>\n<li>协作能力</li>\n<li>执行能力</li>\n</ul>\n<h2 id=\"优化细节\"><a href=\"#优化细节\" class=\"headerlink\" title=\"优化细节\"></a>优化细节</h2><p>优化企业招聘人员在阅读简历时的体验，使你的简历比别人读起来更舒服，自然简历通过的机会也会更高，可以关注以下细节：</p>\n<ul>\n<li>在各类联系方式后面，注明最优联系时间，以免错过面试邀约；</li>\n<li>若手机为外地号码，最好注明；</li>\n<li>简历使用 <code>markdown</code> 编写，转换成 <code>pdf</code> 格式发出，可以避免样式丢失或格式不兼容；</li>\n</ul>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>重中之重，还是需要提高自己的能力，正所谓 <strong>“酒香不怕巷子深“</strong>。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://dev.to/gemography/common-mistakes-in-dev-cvs-2a17\" target=\"_blank\" rel=\"noopener\">8 Hacks For Your Next Tech Resume</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2020/01/technical-resume.html\" target=\"_blank\" rel=\"noopener\">如何写一份有效的技术简历？</a></li>\n</ul>\n<hr>\n<p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>"},{"title":"屏蔽静态库接口","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2019-04-13T06:43:13.000Z","_content":"\n分享屏蔽静态库接口的一种方法.\n<!--more-->\n\n## 准备\n`hello.c`:\n```\n#include <stdio.h>\n\n__attribute__ ((visibility (\"default\"))) void hello() {\n\tprintf(\"Hello World!\\n\");\n}\n```\n`hello.h`:\n```\n#ifndef __HELLO__H\n#define __HELLO__H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nvoid hello();\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n```\n\n`bye.c`:\n```\n#include <stdio.h>\n\nvoid bye() {\n\tprintf(\"Bye Bye!\\n\");\n}\n```\n`bye.h`:\n```\n#ifndef __BYE__H\n#define __BYE__H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nvoid bye();\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n```\n\n## 编译\n编译时使用`-fvisibility=hidden`,可以默认将符号隐藏;需要对外的符号使用`__attribute__ ((visibility (\"default\")))`修饰即可:\n```\n$ gcc -fvisibility=hidden -I. -c hello.c -o hello.o\n$ gcc -fvisibility=hidden -I. -c bye.c -o bye.o\n```\n其中`hello()`未被隐藏,`bye()`是被隐藏的.\n\n## 链接\n将生成的两个`.o`文件重定位到`libt.o`中:\n```\n$ ld -r hello.o bye.o -o libt.o\n```\n\n## 去除无用的符号\n```\n$ strip --strip-unneeded libt.o\n```\n\n## 隐藏的符号本地化(我也不知道中文怎么翻译了)\n```\n$ objcopy --localize-hidden libt.o libt_hidden.o\n```\n\n## 打包成静态库\n```\n$ ar crv libt.a libt_hidden.o\n```\n\n## 验证\n### 调用未被隐藏的`hello()`\n`test1.c`:\n```\n#include \"hello.h\"\n\nint main(void) {\n    hello();\n    return 0;\n}\n```\n编译并运行\n```\n$ gcc -I. test1.c -L. -lt -o test\n$ ./test\nHello World!\n```\n\n### 调用隐藏的`bye()`\ntest2.c\n```\n#include \"bye.h\"\n\nint main(void) {\n    bye();\n    return 0;\n}\n```\n编译并运行\n```\n$ gcc -I. test2.c -L. -lt -o test\n$ ./test\n/tmp/ccdaJT7s.o: In function `main':\ntest2.c:(.text+0xa): undefined reference to `bye'\ncollect2: error: ld returned 1 exit status\n```\n\n## Reference\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/hide-symbol-of-static-library.md","raw":"---\ntitle: 屏蔽静态库接口\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - hidden\n  - objcopy\ndate: 2019-04-13 14:43:13\ncategories: 编译链接\n---\n\n分享屏蔽静态库接口的一种方法.\n<!--more-->\n\n## 准备\n`hello.c`:\n```\n#include <stdio.h>\n\n__attribute__ ((visibility (\"default\"))) void hello() {\n\tprintf(\"Hello World!\\n\");\n}\n```\n`hello.h`:\n```\n#ifndef __HELLO__H\n#define __HELLO__H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nvoid hello();\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n```\n\n`bye.c`:\n```\n#include <stdio.h>\n\nvoid bye() {\n\tprintf(\"Bye Bye!\\n\");\n}\n```\n`bye.h`:\n```\n#ifndef __BYE__H\n#define __BYE__H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nvoid bye();\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n```\n\n## 编译\n编译时使用`-fvisibility=hidden`,可以默认将符号隐藏;需要对外的符号使用`__attribute__ ((visibility (\"default\")))`修饰即可:\n```\n$ gcc -fvisibility=hidden -I. -c hello.c -o hello.o\n$ gcc -fvisibility=hidden -I. -c bye.c -o bye.o\n```\n其中`hello()`未被隐藏,`bye()`是被隐藏的.\n\n## 链接\n将生成的两个`.o`文件重定位到`libt.o`中:\n```\n$ ld -r hello.o bye.o -o libt.o\n```\n\n## 去除无用的符号\n```\n$ strip --strip-unneeded libt.o\n```\n\n## 隐藏的符号本地化(我也不知道中文怎么翻译了)\n```\n$ objcopy --localize-hidden libt.o libt_hidden.o\n```\n\n## 打包成静态库\n```\n$ ar crv libt.a libt_hidden.o\n```\n\n## 验证\n### 调用未被隐藏的`hello()`\n`test1.c`:\n```\n#include \"hello.h\"\n\nint main(void) {\n    hello();\n    return 0;\n}\n```\n编译并运行\n```\n$ gcc -I. test1.c -L. -lt -o test\n$ ./test\nHello World!\n```\n\n### 调用隐藏的`bye()`\ntest2.c\n```\n#include \"bye.h\"\n\nint main(void) {\n    bye();\n    return 0;\n}\n```\n编译并运行\n```\n$ gcc -I. test2.c -L. -lt -o test\n$ ./test\n/tmp/ccdaJT7s.o: In function `main':\ntest2.c:(.text+0xa): undefined reference to `bye'\ncollect2: error: ld returned 1 exit status\n```\n\n## Reference\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"hide-symbol-of-static-library","published":1,"updated":"2020-07-21T01:40:07.161Z","layout":"post","photos":[],"link":"","_id":"cklumqgeu001k79n5790tnfk5","content":"<p>分享屏蔽静态库接口的一种方法.<br><a id=\"more\"></a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p><code>hello.c</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">__attribute__ ((visibility (<span class=\"string\">\"default\"</span>))) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>hello.h</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __HELLO__H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __HELLO__H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<p><code>bye.c</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Bye Bye!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>bye.h</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __BYE__H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __BYE__H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>编译时使用<code>-fvisibility=hidden</code>,可以默认将符号隐藏;需要对外的符号使用<code>__attribute__ ((visibility (&quot;default&quot;)))</code>修饰即可:<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -fvisibility=<span class=\"keyword\">hidden</span> -I. -<span class=\"keyword\">c</span> hello.<span class=\"keyword\">c</span> -o hello.o</span><br><span class=\"line\">$ gcc -fvisibility=<span class=\"keyword\">hidden</span> -I. -<span class=\"keyword\">c</span> bye.<span class=\"keyword\">c</span> -o bye.o</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>hello()</code>未被隐藏,<code>bye()</code>是被隐藏的.</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>将生成的两个<code>.o</code>文件重定位到<code>libt.o</code>中:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ld -r hello<span class=\"selector-class\">.o</span> bye<span class=\"selector-class\">.o</span> -o libt.o</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"去除无用的符号\"><a href=\"#去除无用的符号\" class=\"headerlink\" title=\"去除无用的符号\"></a>去除无用的符号</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">strip </span>--<span class=\"keyword\">strip-unneeded </span>libt.o</span><br></pre></td></tr></table></figure>\n<h2 id=\"隐藏的符号本地化-我也不知道中文怎么翻译了\"><a href=\"#隐藏的符号本地化-我也不知道中文怎么翻译了\" class=\"headerlink\" title=\"隐藏的符号本地化(我也不知道中文怎么翻译了)\"></a>隐藏的符号本地化(我也不知道中文怎么翻译了)</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objcopy --localize-hidden libt<span class=\"selector-class\">.o</span> libt_hidden.o</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包成静态库\"><a href=\"#打包成静态库\" class=\"headerlink\" title=\"打包成静态库\"></a>打包成静态库</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ar crv libt<span class=\"selector-class\">.a</span> libt_hidden.o</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><h3 id=\"调用未被隐藏的hello\"><a href=\"#调用未被隐藏的hello\" class=\"headerlink\" title=\"调用未被隐藏的hello()\"></a>调用未被隐藏的<code>hello()</code></h3><p><code>test1.c</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"hello.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    hello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译并运行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gcc -I. test1.c -L. -lt -o <span class=\"built_in\">test</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./<span class=\"built_in\">test</span></span></span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"调用隐藏的bye\"><a href=\"#调用隐藏的bye\" class=\"headerlink\" title=\"调用隐藏的bye()\"></a>调用隐藏的<code>bye()</code></h3><p>test2.c<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"bye.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    bye();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译并运行<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -I. test2.c -<span class=\"keyword\">L</span>. -lt -o <span class=\"keyword\">test</span></span><br><span class=\"line\">$ ./<span class=\"keyword\">test</span></span><br><span class=\"line\">/tmp/ccdaJT7s.o: <span class=\"keyword\">In</span> function <span class=\"symbol\">`main'</span>:</span><br><span class=\"line\">test2.c:(.text+0xa): undefined reference to <span class=\"symbol\">`bye'</span></span><br><span class=\"line\">collect2: <span class=\"keyword\">error</span>: ld returned 1 <span class=\"keyword\">exit</span> status</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>分享屏蔽静态库接口的一种方法.<br></p>","more":"<p></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p><code>hello.c</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">__attribute__ ((visibility (<span class=\"string\">\"default\"</span>))) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>hello.h</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __HELLO__H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __HELLO__H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<p><code>bye.c</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Bye Bye!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>bye.h</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __BYE__H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __BYE__H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>编译时使用<code>-fvisibility=hidden</code>,可以默认将符号隐藏;需要对外的符号使用<code>__attribute__ ((visibility (&quot;default&quot;)))</code>修饰即可:<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -fvisibility=<span class=\"keyword\">hidden</span> -I. -<span class=\"keyword\">c</span> hello.<span class=\"keyword\">c</span> -o hello.o</span><br><span class=\"line\">$ gcc -fvisibility=<span class=\"keyword\">hidden</span> -I. -<span class=\"keyword\">c</span> bye.<span class=\"keyword\">c</span> -o bye.o</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>hello()</code>未被隐藏,<code>bye()</code>是被隐藏的.</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>将生成的两个<code>.o</code>文件重定位到<code>libt.o</code>中:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ld -r hello<span class=\"selector-class\">.o</span> bye<span class=\"selector-class\">.o</span> -o libt.o</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"去除无用的符号\"><a href=\"#去除无用的符号\" class=\"headerlink\" title=\"去除无用的符号\"></a>去除无用的符号</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">strip </span>--<span class=\"keyword\">strip-unneeded </span>libt.o</span><br></pre></td></tr></table></figure>\n<h2 id=\"隐藏的符号本地化-我也不知道中文怎么翻译了\"><a href=\"#隐藏的符号本地化-我也不知道中文怎么翻译了\" class=\"headerlink\" title=\"隐藏的符号本地化(我也不知道中文怎么翻译了)\"></a>隐藏的符号本地化(我也不知道中文怎么翻译了)</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objcopy --localize-hidden libt<span class=\"selector-class\">.o</span> libt_hidden.o</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包成静态库\"><a href=\"#打包成静态库\" class=\"headerlink\" title=\"打包成静态库\"></a>打包成静态库</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ar crv libt<span class=\"selector-class\">.a</span> libt_hidden.o</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><h3 id=\"调用未被隐藏的hello\"><a href=\"#调用未被隐藏的hello\" class=\"headerlink\" title=\"调用未被隐藏的hello()\"></a>调用未被隐藏的<code>hello()</code></h3><p><code>test1.c</code>:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"hello.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    hello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译并运行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gcc -I. test1.c -L. -lt -o <span class=\"built_in\">test</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./<span class=\"built_in\">test</span></span></span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"调用隐藏的bye\"><a href=\"#调用隐藏的bye\" class=\"headerlink\" title=\"调用隐藏的bye()\"></a>调用隐藏的<code>bye()</code></h3><p>test2.c<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"bye.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    bye();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译并运行<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -I. test2.c -<span class=\"keyword\">L</span>. -lt -o <span class=\"keyword\">test</span></span><br><span class=\"line\">$ ./<span class=\"keyword\">test</span></span><br><span class=\"line\">/tmp/ccdaJT7s.o: <span class=\"keyword\">In</span> function <span class=\"symbol\">`main'</span>:</span><br><span class=\"line\">test2.c:(.text+0xa): undefined reference to <span class=\"symbol\">`bye'</span></span><br><span class=\"line\">collect2: <span class=\"keyword\">error</span>: ld returned 1 <span class=\"keyword\">exit</span> status</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"科普|云计算的四种服务模式介绍","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2017-03-23T06:18:40.000Z","_content":"\n本文将介绍*SaaS*，*BaaS*，*PaaS*和*IaaS*这四种云计算服务模式，并分析之间的联系和区别。\n\n<!--more-->\n\n## 四种服务模式介绍\n- SaaS（Software as a Service）：软件即服务，*SaaS*公司提供完整并可直接使用的应用程序，用户通过网页浏览器即可接入使用。比较知名的*SaaS*有*GoToMeeting*，*WebEx*和*Salesforce*。\n- BaaS（Backend as a Service）：后端即服务，为移动应用开发者提供后端云服务，包括云端数据存储、账户管理和消息推送等，简化了应用开发流程。这里推荐一篇对*BaaS*介绍的[文章](http://www.jianshu.com/p/4381f0a0692e)。\n- PaaS（Platform as a Service）：平台即服务，也被叫做中间件。用户通过*Internet*可以使用*PaaS*公司在网上提供的各种开发和分发应用的解决方案，比如虚拟服务器和操作系统等，软件的开发和运行都可以在提供的平台上进行。不仅节约了硬件成本，更大大提高了协作开发的效率。比较知名的*PaaS*有*Google App Engine*，*Microsoft Azure*和*AppFog*。\n- IaaS（Infrastructure as a Service）：基础设施即服务，用户通过租用*IaaS*公司的服务器，存储和网络硬件，利用*Internet*就可以完善地获取计算机基础设施服务，大大节约了硬件成本。比较知名的*IaaS*有*Amazon*，*Microsoft*和*Aliyun*等。\n\n## 四种服务模式的关系\n- *PaaS*构建在*IaaS*之上，在基础架构之外还提供了业务软件的运行环境。\n- *SaaS*同*PaaS*的区别在于，使用*SaaS*的不是软件的开发人员，而是软件的最终用户。\n- *BaaS*属于*PaaS*的范畴，但两者也有区别。*BaaS*简化了应用开发流程，而*PaaS*简化了应用部署流程。\n\n![云计算的四种服务模式介绍](Introduction-to-four-service-of-cloud-computing.jpg)\n\n## Reference\n- [云计算的三种服务模式](http://www.jianshu.com/p/6148c47792c3)\n- [三分钟了解什么是 BaaS](http://www.jianshu.com/p/4381f0a0692e)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/introduction-to-four-service-of-cloud-computing.md","raw":"---\ntitle: 科普|云计算的四种服务模式介绍\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - Cloud Computing\ndate: 2017-03-23 14:18:40\ncategories: 科普\n---\n\n本文将介绍*SaaS*，*BaaS*，*PaaS*和*IaaS*这四种云计算服务模式，并分析之间的联系和区别。\n\n<!--more-->\n\n## 四种服务模式介绍\n- SaaS（Software as a Service）：软件即服务，*SaaS*公司提供完整并可直接使用的应用程序，用户通过网页浏览器即可接入使用。比较知名的*SaaS*有*GoToMeeting*，*WebEx*和*Salesforce*。\n- BaaS（Backend as a Service）：后端即服务，为移动应用开发者提供后端云服务，包括云端数据存储、账户管理和消息推送等，简化了应用开发流程。这里推荐一篇对*BaaS*介绍的[文章](http://www.jianshu.com/p/4381f0a0692e)。\n- PaaS（Platform as a Service）：平台即服务，也被叫做中间件。用户通过*Internet*可以使用*PaaS*公司在网上提供的各种开发和分发应用的解决方案，比如虚拟服务器和操作系统等，软件的开发和运行都可以在提供的平台上进行。不仅节约了硬件成本，更大大提高了协作开发的效率。比较知名的*PaaS*有*Google App Engine*，*Microsoft Azure*和*AppFog*。\n- IaaS（Infrastructure as a Service）：基础设施即服务，用户通过租用*IaaS*公司的服务器，存储和网络硬件，利用*Internet*就可以完善地获取计算机基础设施服务，大大节约了硬件成本。比较知名的*IaaS*有*Amazon*，*Microsoft*和*Aliyun*等。\n\n## 四种服务模式的关系\n- *PaaS*构建在*IaaS*之上，在基础架构之外还提供了业务软件的运行环境。\n- *SaaS*同*PaaS*的区别在于，使用*SaaS*的不是软件的开发人员，而是软件的最终用户。\n- *BaaS*属于*PaaS*的范畴，但两者也有区别。*BaaS*简化了应用开发流程，而*PaaS*简化了应用部署流程。\n\n![云计算的四种服务模式介绍](Introduction-to-four-service-of-cloud-computing.jpg)\n\n## Reference\n- [云计算的三种服务模式](http://www.jianshu.com/p/6148c47792c3)\n- [三分钟了解什么是 BaaS](http://www.jianshu.com/p/4381f0a0692e)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"introduction-to-four-service-of-cloud-computing","published":1,"updated":"2019-07-24T03:25:16.194Z","layout":"post","photos":[],"link":"","_id":"cklumqgew001o79n5ddpqehiy","content":"<p>本文将介绍<em>SaaS</em>，<em>BaaS</em>，<em>PaaS</em>和<em>IaaS</em>这四种云计算服务模式，并分析之间的联系和区别。</p>\n<a id=\"more\"></a>\n<h2 id=\"四种服务模式介绍\"><a href=\"#四种服务模式介绍\" class=\"headerlink\" title=\"四种服务模式介绍\"></a>四种服务模式介绍</h2><ul>\n<li>SaaS（Software as a Service）：软件即服务，<em>SaaS</em>公司提供完整并可直接使用的应用程序，用户通过网页浏览器即可接入使用。比较知名的<em>SaaS</em>有<em>GoToMeeting</em>，<em>WebEx</em>和<em>Salesforce</em>。</li>\n<li>BaaS（Backend as a Service）：后端即服务，为移动应用开发者提供后端云服务，包括云端数据存储、账户管理和消息推送等，简化了应用开发流程。这里推荐一篇对<em>BaaS</em>介绍的<a href=\"http://www.jianshu.com/p/4381f0a0692e\" target=\"_blank\" rel=\"noopener\">文章</a>。</li>\n<li>PaaS（Platform as a Service）：平台即服务，也被叫做中间件。用户通过<em>Internet</em>可以使用<em>PaaS</em>公司在网上提供的各种开发和分发应用的解决方案，比如虚拟服务器和操作系统等，软件的开发和运行都可以在提供的平台上进行。不仅节约了硬件成本，更大大提高了协作开发的效率。比较知名的<em>PaaS</em>有<em>Google App Engine</em>，<em>Microsoft Azure</em>和<em>AppFog</em>。</li>\n<li>IaaS（Infrastructure as a Service）：基础设施即服务，用户通过租用<em>IaaS</em>公司的服务器，存储和网络硬件，利用<em>Internet</em>就可以完善地获取计算机基础设施服务，大大节约了硬件成本。比较知名的<em>IaaS</em>有<em>Amazon</em>，<em>Microsoft</em>和<em>Aliyun</em>等。</li>\n</ul>\n<h2 id=\"四种服务模式的关系\"><a href=\"#四种服务模式的关系\" class=\"headerlink\" title=\"四种服务模式的关系\"></a>四种服务模式的关系</h2><ul>\n<li><em>PaaS</em>构建在<em>IaaS</em>之上，在基础架构之外还提供了业务软件的运行环境。</li>\n<li><em>SaaS</em>同<em>PaaS</em>的区别在于，使用<em>SaaS</em>的不是软件的开发人员，而是软件的最终用户。</li>\n<li><em>BaaS</em>属于<em>PaaS</em>的范畴，但两者也有区别。<em>BaaS</em>简化了应用开发流程，而<em>PaaS</em>简化了应用部署流程。</li>\n</ul>\n<p><img src=\"/2017/03/23/introduction-to-four-service-of-cloud-computing/Introduction-to-four-service-of-cloud-computing.jpg\" alt=\"云计算的四种服务模式介绍\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.jianshu.com/p/6148c47792c3\" target=\"_blank\" rel=\"noopener\">云计算的三种服务模式</a></li>\n<li><a href=\"http://www.jianshu.com/p/4381f0a0692e\" target=\"_blank\" rel=\"noopener\">三分钟了解什么是 BaaS</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍<em>SaaS</em>，<em>BaaS</em>，<em>PaaS</em>和<em>IaaS</em>这四种云计算服务模式，并分析之间的联系和区别。</p>","more":"<h2 id=\"四种服务模式介绍\"><a href=\"#四种服务模式介绍\" class=\"headerlink\" title=\"四种服务模式介绍\"></a>四种服务模式介绍</h2><ul>\n<li>SaaS（Software as a Service）：软件即服务，<em>SaaS</em>公司提供完整并可直接使用的应用程序，用户通过网页浏览器即可接入使用。比较知名的<em>SaaS</em>有<em>GoToMeeting</em>，<em>WebEx</em>和<em>Salesforce</em>。</li>\n<li>BaaS（Backend as a Service）：后端即服务，为移动应用开发者提供后端云服务，包括云端数据存储、账户管理和消息推送等，简化了应用开发流程。这里推荐一篇对<em>BaaS</em>介绍的<a href=\"http://www.jianshu.com/p/4381f0a0692e\" target=\"_blank\" rel=\"noopener\">文章</a>。</li>\n<li>PaaS（Platform as a Service）：平台即服务，也被叫做中间件。用户通过<em>Internet</em>可以使用<em>PaaS</em>公司在网上提供的各种开发和分发应用的解决方案，比如虚拟服务器和操作系统等，软件的开发和运行都可以在提供的平台上进行。不仅节约了硬件成本，更大大提高了协作开发的效率。比较知名的<em>PaaS</em>有<em>Google App Engine</em>，<em>Microsoft Azure</em>和<em>AppFog</em>。</li>\n<li>IaaS（Infrastructure as a Service）：基础设施即服务，用户通过租用<em>IaaS</em>公司的服务器，存储和网络硬件，利用<em>Internet</em>就可以完善地获取计算机基础设施服务，大大节约了硬件成本。比较知名的<em>IaaS</em>有<em>Amazon</em>，<em>Microsoft</em>和<em>Aliyun</em>等。</li>\n</ul>\n<h2 id=\"四种服务模式的关系\"><a href=\"#四种服务模式的关系\" class=\"headerlink\" title=\"四种服务模式的关系\"></a>四种服务模式的关系</h2><ul>\n<li><em>PaaS</em>构建在<em>IaaS</em>之上，在基础架构之外还提供了业务软件的运行环境。</li>\n<li><em>SaaS</em>同<em>PaaS</em>的区别在于，使用<em>SaaS</em>的不是软件的开发人员，而是软件的最终用户。</li>\n<li><em>BaaS</em>属于<em>PaaS</em>的范畴，但两者也有区别。<em>BaaS</em>简化了应用开发流程，而<em>PaaS</em>简化了应用部署流程。</li>\n</ul>\n<p><img src=\"/2017/03/23/introduction-to-four-service-of-cloud-computing/Introduction-to-four-service-of-cloud-computing.jpg\" alt=\"云计算的四种服务模式介绍\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.jianshu.com/p/6148c47792c3\" target=\"_blank\" rel=\"noopener\">云计算的三种服务模式</a></li>\n<li><a href=\"http://www.jianshu.com/p/4381f0a0692e\" target=\"_blank\" rel=\"noopener\">三分钟了解什么是 BaaS</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Git速查手册（第三版）","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2020-09-29T07:13:42.000Z","_content":"\n本文是对[Git速查手册（第二版）](https://answerywj.com/2019/02/12/git-help-v2/)的更新，补充了一些近期使用或者收集的一些命令。\n\n-----\n<!--more-->\n\n## 设置Git\n\n### 版本\n> `Git`下载地址：[https://git-scm.com/downloads](https://git-scm.com/downloads)，推荐使用`v1.8`及以上版本。 \n\n查看`Git`版本：\n```\n$ git --version\n```\n\n### 用户信息\n`Git`配置分为三个级别：\n- `--system`：系统级，位于 `/etc/gitconfig`；\n- `--global`：用户级，位于 `~/.gitconfig`；\n- `--local`：仓库级，位于 `[repo]/.git/config`，为*默认级别且优先级最高*；\n\n删除`global`用户信息，防止不同`Git`服务之间冲突：\n```\n$ git config --global --unset user.name\n$ git config --global --unset user.email\n```\n\n配置用户名：\n```\n$ git config --local user.name \"username\"\n$ git config --local user.email \"email\"\n```\n\n保存用户凭证，若同时使用不同的`Git`服务，不推荐使用：\n```\n$ git config --global credential.helper store\n```\n> 执行后，下次操作输入的用户名和密码会被保存，后续不必手动输入用户名和密码。\n\n配置超时时间：\n```\n$ git config --global credential.helper 'cache --timeout=3600'\n```\n\n根据目录配置用户信息，需要使用`v2.13.0`及以上版本：\n- 首先修改用户目录下的 `.gitconfig`，通过 `includeIf` 配置不同目录的配置文件：\n```diff\n- [user]\n- \tname = weijie.yuan\n- \temail = weijie.yuan@gitlab.com\n\n+ [includeIf \"gitdir:~/github/\"]\n+     path = .gitconfig-github\n+ [includeIf \"gitdir:~/gitlab/\"]\n+     path = .gitconfig-gitlab\n```\n\n- 根据配置的 `path`，分别创建 `.gitconfig-github` 文件和 `.gitconfig-gitlab` 文件：\n```\n$ vi .gitconfig-github\n[user]\n\tname = weijie.yuan\n\temail = weijie.yuan@github.com\n\n$ vi .gitconfig-gitlab\n[user]\n\tname = weijie.yuan\n\temail = weijie.yuan@gitlab.com\n```\n`includeIf` 配置有如下规则：\n- 家目录下的 `.gitconfig` ，`includeIf` 后面的 `path` 最后需要 `/` 结尾；\n- 家目录下的 `.gitconfig` ，原有的 `user` 部分需要删除；\n- 家目录下的 `.gitconfig` ，`includeIf`中配置的各个目录，不能是包含关系；\n\n### 克隆协议\n一般`Git`服务默认都支持`SSH`和`HTTPS`，`SSH`支持的原生`Git`协议速度最快，`HTTPS`除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。\n\n#### SSH\n检查本机`SSH`公钥，若存在，则将`id_rsa.pub`添加到`Git`服务的`SSH keys`：\n```\n$ ls ~/.ssh\n```\n\n若不存在，则生成：\n- 单个`Git`服务\n```\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n- 多个`Git`服务\n```\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\" -f \"git1_id_rsa\"\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\" -f \"git2_id_rsa\n\n# 创建配置文件\n$ vi ~/.ssh/config\n# git1\nHost git1.com\nHostName git1.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/git1_id_rsa\n\n# git2\nHost git2.com\nHostName git2.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/git2_id_rsa\n```\n\n配置完成后，再次检查ssh连接情况；若不生效，则重启后再尝试：\n```\n$ ssh -T git@github.com\nHi! You’ve successfully authenticated, but GitHub does not provide shell access.\n```\n> 若出现上述信息，则表示设置成功。\n\n克隆：\n```\n$ git clone git@git.server:test.git\n```\n\n\n#### HTTPS\n关闭`ssl`校验：\n```\n$ git config --global http.sslverify false\n```\n\n克隆：\n```\n$ git clone https://git.server/test.git\n```\n\n### 工具配置\n配置`diff`和`merge`工具，可以通过`git difftool --tool-help`查看支持的工具集合，推荐使用`meld`。\n- `Linux` or `MacOS`：\n```\n$ git config --global diff.tool meld\n$ git config --global merge.tool meld\n```\n- `Windows`：\n\n```\n> git config --global diff.tool meld\n> git config --global merge.tool meld\n> git config --global difftool.bc3.path 'C:\\Program Files (x86)\\Meld\\Meld.exe'\n> git config --global mergetool.meld.path 'C:\\Program Files (x86)\\Meld\\Meld.exe'\n> git config --global difftool.meld.path 'C:\\Program Files (x86)\\Meld\\Meld.exe'\n```\n\n配置显示颜色：\n```\n$ git config --global color.ui.true\n```\n\n配置`Git`操作别名，示例：\n```\n$ git config --global alias checkout co \n```\n> 上面的命令将`checkout`设置为别名`co`。\n\n### 查看所有配置\n```\n$ git config --local --list\n$ git config --global --list\n$ git config --system --list\n```\n\n## 工作流\n![工作流](git-work-flow.jpg)\n\n工作区就是你的本地仓库文件夹，不过其中的`.git`目录不属于工作区，而是版本库，里面存了很多东西，其中最重要的就是称为`stage`（或者叫`index`）的暂存区，还有`Git`为我们自动创建的第一个分支`master`，以及指向`master`的一个指针叫`HEAD`。  \n\n现在来解释一下前面的添加和提交操作：  \n1. `git add`：把文件修改添加到暂存区；\n2. `git commit`：把暂存区的所有内容提交到当前分支，即版本区；\n\n## 基本操作\n获取远程仓库：\n```\n$ git clone git@github.com:USERNAME/repo.git\n```\n\n将本地的仓库添加到远程：\n```\n$ cd repo\n$ git init\n$ git remote add origin git@github.com:USERNAME/repo.git\n```\n> `origin`就是一个名字，是`git`为你默认创建的指向这个远程代码库的标签。\n\n添加修改到暂存区：\n```\n$ git add <filename> \n$ git add .  # 添加当前目录所有修改过的文件  \n$ git add *  # 递归地添加执行命令时所在的目录中的所有文件\n```\n\n提交修改到版本区：\n```\n$ git commit -m \"commit message\"\n$ git commit -am \"commit message\" # am：将添加和提交合并为一步，但只对本来就存在的文件有效\n```\n> ``commit message``的填写可以参考[写好 Git Commit 信息的 7 个建议](http://blog.jobbole.com/92713/)。\n\n\n推送修改到远程服务器：\n```\n$ git push -u origin <feature-branch-name>\n```\n> ``-u``选项可以将本地分支与远程分支关联,下次``git pull``操作时可以不带参数.具体参见[这里](http://stackoverflow.com/questions/5697750/what-exactly-does-the-u-do-git-push-u-origin-master-vs-git-push-origin-ma)。\n\n查看远程仓库：\n```\n$ git remote -v\norigin git@github.com:USERNAME/repo.git (push)\norigin git@github.com:USERNAME/repo.git (fetch)\n```\n\n添加上游仓库：\n```\n$ git remote add upstream git@github.com:USERNAME/repo.git\n```\n\n`fork`后同步上游仓库的更新：\n``` \n$ git remote -v\norigin  git@github.com:USERNAME/repo.git (push)\norigin  git@github.com:USERNAME/repo.git (fetch)\nupstream  git@github.com:USERNAME/repo.git  (push)\nupstream  git@github.com:USERNAME/repo.git (fetch)\n\n$ git fetch upstream \n$ git difftool <branch-name> upstream/master\n$ git merge upstream/master\n$ git mergetool\n```\n\n代码引用在`Git`上有``submodule``和``subtree``两种方式，推荐使用[subtree](http://aoxuis.me/post/2013-08-06-git-subtree)方式：\n``` \n# 第一次初始化\n$ git remote add -f <remote-subtree-repository-name> <remote-subtree-repository-url>\n$ git subtree add --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name> --squash\n\n# 同步subtree的更新\n$ git subtree pull --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name> --squash\n\n# 推送到远程subtree库\n$ git subtree push --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name>\n```\n\n## 分支\n查看所有分支，有``*``标记的是当前分支：\n```\n$ git branch -a\n```\n\n创建本地分支：\n```\n$ git branch <newbranch>\n```\n\n创建并切换本地分支：\n```\n$ git checkout -b <newbranch>\n```\n\n从标签创建分支：\n```\n$ git branch <branch> <tagname>\n$ git checkout <branch> # 切换到新建分支\n```\n\n推送新建本地分支到远程：\n```\n$ git push -u origin <remote-branch-name>\n  or\n$ git push --set-upstream origin <remote-branch-name>\n```\n\n删除本地分支：\n```\n$ git branch -d <branch>\n```\n> 若当前分支因为有修改未提交或其它情况不能删除，请使用``-D``选项强制删除。\n\n删除远程分支(三种方法)：\n```\n$ git push origin --delete <remote-branch-name>\n$ git push origin -d <remote-branch-name>\n$ git push origin :<remote-branch-name>\n```\n\n清除无用的分支：\n```\n$ git remote prune origin\n```\n> 说明：remote上的一个分支被其他人删除后，需要更新本地的分支列表。\n\n获取远程分支到本地已有分支：\n```\n$ git branch --set-upstream <local-branch> origin/branch\n```\n\n获取远程分支到本地并新建本地分支：\n```\n$ git checkout -b <local-branch> <remote-branch>\n```\n\n同步当前分支的更新，使用``git pull``并不保险：\n```\n# 下载最新的代码到远程跟踪分支, 即origin/<branch-name>\n$ git fetch origin <branch-name> \n# 查看更新内容\n$ git difftool <branch-name> origin/<branch-name>\n# 尝试合并远程跟踪分支的代码到本地分支 \n$ git merge origin/<branch-name>\n# 借助mergetool解决冲突              \n$ git mergetool                               \n```\n\n同步其它分支的更新，本例拉取``master``分支更新：\n```\n$ git fetch origin master\n$ git difftool <branch-name> origin/master\n$ git merge origin/master\n$ git mergetool\n```\n\n查看某个`<commit id>`属于哪个分支:\n```\n$ git branch -a --contains <commit id>\n```\n\n## 标签\n查看标签：\n```\n$ git tag\n```\n\n创建标签：\n``` \n$ git tag -a <tagname> -m \"tag message\" # 创建标签在当前最新提交的commit上\n$ git tag -a <tagname> -m \"tag message\" <commit id> # 创建标签在指定的commit上\n```\n\n推送标签到远程服务器：\n```\n$ git push origin <tagname> # 推送一个本地标签\n$ git push origin --tags # 推送全部未推送过的本地标签\n```\n\n删除标签：\n```\n$ git tag -d <tagname> # 删除一个本地标签\n$ git push origin :refs/tags/<tagname> # 删除一个远程标签\n```\n\n## 撤销与回退\n查看当前仓库状态：\n```\n$ git status\n```\n\n查看文件更改：\n```\n$ git difftool <filename>\n$ git mergetool <filename>\n```\n\n查看提交历史：\n```\n$ git log\n$ git log --pretty=oneline #只保留commit id 和 commit message\n```\n\n撤销工作区``Tracked files``的修改：\n```\n$ git checkout -- <filename>\n```\n\n撤销工作区``Untracked files``的修改：\n- n：查看将会删除的文件，防止误删；\n- f：`Untracked`的文件；\n- d：`Untracked`的目录；\n- x：包含`gitignore`的`Untracked`文件和目录一并删掉，慎用！；  \n\n```\ngit clean -nfd\n```\n\n回退版本区(`git commit`)和暂存区(`git add`)，不删除工作空间代码：\n```\n$ git reset --mixed HEAD^ # --mixed为默认参数\n$ git reset HEAD^\n```\n\n回退版本区(`git commit`)，暂存区(`git add`)不回退，不删除工作空间代码：\n```\n$ git reset --soft HEAD^\n```\n\n回退版本区(`git commit`)和暂存区(`git add`)，并删除工作空间代码(不包括``Untracked files``)，执行后直接恢复到指定`<commit-id>`状态：\n```\n$ git reset --hard <commit-id>\n```\n> `HEAD`表示当前版本，``HEAD^``表示上个版本，``HEAD^^``表示上上个版本，上100个版本可以表示为``HEAD~100``以此类推。\n\n回退版本后，若需要返回原来的版本，会发现找不到未来的``commit id``，则需要查看操作命令历史进行查找：\n```\n$ git reflog\n```\n\n从版本库删除文件：\n```\n$ git rm <filename>\n```\n\n若你的代码已经``push``到线上，则推荐使用下面这个命令回滚：\n```\n$ git revert <commit-id>\n```\n> ``revert``是用一次新的``commit``来回滚之前的``commit``，更安全;``reset``则是直接删除指定的``commit``，若直接``push``会导致冲突。\n\n## 暂存\n当你需要切换分支时，若当前工作区还有些修改没有完成、又不适合提交的，操作切换分支是会提示出错的，这时就需要将这些修改暂存起来：\n```\n$ git stash save \"message\"\n```\n\n查看:\n```\n$ git stash list\n```\n\n恢复:\n```\n$ git stash pop [--index] [stash@{num}]　\n  or\n$ git stash apply [--index] [stash@{num}]　# 不删除已恢复的进度.\n```\n> ``--index``表示不仅恢复工作区,还会恢复暂存区；``num``是你要恢复的操作的序列号,默认恢复最新进度。\n\n删除进度:\n```\n$ git stash drop [stash@{num}] # 删除指定进度\n$ git stash clear # 删除所有\n```\n\n## 清理仓库\n### 清理无用的分支和标签\n```\n$ git branch -d <branch-name>\n$ git tag -d <tag-name>\n$ git remote prune origin\n$ git pull\n```\n\n### 清理大文件\n- 查看`git`相关文件占用空间：\n```\n$ git count-objects -v\n$ du -sh .git\n```\n\n- 寻找大文件`ID`：\n```\n$ git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10\n```\n> 输出的第一列是文件`ID`，第二列表示文件（`blob`）或目录（`tree`），第三列是文件大小，此处筛选了最大的10条。\n\n- 获取文件名与`ID`映射：\n```\n$ git rev-list --objects --all | grep \"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10 | awk '{print$1}')\"\n```\n\n- 从所有提交中删除文件：\n```\n$ git filter-branch --tree-filter 'rm -rf xxx' HEAD --all\n$ git pull\n```\n\n- 清理`.git`目录：\n```\n$ git gc --prune=now\n```\n> 在执行`push`操作时，`git`会自动执行一次`gc`操作，不过只有`loose object`达到一定数量后才会真正调用，建议手动执行。\n\n### 处理大型二进制文件\n由于`Git`在存储二进制文件时效率不高，所以需要借助[第三方组件](http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym)。\n\n## 忽略特殊文件\n当你的仓库中有一些文件，类似密码或者数据库文件不需要提交但又必须放在仓库目录下，每次``git status``都会提示``Untracked``，看着让人很不爽，提供两种方法解决这个问题\n\n### 本地\n在代码仓库目录创建一个``.gitignore``文件，编写规则如下：\n```\ntmp/  # 忽略tmp文件夹下所有内容\n*.ini # 忽略所有ini文件\n!data/ #忽略除了data文件夹的所有内容\n```\n> [``.gitignore``模版](https://github.com/github/gitignore)\n\n### 全局\n在用户目录创建一个``.gitignore_global``文件，编写规则同``.gitignore``，并修改``~/.gitconfig``：\n```\n[core]\n\texcludesfile = ~/.gitignore_global\n```\n\n如果添加的忽略对象已经`Tracked`，纳入了版本管理中，则需要在代码仓库中先把本地缓存删除,改变成`Untracked`状态:\n```\n$ git rm -r --cached .\n```\n\n## 奇技淫巧\n### 重写历史（慎用！）\n```\n$ git rebase -i [git-hash| head~n]\n$ git push -f # 不强制 push 会多一条 merge 提交信息\n```\n> 其中`git-hash`是你要开始进行`rebase`的`commit`的`hash`，而`head~n`则是从`HEAD`向前推`n`个`commit`\n\n\n### 全局更换电子邮件\n```\ngit filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_EMAIL\" = \"xxx@localhost\" ];\n        then\n                GIT_AUTHOR_NAME=\"xxx\";\n                GIT_AUTHOR_EMAIL=\"xxx@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD --all\n```\n\n## 帮助\n查看帮助：\n```\n$ git --help\n```\n\n## Reference\n1. [廖雪峰老师的git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n2. [常用Git命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n3. [Git-Book](https://git-scm.com/book/en/v2)\n4. [Git-Reference](https://git-scm.com/docs)\n5. [Git push与pull的默认行为](https://segmentfault.com/a/1190000002783245)\n6. [git stash 详解](http://www.tuicool.com/articles/rUBNBvI)\n\n-----\n\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n","source":"_posts/git-help-v3.md","raw":"---\ntitle: Git速查手册（第三版）\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - git\ndate: 2020-09-29 15:13:42\ncategories: Git\n---\n\n本文是对[Git速查手册（第二版）](https://answerywj.com/2019/02/12/git-help-v2/)的更新，补充了一些近期使用或者收集的一些命令。\n\n-----\n<!--more-->\n\n## 设置Git\n\n### 版本\n> `Git`下载地址：[https://git-scm.com/downloads](https://git-scm.com/downloads)，推荐使用`v1.8`及以上版本。 \n\n查看`Git`版本：\n```\n$ git --version\n```\n\n### 用户信息\n`Git`配置分为三个级别：\n- `--system`：系统级，位于 `/etc/gitconfig`；\n- `--global`：用户级，位于 `~/.gitconfig`；\n- `--local`：仓库级，位于 `[repo]/.git/config`，为*默认级别且优先级最高*；\n\n删除`global`用户信息，防止不同`Git`服务之间冲突：\n```\n$ git config --global --unset user.name\n$ git config --global --unset user.email\n```\n\n配置用户名：\n```\n$ git config --local user.name \"username\"\n$ git config --local user.email \"email\"\n```\n\n保存用户凭证，若同时使用不同的`Git`服务，不推荐使用：\n```\n$ git config --global credential.helper store\n```\n> 执行后，下次操作输入的用户名和密码会被保存，后续不必手动输入用户名和密码。\n\n配置超时时间：\n```\n$ git config --global credential.helper 'cache --timeout=3600'\n```\n\n根据目录配置用户信息，需要使用`v2.13.0`及以上版本：\n- 首先修改用户目录下的 `.gitconfig`，通过 `includeIf` 配置不同目录的配置文件：\n```diff\n- [user]\n- \tname = weijie.yuan\n- \temail = weijie.yuan@gitlab.com\n\n+ [includeIf \"gitdir:~/github/\"]\n+     path = .gitconfig-github\n+ [includeIf \"gitdir:~/gitlab/\"]\n+     path = .gitconfig-gitlab\n```\n\n- 根据配置的 `path`，分别创建 `.gitconfig-github` 文件和 `.gitconfig-gitlab` 文件：\n```\n$ vi .gitconfig-github\n[user]\n\tname = weijie.yuan\n\temail = weijie.yuan@github.com\n\n$ vi .gitconfig-gitlab\n[user]\n\tname = weijie.yuan\n\temail = weijie.yuan@gitlab.com\n```\n`includeIf` 配置有如下规则：\n- 家目录下的 `.gitconfig` ，`includeIf` 后面的 `path` 最后需要 `/` 结尾；\n- 家目录下的 `.gitconfig` ，原有的 `user` 部分需要删除；\n- 家目录下的 `.gitconfig` ，`includeIf`中配置的各个目录，不能是包含关系；\n\n### 克隆协议\n一般`Git`服务默认都支持`SSH`和`HTTPS`，`SSH`支持的原生`Git`协议速度最快，`HTTPS`除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。\n\n#### SSH\n检查本机`SSH`公钥，若存在，则将`id_rsa.pub`添加到`Git`服务的`SSH keys`：\n```\n$ ls ~/.ssh\n```\n\n若不存在，则生成：\n- 单个`Git`服务\n```\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n- 多个`Git`服务\n```\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\" -f \"git1_id_rsa\"\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\" -f \"git2_id_rsa\n\n# 创建配置文件\n$ vi ~/.ssh/config\n# git1\nHost git1.com\nHostName git1.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/git1_id_rsa\n\n# git2\nHost git2.com\nHostName git2.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/git2_id_rsa\n```\n\n配置完成后，再次检查ssh连接情况；若不生效，则重启后再尝试：\n```\n$ ssh -T git@github.com\nHi! You’ve successfully authenticated, but GitHub does not provide shell access.\n```\n> 若出现上述信息，则表示设置成功。\n\n克隆：\n```\n$ git clone git@git.server:test.git\n```\n\n\n#### HTTPS\n关闭`ssl`校验：\n```\n$ git config --global http.sslverify false\n```\n\n克隆：\n```\n$ git clone https://git.server/test.git\n```\n\n### 工具配置\n配置`diff`和`merge`工具，可以通过`git difftool --tool-help`查看支持的工具集合，推荐使用`meld`。\n- `Linux` or `MacOS`：\n```\n$ git config --global diff.tool meld\n$ git config --global merge.tool meld\n```\n- `Windows`：\n\n```\n> git config --global diff.tool meld\n> git config --global merge.tool meld\n> git config --global difftool.bc3.path 'C:\\Program Files (x86)\\Meld\\Meld.exe'\n> git config --global mergetool.meld.path 'C:\\Program Files (x86)\\Meld\\Meld.exe'\n> git config --global difftool.meld.path 'C:\\Program Files (x86)\\Meld\\Meld.exe'\n```\n\n配置显示颜色：\n```\n$ git config --global color.ui.true\n```\n\n配置`Git`操作别名，示例：\n```\n$ git config --global alias checkout co \n```\n> 上面的命令将`checkout`设置为别名`co`。\n\n### 查看所有配置\n```\n$ git config --local --list\n$ git config --global --list\n$ git config --system --list\n```\n\n## 工作流\n![工作流](git-work-flow.jpg)\n\n工作区就是你的本地仓库文件夹，不过其中的`.git`目录不属于工作区，而是版本库，里面存了很多东西，其中最重要的就是称为`stage`（或者叫`index`）的暂存区，还有`Git`为我们自动创建的第一个分支`master`，以及指向`master`的一个指针叫`HEAD`。  \n\n现在来解释一下前面的添加和提交操作：  \n1. `git add`：把文件修改添加到暂存区；\n2. `git commit`：把暂存区的所有内容提交到当前分支，即版本区；\n\n## 基本操作\n获取远程仓库：\n```\n$ git clone git@github.com:USERNAME/repo.git\n```\n\n将本地的仓库添加到远程：\n```\n$ cd repo\n$ git init\n$ git remote add origin git@github.com:USERNAME/repo.git\n```\n> `origin`就是一个名字，是`git`为你默认创建的指向这个远程代码库的标签。\n\n添加修改到暂存区：\n```\n$ git add <filename> \n$ git add .  # 添加当前目录所有修改过的文件  \n$ git add *  # 递归地添加执行命令时所在的目录中的所有文件\n```\n\n提交修改到版本区：\n```\n$ git commit -m \"commit message\"\n$ git commit -am \"commit message\" # am：将添加和提交合并为一步，但只对本来就存在的文件有效\n```\n> ``commit message``的填写可以参考[写好 Git Commit 信息的 7 个建议](http://blog.jobbole.com/92713/)。\n\n\n推送修改到远程服务器：\n```\n$ git push -u origin <feature-branch-name>\n```\n> ``-u``选项可以将本地分支与远程分支关联,下次``git pull``操作时可以不带参数.具体参见[这里](http://stackoverflow.com/questions/5697750/what-exactly-does-the-u-do-git-push-u-origin-master-vs-git-push-origin-ma)。\n\n查看远程仓库：\n```\n$ git remote -v\norigin git@github.com:USERNAME/repo.git (push)\norigin git@github.com:USERNAME/repo.git (fetch)\n```\n\n添加上游仓库：\n```\n$ git remote add upstream git@github.com:USERNAME/repo.git\n```\n\n`fork`后同步上游仓库的更新：\n``` \n$ git remote -v\norigin  git@github.com:USERNAME/repo.git (push)\norigin  git@github.com:USERNAME/repo.git (fetch)\nupstream  git@github.com:USERNAME/repo.git  (push)\nupstream  git@github.com:USERNAME/repo.git (fetch)\n\n$ git fetch upstream \n$ git difftool <branch-name> upstream/master\n$ git merge upstream/master\n$ git mergetool\n```\n\n代码引用在`Git`上有``submodule``和``subtree``两种方式，推荐使用[subtree](http://aoxuis.me/post/2013-08-06-git-subtree)方式：\n``` \n# 第一次初始化\n$ git remote add -f <remote-subtree-repository-name> <remote-subtree-repository-url>\n$ git subtree add --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name> --squash\n\n# 同步subtree的更新\n$ git subtree pull --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name> --squash\n\n# 推送到远程subtree库\n$ git subtree push --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name>\n```\n\n## 分支\n查看所有分支，有``*``标记的是当前分支：\n```\n$ git branch -a\n```\n\n创建本地分支：\n```\n$ git branch <newbranch>\n```\n\n创建并切换本地分支：\n```\n$ git checkout -b <newbranch>\n```\n\n从标签创建分支：\n```\n$ git branch <branch> <tagname>\n$ git checkout <branch> # 切换到新建分支\n```\n\n推送新建本地分支到远程：\n```\n$ git push -u origin <remote-branch-name>\n  or\n$ git push --set-upstream origin <remote-branch-name>\n```\n\n删除本地分支：\n```\n$ git branch -d <branch>\n```\n> 若当前分支因为有修改未提交或其它情况不能删除，请使用``-D``选项强制删除。\n\n删除远程分支(三种方法)：\n```\n$ git push origin --delete <remote-branch-name>\n$ git push origin -d <remote-branch-name>\n$ git push origin :<remote-branch-name>\n```\n\n清除无用的分支：\n```\n$ git remote prune origin\n```\n> 说明：remote上的一个分支被其他人删除后，需要更新本地的分支列表。\n\n获取远程分支到本地已有分支：\n```\n$ git branch --set-upstream <local-branch> origin/branch\n```\n\n获取远程分支到本地并新建本地分支：\n```\n$ git checkout -b <local-branch> <remote-branch>\n```\n\n同步当前分支的更新，使用``git pull``并不保险：\n```\n# 下载最新的代码到远程跟踪分支, 即origin/<branch-name>\n$ git fetch origin <branch-name> \n# 查看更新内容\n$ git difftool <branch-name> origin/<branch-name>\n# 尝试合并远程跟踪分支的代码到本地分支 \n$ git merge origin/<branch-name>\n# 借助mergetool解决冲突              \n$ git mergetool                               \n```\n\n同步其它分支的更新，本例拉取``master``分支更新：\n```\n$ git fetch origin master\n$ git difftool <branch-name> origin/master\n$ git merge origin/master\n$ git mergetool\n```\n\n查看某个`<commit id>`属于哪个分支:\n```\n$ git branch -a --contains <commit id>\n```\n\n## 标签\n查看标签：\n```\n$ git tag\n```\n\n创建标签：\n``` \n$ git tag -a <tagname> -m \"tag message\" # 创建标签在当前最新提交的commit上\n$ git tag -a <tagname> -m \"tag message\" <commit id> # 创建标签在指定的commit上\n```\n\n推送标签到远程服务器：\n```\n$ git push origin <tagname> # 推送一个本地标签\n$ git push origin --tags # 推送全部未推送过的本地标签\n```\n\n删除标签：\n```\n$ git tag -d <tagname> # 删除一个本地标签\n$ git push origin :refs/tags/<tagname> # 删除一个远程标签\n```\n\n## 撤销与回退\n查看当前仓库状态：\n```\n$ git status\n```\n\n查看文件更改：\n```\n$ git difftool <filename>\n$ git mergetool <filename>\n```\n\n查看提交历史：\n```\n$ git log\n$ git log --pretty=oneline #只保留commit id 和 commit message\n```\n\n撤销工作区``Tracked files``的修改：\n```\n$ git checkout -- <filename>\n```\n\n撤销工作区``Untracked files``的修改：\n- n：查看将会删除的文件，防止误删；\n- f：`Untracked`的文件；\n- d：`Untracked`的目录；\n- x：包含`gitignore`的`Untracked`文件和目录一并删掉，慎用！；  \n\n```\ngit clean -nfd\n```\n\n回退版本区(`git commit`)和暂存区(`git add`)，不删除工作空间代码：\n```\n$ git reset --mixed HEAD^ # --mixed为默认参数\n$ git reset HEAD^\n```\n\n回退版本区(`git commit`)，暂存区(`git add`)不回退，不删除工作空间代码：\n```\n$ git reset --soft HEAD^\n```\n\n回退版本区(`git commit`)和暂存区(`git add`)，并删除工作空间代码(不包括``Untracked files``)，执行后直接恢复到指定`<commit-id>`状态：\n```\n$ git reset --hard <commit-id>\n```\n> `HEAD`表示当前版本，``HEAD^``表示上个版本，``HEAD^^``表示上上个版本，上100个版本可以表示为``HEAD~100``以此类推。\n\n回退版本后，若需要返回原来的版本，会发现找不到未来的``commit id``，则需要查看操作命令历史进行查找：\n```\n$ git reflog\n```\n\n从版本库删除文件：\n```\n$ git rm <filename>\n```\n\n若你的代码已经``push``到线上，则推荐使用下面这个命令回滚：\n```\n$ git revert <commit-id>\n```\n> ``revert``是用一次新的``commit``来回滚之前的``commit``，更安全;``reset``则是直接删除指定的``commit``，若直接``push``会导致冲突。\n\n## 暂存\n当你需要切换分支时，若当前工作区还有些修改没有完成、又不适合提交的，操作切换分支是会提示出错的，这时就需要将这些修改暂存起来：\n```\n$ git stash save \"message\"\n```\n\n查看:\n```\n$ git stash list\n```\n\n恢复:\n```\n$ git stash pop [--index] [stash@{num}]　\n  or\n$ git stash apply [--index] [stash@{num}]　# 不删除已恢复的进度.\n```\n> ``--index``表示不仅恢复工作区,还会恢复暂存区；``num``是你要恢复的操作的序列号,默认恢复最新进度。\n\n删除进度:\n```\n$ git stash drop [stash@{num}] # 删除指定进度\n$ git stash clear # 删除所有\n```\n\n## 清理仓库\n### 清理无用的分支和标签\n```\n$ git branch -d <branch-name>\n$ git tag -d <tag-name>\n$ git remote prune origin\n$ git pull\n```\n\n### 清理大文件\n- 查看`git`相关文件占用空间：\n```\n$ git count-objects -v\n$ du -sh .git\n```\n\n- 寻找大文件`ID`：\n```\n$ git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10\n```\n> 输出的第一列是文件`ID`，第二列表示文件（`blob`）或目录（`tree`），第三列是文件大小，此处筛选了最大的10条。\n\n- 获取文件名与`ID`映射：\n```\n$ git rev-list --objects --all | grep \"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10 | awk '{print$1}')\"\n```\n\n- 从所有提交中删除文件：\n```\n$ git filter-branch --tree-filter 'rm -rf xxx' HEAD --all\n$ git pull\n```\n\n- 清理`.git`目录：\n```\n$ git gc --prune=now\n```\n> 在执行`push`操作时，`git`会自动执行一次`gc`操作，不过只有`loose object`达到一定数量后才会真正调用，建议手动执行。\n\n### 处理大型二进制文件\n由于`Git`在存储二进制文件时效率不高，所以需要借助[第三方组件](http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym)。\n\n## 忽略特殊文件\n当你的仓库中有一些文件，类似密码或者数据库文件不需要提交但又必须放在仓库目录下，每次``git status``都会提示``Untracked``，看着让人很不爽，提供两种方法解决这个问题\n\n### 本地\n在代码仓库目录创建一个``.gitignore``文件，编写规则如下：\n```\ntmp/  # 忽略tmp文件夹下所有内容\n*.ini # 忽略所有ini文件\n!data/ #忽略除了data文件夹的所有内容\n```\n> [``.gitignore``模版](https://github.com/github/gitignore)\n\n### 全局\n在用户目录创建一个``.gitignore_global``文件，编写规则同``.gitignore``，并修改``~/.gitconfig``：\n```\n[core]\n\texcludesfile = ~/.gitignore_global\n```\n\n如果添加的忽略对象已经`Tracked`，纳入了版本管理中，则需要在代码仓库中先把本地缓存删除,改变成`Untracked`状态:\n```\n$ git rm -r --cached .\n```\n\n## 奇技淫巧\n### 重写历史（慎用！）\n```\n$ git rebase -i [git-hash| head~n]\n$ git push -f # 不强制 push 会多一条 merge 提交信息\n```\n> 其中`git-hash`是你要开始进行`rebase`的`commit`的`hash`，而`head~n`则是从`HEAD`向前推`n`个`commit`\n\n\n### 全局更换电子邮件\n```\ngit filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_EMAIL\" = \"xxx@localhost\" ];\n        then\n                GIT_AUTHOR_NAME=\"xxx\";\n                GIT_AUTHOR_EMAIL=\"xxx@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD --all\n```\n\n## 帮助\n查看帮助：\n```\n$ git --help\n```\n\n## Reference\n1. [廖雪峰老师的git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n2. [常用Git命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n3. [Git-Book](https://git-scm.com/book/en/v2)\n4. [Git-Reference](https://git-scm.com/docs)\n5. [Git push与pull的默认行为](https://segmentfault.com/a/1190000002783245)\n6. [git stash 详解](http://www.tuicool.com/articles/rUBNBvI)\n\n-----\n\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n","slug":"git-help-v3","published":1,"updated":"2020-11-12T03:47:06.174Z","layout":"post","photos":[],"link":"","_id":"cklumqgex001s79n5zvzg8f75","content":"<p>本文是对<a href=\"https://answerywj.com/2019/02/12/git-help-v2/\">Git速查手册（第二版）</a>的更新，补充了一些近期使用或者收集的一些命令。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"设置Git\"><a href=\"#设置Git\" class=\"headerlink\" title=\"设置Git\"></a>设置Git</h2><h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><blockquote>\n<p><code>Git</code>下载地址：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a>，推荐使用<code>v1.8</code>及以上版本。 </p>\n</blockquote>\n<p>查看<code>Git</code>版本：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h3><p><code>Git</code>配置分为三个级别：</p>\n<ul>\n<li><code>--system</code>：系统级，位于 <code>/etc/gitconfig</code>；</li>\n<li><code>--global</code>：用户级，位于 <code>~/.gitconfig</code>；</li>\n<li><code>--local</code>：仓库级，位于 <code>[repo]/.git/config</code>，为<em>默认级别且优先级最高</em>；</li>\n</ul>\n<p>删除<code>global</code>用户信息，防止不同<code>Git</code>服务之间冲突：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --unset user.name</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --unset user.email</span><br></pre></td></tr></table></figure></p>\n<p>配置用户名：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local user.email <span class=\"string\">\"email\"</span></span><br></pre></td></tr></table></figure></p>\n<p>保存用户凭证，若同时使用不同的<code>Git</code>服务，不推荐使用：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global credential.helper store</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>执行后，下次操作输入的用户名和密码会被保存，后续不必手动输入用户名和密码。</p>\n</blockquote>\n<p>配置超时时间：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global credential<span class=\"selector-class\">.helper</span> <span class=\"string\">'cache --timeout=3600'</span></span><br></pre></td></tr></table></figure></p>\n<p>根据目录配置用户信息，需要使用<code>v2.13.0</code>及以上版本：</p>\n<ul>\n<li><p>首先修改用户目录下的 <code>.gitconfig</code>，通过 <code>includeIf</code> 配置不同目录的配置文件：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- [user]</span></span><br><span class=\"line\"><span class=\"deletion\">- \tname = weijie.yuan</span></span><br><span class=\"line\"><span class=\"deletion\">- \temail = weijie.yuan@gitlab.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ [includeIf \"gitdir:~/github/\"]</span></span><br><span class=\"line\"><span class=\"addition\">+     path = .gitconfig-github</span></span><br><span class=\"line\"><span class=\"addition\">+ [includeIf \"gitdir:~/gitlab/\"]</span></span><br><span class=\"line\"><span class=\"addition\">+     path = .gitconfig-gitlab</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据配置的 <code>path</code>，分别创建 <code>.gitconfig-github</code> 文件和 <code>.gitconfig-gitlab</code> 文件：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi .gitconfig-github</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\tname = weijie.yuan</span><br><span class=\"line\">\temail = weijie.yuan@github.com</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi .gitconfig-gitlab</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\tname = weijie.yuan</span><br><span class=\"line\">\temail = weijie.yuan@gitlab.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>includeIf</code> 配置有如下规则：</p>\n<ul>\n<li>家目录下的 <code>.gitconfig</code> ，<code>includeIf</code> 后面的 <code>path</code> 最后需要 <code>/</code> 结尾；</li>\n<li>家目录下的 <code>.gitconfig</code> ，原有的 <code>user</code> 部分需要删除；</li>\n<li>家目录下的 <code>.gitconfig</code> ，<code>includeIf</code>中配置的各个目录，不能是包含关系；</li>\n</ul>\n<h3 id=\"克隆协议\"><a href=\"#克隆协议\" class=\"headerlink\" title=\"克隆协议\"></a>克隆协议</h3><p>一般<code>Git</code>服务默认都支持<code>SSH</code>和<code>HTTPS</code>，<code>SSH</code>支持的原生<code>Git</code>协议速度最快，<code>HTTPS</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。</p>\n<h4 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h4><p>检查本机<code>SSH</code>公钥，若存在，则将<code>id_rsa.pub</code>添加到<code>Git</code>服务的<code>SSH keys</code>：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">ls</span> ~<span class=\"string\">/.ssh</span></span><br></pre></td></tr></table></figure></p>\n<p>若不存在，则生成：</p>\n<ul>\n<li><p>单个<code>Git</code>服务</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多个<code>Git</code>服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span> -f <span class=\"string\">\"git1_id_rsa\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span> -f <span class=\"string\">\"git2_id_rsa</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建配置文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi ~/.ssh/config</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git1</span></span><br><span class=\"line\">Host git1.com</span><br><span class=\"line\">HostName git1.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/git1_id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git2</span></span><br><span class=\"line\">Host git2.com</span><br><span class=\"line\">HostName git2.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/git2_id_rsa</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>配置完成后，再次检查ssh连接情况；若不生效，则重启后再尝试：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi! You’ve successfully authenticated, <span class=\"keyword\">but</span> GitHub <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> provide shell access.</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>若出现上述信息，则表示设置成功。</p>\n</blockquote>\n<p>克隆：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@git.server:test.git</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h4><p>关闭<code>ssl</code>校验：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global http.sslverify <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>克隆：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://git.server/test.git</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"工具配置\"><a href=\"#工具配置\" class=\"headerlink\" title=\"工具配置\"></a>工具配置</h3><p>配置<code>diff</code>和<code>merge</code>工具，可以通过<code>git difftool --tool-help</code>查看支持的工具集合，推荐使用<code>meld</code>。</p>\n<ul>\n<li><p><code>Linux</code> or <code>MacOS</code>：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global diff.tool meld</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global merge.tool meld</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Windows</code>：</p>\n</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git config --global diff<span class=\"selector-class\">.tool</span> meld</span><br><span class=\"line\">&gt; git config --global merge<span class=\"selector-class\">.tool</span> meld</span><br><span class=\"line\">&gt; git config --global difftool<span class=\"selector-class\">.bc3</span><span class=\"selector-class\">.path</span> <span class=\"string\">'C:\\Program Files (x86)\\Meld\\Meld.exe'</span></span><br><span class=\"line\">&gt; git config --global mergetool<span class=\"selector-class\">.meld</span><span class=\"selector-class\">.path</span> <span class=\"string\">'C:\\Program Files (x86)\\Meld\\Meld.exe'</span></span><br><span class=\"line\">&gt; git config --global difftool<span class=\"selector-class\">.meld</span><span class=\"selector-class\">.path</span> <span class=\"string\">'C:\\Program Files (x86)\\Meld\\Meld.exe'</span></span><br></pre></td></tr></table></figure>\n<p>配置显示颜色：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global color.ui.<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>配置<code>Git</code>操作别名，示例：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global alias checkout co</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上面的命令将<code>checkout</code>设置为别名<code>co</code>。</p>\n</blockquote>\n<h3 id=\"查看所有配置\"><a href=\"#查看所有配置\" class=\"headerlink\" title=\"查看所有配置\"></a>查看所有配置</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local --list</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --list</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--system --list</span><br></pre></td></tr></table></figure>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p><img src=\"/2020/09/29/git-help-v3/git-work-flow.jpg\" alt=\"工作流\"></p>\n<p>工作区就是你的本地仓库文件夹，不过其中的<code>.git</code>目录不属于工作区，而是版本库，里面存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫<code>index</code>）的暂存区，还有<code>Git</code>为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。  </p>\n<p>现在来解释一下前面的添加和提交操作：  </p>\n<ol>\n<li><code>git add</code>：把文件修改添加到暂存区；</li>\n<li><code>git commit</code>：把暂存区的所有内容提交到当前分支，即版本区；</li>\n</ol>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>获取远程仓库：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@github.com:USERNAME/repo.git</span><br></pre></td></tr></table></figure></p>\n<p>将本地的仓库添加到远程：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>cd repo</span><br><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add origin git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>origin</code>就是一个名字，是<code>git</code>为你默认创建的指向这个远程代码库的标签。</p>\n</blockquote>\n<p>添加修改到暂存区：<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> &lt;filename&gt; </span></span><br><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> .  <span class=\"comment\"># 添加当前目录所有修改过的文件  </span></span></span><br><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> *  <span class=\"comment\"># 递归地添加执行命令时所在的目录中的所有文件</span></span></span><br></pre></td></tr></table></figure></p>\n<p>提交修改到版本区：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"commit message\"</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -am <span class=\"string\">\"commit message\"</span> <span class=\"comment\"># am：将添加和提交合并为一步，但只对本来就存在的文件有效</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>commit message</code>的填写可以参考<a href=\"http://blog.jobbole.com/92713/\" target=\"_blank\" rel=\"noopener\">写好 Git Commit 信息的 7 个建议</a>。</p>\n</blockquote>\n<p>推送修改到远程服务器：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> &lt;<span class=\"built_in\">feature</span>-branch-name&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>-u</code>选项可以将本地分支与远程分支关联,下次<code>git pull</code>操作时可以不带参数.具体参见<a href=\"http://stackoverflow.com/questions/5697750/what-exactly-does-the-u-do-git-push-u-origin-master-vs-git-push-origin-ma\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</blockquote>\n<p>查看远程仓库：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (push)</span><br><span class=\"line\">origin git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (fetch)</span><br></pre></td></tr></table></figure></p>\n<p>添加上游仓库：<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote <span class=\"keyword\">add</span><span class=\"bash\"> upstream git@github.com:USERNAME/repo.git</span></span><br></pre></td></tr></table></figure></p>\n<p><code>fork</code>后同步上游仓库的更新：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (push)</span><br><span class=\"line\">origin  git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (fetch)</span><br><span class=\"line\">upstream  git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span>  (push)</span><br><span class=\"line\">upstream  git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (fetch)</span><br><span class=\"line\"></span><br><span class=\"line\">$ git fetch upstream </span><br><span class=\"line\">$ git difftool &lt;branch-name&gt; upstream/master</span><br><span class=\"line\">$ git merge upstream/master</span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>代码引用在<code>Git</code>上有<code>submodule</code>和<code>subtree</code>两种方式，推荐使用<a href=\"http://aoxuis.me/post/2013-08-06-git-subtree\" target=\"_blank\" rel=\"noopener\">subtree</a>方式：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次初始化</span><br><span class=\"line\">$ git remote <span class=\"keyword\">add </span>-f &lt;remote-<span class=\"keyword\">subtree-repository-name&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository-url&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span><span class=\"keyword\">add </span>--prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt; </span>--squash</span><br><span class=\"line\"></span><br><span class=\"line\"># 同步<span class=\"keyword\">subtree的更新</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span>pull --prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt; </span>--squash</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送到远程<span class=\"keyword\">subtree库</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span><span class=\"keyword\">push </span>--prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>查看所有分支，有<code>*</code>标记的是当前分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-a</span><br></pre></td></tr></table></figure></p>\n<p>创建本地分支：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch &lt;<span class=\"keyword\">new</span><span class=\"type\">branch</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建并切换本地分支：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b &lt;<span class=\"keyword\">new</span><span class=\"type\">branch</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>从标签创建分支：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"params\">&lt;branch&gt;</span> <span class=\"params\">&lt;tagname&gt;</span></span><br><span class=\"line\">$ git checkout <span class=\"params\">&lt;branch&gt;</span> <span class=\"meta\"># 切换到新建分支</span></span><br></pre></td></tr></table></figure></p>\n<p>推送新建本地分支到远程：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git push -u origin &lt;remote-branch-name&gt;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git push --<span class=\"keyword\">set</span>-upstream <span class=\"comment\">origin &lt;remote-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>删除本地分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-d &lt;<span class=\"keyword\">branch&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>若当前分支因为有修改未提交或其它情况不能删除，请使用<code>-D</code>选项强制删除。</p>\n</blockquote>\n<p>删除远程分支(三种方法)：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git push origin --delete &lt;remote-branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin -d &lt;remote-branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin <span class=\"symbol\">:&lt;remote-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>清除无用的分支：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git remote prune origin</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>说明：remote上的一个分支被其他人删除后，需要更新本地的分支列表。</p>\n</blockquote>\n<p>获取远程分支到本地已有分支：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --<span class=\"built_in\">set</span>-upstream &lt;<span class=\"built_in\">local</span>-branch&gt; origin/branch</span></span><br></pre></td></tr></table></figure></p>\n<p>获取远程分支到本地并新建本地分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -<span class=\"keyword\">b </span>&lt;local-<span class=\"keyword\">branch&gt; </span>&lt;remote-<span class=\"keyword\">branch&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同步当前分支的更新，使用<code>git pull</code>并不保险：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载最新的代码到远程跟踪分支, 即origin/&lt;branch-name&gt;</span></span><br><span class=\"line\">$ git fetch <span class=\"keyword\">origin </span>&lt;<span class=\"keyword\">branch-name&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># 查看更新内容</span></span><br><span class=\"line\">$ git <span class=\"keyword\">difftool </span>&lt;<span class=\"keyword\">branch-name&gt; </span><span class=\"keyword\">origin/&lt;branch-name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\"># </span>尝试合并远程跟踪分支的代码到本地分支 </span><br><span class=\"line\">$ git merge <span class=\"keyword\">origin/&lt;branch-name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\"># </span>借助mergetool解决冲突              </span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>同步其它分支的更新，本例拉取<code>master</code>分支更新：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin <span class=\"literal\">master</span></span><br><span class=\"line\">$ git difftool <span class=\"tag\">&lt;branch-name&gt;</span> origin/<span class=\"literal\">master</span></span><br><span class=\"line\">$ git merge origin/<span class=\"literal\">master</span></span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>查看某个<code>&lt;commit id&gt;</code>属于哪个分支:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -<span class=\"keyword\">a</span> <span class=\"comment\">--contains &lt;commit id&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>查看标签：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span></span><br></pre></td></tr></table></figure></p>\n<p>创建标签：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> <span class=\"tag\">&lt;tagname&gt;</span> -m <span class=\"string\">\"tag message\"</span> <span class=\"comment\"># 创建标签在当前最新提交的commit上</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> <span class=\"tag\">&lt;tagname&gt;</span> -m <span class=\"string\">\"tag message\"</span> <span class=\"tag\">&lt;commit id&gt;</span> <span class=\"comment\"># 创建标签在指定的commit上</span></span><br></pre></td></tr></table></figure></p>\n<p>推送标签到远程服务器：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push</span> origin &lt;tagname&gt; <span class=\"meta\"># 推送一个本地标签</span></span><br><span class=\"line\">$ git <span class=\"keyword\">push</span> origin --tags <span class=\"meta\"># 推送全部未推送过的本地标签</span></span><br></pre></td></tr></table></figure></p>\n<p>删除标签：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git tag -d &lt;tagname&gt; <span class=\"comment\"># 删除一个本地标签</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin <span class=\"symbol\">:refs/tags/&lt;tagname&gt;</span> <span class=\"comment\"># 删除一个远程标签</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"撤销与回退\"><a href=\"#撤销与回退\" class=\"headerlink\" title=\"撤销与回退\"></a>撤销与回退</h2><p>查看当前仓库状态：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git status</span><br></pre></td></tr></table></figure></p>\n<p>查看文件更改：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git difftool <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br><span class=\"line\">$ git mergetool <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>查看提交历史：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\">#只保留commit id 和 commit message</span></span></span><br></pre></td></tr></table></figure></p>\n<p>撤销工作区<code>Tracked files</code>的修改：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout <span class=\"comment\">-- &lt;filename&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>撤销工作区<code>Untracked files</code>的修改：</p>\n<ul>\n<li>n：查看将会删除的文件，防止误删；</li>\n<li>f：<code>Untracked</code>的文件；</li>\n<li>d：<code>Untracked</code>的目录；</li>\n<li>x：包含<code>gitignore</code>的<code>Untracked</code>文件和目录一并删掉，慎用！；  </li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git clean -nfd</span></span><br></pre></td></tr></table></figure>\n<p>回退版本区(<code>git commit</code>)和暂存区(<code>git add</code>)，不删除工作空间代码：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--mixed HEAD^ # --mixed为默认参数</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span>^</span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)，暂存区(<code>git add</code>)不回退，不删除工作空间代码：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--soft HEAD^</span></span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)和暂存区(<code>git add</code>)，并删除工作空间代码(不包括<code>Untracked files</code>)，执行后直接恢复到指定<code>&lt;commit-id&gt;</code>状态：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard &lt;commit-id&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上个版本，<code>HEAD^^</code>表示上上个版本，上100个版本可以表示为<code>HEAD~100</code>以此类推。</p>\n</blockquote>\n<p>回退版本后，若需要返回原来的版本，会发现找不到未来的<code>commit id</code>，则需要查看操作命令历史进行查找：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git reflog</span><br></pre></td></tr></table></figure></p>\n<p>从版本库删除文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>若你的代码已经<code>push</code>到线上，则推荐使用下面这个命令回滚：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git revert &lt;commit-<span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>revert</code>是用一次新的<code>commit</code>来回滚之前的<code>commit</code>，更安全;<code>reset</code>则是直接删除指定的<code>commit</code>，若直接<code>push</code>会导致冲突。</p>\n</blockquote>\n<h2 id=\"暂存\"><a href=\"#暂存\" class=\"headerlink\" title=\"暂存\"></a>暂存</h2><p>当你需要切换分支时，若当前工作区还有些修改没有完成、又不适合提交的，操作切换分支是会提示出错的，这时就需要将这些修改暂存起来：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git stash save <span class=\"string\">\"message\"</span></span><br></pre></td></tr></table></figure></p>\n<p>查看:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure></p>\n<p>恢复:<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">pop</span> [--<span class=\"keyword\">index</span>] [stash@&#123;num&#125;]　</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">$ git stash apply [--<span class=\"keyword\">index</span>] [stash@&#123;num&#125;]　<span class=\"comment\"># 不删除已恢复的进度.</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>--index</code>表示不仅恢复工作区,还会恢复暂存区；<code>num</code>是你要恢复的操作的序列号,默认恢复最新进度。</p>\n</blockquote>\n<p>删除进度:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">drop</span> [stash@&#123;<span class=\"keyword\">num</span>&#125;] <span class=\"comment\"># 删除指定进度</span></span><br><span class=\"line\">$ git stash <span class=\"keyword\">clear</span> <span class=\"comment\"># 删除所有</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"清理仓库\"><a href=\"#清理仓库\" class=\"headerlink\" title=\"清理仓库\"></a>清理仓库</h2><h3 id=\"清理无用的分支和标签\"><a href=\"#清理无用的分支和标签\" class=\"headerlink\" title=\"清理无用的分支和标签\"></a>清理无用的分支和标签</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git branch -d &lt;branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git tag -d &lt;tag-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote prune origin</span><br><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n<h3 id=\"清理大文件\"><a href=\"#清理大文件\" class=\"headerlink\" title=\"清理大文件\"></a>清理大文件</h3><ul>\n<li><p>查看<code>git</code>相关文件占用空间：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git count-objects -v</span><br><span class=\"line\"><span class=\"variable\">$ </span>du -sh .git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>寻找大文件<code>ID</code>：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git verify-<span class=\"keyword\">pack</span> -v .git/objects/<span class=\"keyword\">pack</span>/*.idx | <span class=\"keyword\">sort</span> -k <span class=\"number\">3</span> -n | tail -<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>输出的第一列是文件<code>ID</code>，第二列表示文件（<code>blob</code>）或目录（<code>tree</code>），第三列是文件大小，此处筛选了最大的10条。</p>\n</blockquote>\n<ul>\n<li><p>获取文件名与<code>ID</code>映射：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rev-list --objects --all <span class=\"params\">| grep \"$(git verify-pack -v .git/objects/pack/*.idx |</span> sort -k <span class=\"number\">3</span> -n <span class=\"params\">| tail -10 |</span> awk <span class=\"string\">'&#123;print$1&#125;'</span>)<span class=\"string\">\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从所有提交中删除文件：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git filter-branch --tree-filter <span class=\"string\">'rm -rf xxx'</span> HEAD --<span class=\"keyword\">all</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理<code>.git</code>目录：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git gc <span class=\"attribute\">--prune</span>=now</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>在执行<code>push</code>操作时，<code>git</code>会自动执行一次<code>gc</code>操作，不过只有<code>loose object</code>达到一定数量后才会真正调用，建议手动执行。</p>\n</blockquote>\n<h3 id=\"处理大型二进制文件\"><a href=\"#处理大型二进制文件\" class=\"headerlink\" title=\"处理大型二进制文件\"></a>处理大型二进制文件</h3><p>由于<code>Git</code>在存储二进制文件时效率不高，所以需要借助<a href=\"http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym\" target=\"_blank\" rel=\"noopener\">第三方组件</a>。</p>\n<h2 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件\"></a>忽略特殊文件</h2><p>当你的仓库中有一些文件，类似密码或者数据库文件不需要提交但又必须放在仓库目录下，每次<code>git status</code>都会提示<code>Untracked</code>，看着让人很不爽，提供两种方法解决这个问题</p>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h3><p>在代码仓库目录创建一个<code>.gitignore</code>文件，编写规则如下：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp/  <span class=\"comment\"># 忽略tmp文件夹下所有内容</span></span><br><span class=\"line\">*<span class=\"string\">.ini</span> <span class=\"comment\"># 忽略所有ini文件</span></span><br><span class=\"line\">!data/ <span class=\"comment\">#忽略除了data文件夹的所有内容</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\"><code>.gitignore</code>模版</a></p>\n</blockquote>\n<h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><p>在用户目录创建一个<code>.gitignore_global</code>文件，编写规则同<code>.gitignore</code>，并修改<code>~/.gitconfig</code>：<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[core]</span></span><br><span class=\"line\">\texcludesfile = ~/.gitignore_global</span><br></pre></td></tr></table></figure></p>\n<p>如果添加的忽略对象已经<code>Tracked</code>，纳入了版本管理中，则需要在代码仓库中先把本地缓存删除,改变成<code>Untracked</code>状态:<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r <span class=\"comment\">--cached .</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"奇技淫巧\"><a href=\"#奇技淫巧\" class=\"headerlink\" title=\"奇技淫巧\"></a>奇技淫巧</h2><h3 id=\"重写历史（慎用！）\"><a href=\"#重写历史（慎用！）\" class=\"headerlink\" title=\"重写历史（慎用！）\"></a>重写历史（慎用！）</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git rebase -i [git-hash| head~n]</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push -f <span class=\"comment\"># 不强制 push 会多一条 merge 提交信息</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>git-hash</code>是你要开始进行<code>rebase</code>的<code>commit</code>的<code>hash</code>，而<code>head~n</code>则是从<code>HEAD</code>向前推<code>n</code>个<code>commit</code></p>\n</blockquote>\n<h3 id=\"全局更换电子邮件\"><a href=\"#全局更换电子邮件\" class=\"headerlink\" title=\"全局更换电子邮件\"></a>全局更换电子邮件</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch <span class=\"comment\">--commit-filter '</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">\"$GIT_AUTHOR_EMAIL\"</span> = <span class=\"string\">\"xxx@localhost\"</span> ];</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">                GIT_AUTHOR_NAME=<span class=\"string\">\"xxx\"</span>;</span><br><span class=\"line\">                GIT_AUTHOR_EMAIL=<span class=\"string\">\"xxx@example.com\"</span>;</span><br><span class=\"line\">                git commit-tree <span class=\"string\">\"$@\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">                git commit-tree <span class=\"string\">\"$@\"</span>;</span><br><span class=\"line\">        fi' HEAD <span class=\"comment\">--all</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h2><p>查看帮助：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git --<span class=\"built_in\">help</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的git教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用Git命令清单</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Git-Book</a></li>\n<li><a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">Git-Reference</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002783245\" target=\"_blank\" rel=\"noopener\">Git push与pull的默认行为</a></li>\n<li><a href=\"http://www.tuicool.com/articles/rUBNBvI\" target=\"_blank\" rel=\"noopener\">git stash 详解</a></li>\n</ol>\n<hr>\n<p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文是对<a href=\"https://answerywj.com/2019/02/12/git-help-v2/\">Git速查手册（第二版）</a>的更新，补充了一些近期使用或者收集的一些命令。</p>\n<hr>","more":"<h2 id=\"设置Git\"><a href=\"#设置Git\" class=\"headerlink\" title=\"设置Git\"></a>设置Git</h2><h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><blockquote>\n<p><code>Git</code>下载地址：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a>，推荐使用<code>v1.8</code>及以上版本。 </p>\n</blockquote>\n<p>查看<code>Git</code>版本：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h3><p><code>Git</code>配置分为三个级别：</p>\n<ul>\n<li><code>--system</code>：系统级，位于 <code>/etc/gitconfig</code>；</li>\n<li><code>--global</code>：用户级，位于 <code>~/.gitconfig</code>；</li>\n<li><code>--local</code>：仓库级，位于 <code>[repo]/.git/config</code>，为<em>默认级别且优先级最高</em>；</li>\n</ul>\n<p>删除<code>global</code>用户信息，防止不同<code>Git</code>服务之间冲突：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --unset user.name</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --unset user.email</span><br></pre></td></tr></table></figure></p>\n<p>配置用户名：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local user.email <span class=\"string\">\"email\"</span></span><br></pre></td></tr></table></figure></p>\n<p>保存用户凭证，若同时使用不同的<code>Git</code>服务，不推荐使用：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global credential.helper store</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>执行后，下次操作输入的用户名和密码会被保存，后续不必手动输入用户名和密码。</p>\n</blockquote>\n<p>配置超时时间：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global credential<span class=\"selector-class\">.helper</span> <span class=\"string\">'cache --timeout=3600'</span></span><br></pre></td></tr></table></figure></p>\n<p>根据目录配置用户信息，需要使用<code>v2.13.0</code>及以上版本：</p>\n<ul>\n<li><p>首先修改用户目录下的 <code>.gitconfig</code>，通过 <code>includeIf</code> 配置不同目录的配置文件：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- [user]</span></span><br><span class=\"line\"><span class=\"deletion\">- \tname = weijie.yuan</span></span><br><span class=\"line\"><span class=\"deletion\">- \temail = weijie.yuan@gitlab.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ [includeIf \"gitdir:~/github/\"]</span></span><br><span class=\"line\"><span class=\"addition\">+     path = .gitconfig-github</span></span><br><span class=\"line\"><span class=\"addition\">+ [includeIf \"gitdir:~/gitlab/\"]</span></span><br><span class=\"line\"><span class=\"addition\">+     path = .gitconfig-gitlab</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据配置的 <code>path</code>，分别创建 <code>.gitconfig-github</code> 文件和 <code>.gitconfig-gitlab</code> 文件：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi .gitconfig-github</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\tname = weijie.yuan</span><br><span class=\"line\">\temail = weijie.yuan@github.com</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi .gitconfig-gitlab</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\tname = weijie.yuan</span><br><span class=\"line\">\temail = weijie.yuan@gitlab.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>includeIf</code> 配置有如下规则：</p>\n<ul>\n<li>家目录下的 <code>.gitconfig</code> ，<code>includeIf</code> 后面的 <code>path</code> 最后需要 <code>/</code> 结尾；</li>\n<li>家目录下的 <code>.gitconfig</code> ，原有的 <code>user</code> 部分需要删除；</li>\n<li>家目录下的 <code>.gitconfig</code> ，<code>includeIf</code>中配置的各个目录，不能是包含关系；</li>\n</ul>\n<h3 id=\"克隆协议\"><a href=\"#克隆协议\" class=\"headerlink\" title=\"克隆协议\"></a>克隆协议</h3><p>一般<code>Git</code>服务默认都支持<code>SSH</code>和<code>HTTPS</code>，<code>SSH</code>支持的原生<code>Git</code>协议速度最快，<code>HTTPS</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。</p>\n<h4 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h4><p>检查本机<code>SSH</code>公钥，若存在，则将<code>id_rsa.pub</code>添加到<code>Git</code>服务的<code>SSH keys</code>：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">ls</span> ~<span class=\"string\">/.ssh</span></span><br></pre></td></tr></table></figure></p>\n<p>若不存在，则生成：</p>\n<ul>\n<li><p>单个<code>Git</code>服务</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多个<code>Git</code>服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span> -f <span class=\"string\">\"git1_id_rsa\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span> -f <span class=\"string\">\"git2_id_rsa</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建配置文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi ~/.ssh/config</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git1</span></span><br><span class=\"line\">Host git1.com</span><br><span class=\"line\">HostName git1.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/git1_id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git2</span></span><br><span class=\"line\">Host git2.com</span><br><span class=\"line\">HostName git2.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/git2_id_rsa</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>配置完成后，再次检查ssh连接情况；若不生效，则重启后再尝试：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi! You’ve successfully authenticated, <span class=\"keyword\">but</span> GitHub <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> provide shell access.</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>若出现上述信息，则表示设置成功。</p>\n</blockquote>\n<p>克隆：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@git.server:test.git</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h4><p>关闭<code>ssl</code>校验：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global http.sslverify <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>克隆：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://git.server/test.git</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"工具配置\"><a href=\"#工具配置\" class=\"headerlink\" title=\"工具配置\"></a>工具配置</h3><p>配置<code>diff</code>和<code>merge</code>工具，可以通过<code>git difftool --tool-help</code>查看支持的工具集合，推荐使用<code>meld</code>。</p>\n<ul>\n<li><p><code>Linux</code> or <code>MacOS</code>：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global diff.tool meld</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global merge.tool meld</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Windows</code>：</p>\n</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git config --global diff<span class=\"selector-class\">.tool</span> meld</span><br><span class=\"line\">&gt; git config --global merge<span class=\"selector-class\">.tool</span> meld</span><br><span class=\"line\">&gt; git config --global difftool<span class=\"selector-class\">.bc3</span><span class=\"selector-class\">.path</span> <span class=\"string\">'C:\\Program Files (x86)\\Meld\\Meld.exe'</span></span><br><span class=\"line\">&gt; git config --global mergetool<span class=\"selector-class\">.meld</span><span class=\"selector-class\">.path</span> <span class=\"string\">'C:\\Program Files (x86)\\Meld\\Meld.exe'</span></span><br><span class=\"line\">&gt; git config --global difftool<span class=\"selector-class\">.meld</span><span class=\"selector-class\">.path</span> <span class=\"string\">'C:\\Program Files (x86)\\Meld\\Meld.exe'</span></span><br></pre></td></tr></table></figure>\n<p>配置显示颜色：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global color.ui.<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>配置<code>Git</code>操作别名，示例：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global alias checkout co</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上面的命令将<code>checkout</code>设置为别名<code>co</code>。</p>\n</blockquote>\n<h3 id=\"查看所有配置\"><a href=\"#查看所有配置\" class=\"headerlink\" title=\"查看所有配置\"></a>查看所有配置</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local --list</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --list</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--system --list</span><br></pre></td></tr></table></figure>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p><img src=\"/2020/09/29/git-help-v3/git-work-flow.jpg\" alt=\"工作流\"></p>\n<p>工作区就是你的本地仓库文件夹，不过其中的<code>.git</code>目录不属于工作区，而是版本库，里面存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫<code>index</code>）的暂存区，还有<code>Git</code>为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。  </p>\n<p>现在来解释一下前面的添加和提交操作：  </p>\n<ol>\n<li><code>git add</code>：把文件修改添加到暂存区；</li>\n<li><code>git commit</code>：把暂存区的所有内容提交到当前分支，即版本区；</li>\n</ol>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>获取远程仓库：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@github.com:USERNAME/repo.git</span><br></pre></td></tr></table></figure></p>\n<p>将本地的仓库添加到远程：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>cd repo</span><br><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add origin git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>origin</code>就是一个名字，是<code>git</code>为你默认创建的指向这个远程代码库的标签。</p>\n</blockquote>\n<p>添加修改到暂存区：<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> &lt;filename&gt; </span></span><br><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> .  <span class=\"comment\"># 添加当前目录所有修改过的文件  </span></span></span><br><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> *  <span class=\"comment\"># 递归地添加执行命令时所在的目录中的所有文件</span></span></span><br></pre></td></tr></table></figure></p>\n<p>提交修改到版本区：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"commit message\"</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -am <span class=\"string\">\"commit message\"</span> <span class=\"comment\"># am：将添加和提交合并为一步，但只对本来就存在的文件有效</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>commit message</code>的填写可以参考<a href=\"http://blog.jobbole.com/92713/\" target=\"_blank\" rel=\"noopener\">写好 Git Commit 信息的 7 个建议</a>。</p>\n</blockquote>\n<p>推送修改到远程服务器：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> &lt;<span class=\"built_in\">feature</span>-branch-name&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>-u</code>选项可以将本地分支与远程分支关联,下次<code>git pull</code>操作时可以不带参数.具体参见<a href=\"http://stackoverflow.com/questions/5697750/what-exactly-does-the-u-do-git-push-u-origin-master-vs-git-push-origin-ma\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</blockquote>\n<p>查看远程仓库：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (push)</span><br><span class=\"line\">origin git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (fetch)</span><br></pre></td></tr></table></figure></p>\n<p>添加上游仓库：<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote <span class=\"keyword\">add</span><span class=\"bash\"> upstream git@github.com:USERNAME/repo.git</span></span><br></pre></td></tr></table></figure></p>\n<p><code>fork</code>后同步上游仓库的更新：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (push)</span><br><span class=\"line\">origin  git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (fetch)</span><br><span class=\"line\">upstream  git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span>  (push)</span><br><span class=\"line\">upstream  git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (fetch)</span><br><span class=\"line\"></span><br><span class=\"line\">$ git fetch upstream </span><br><span class=\"line\">$ git difftool &lt;branch-name&gt; upstream/master</span><br><span class=\"line\">$ git merge upstream/master</span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>代码引用在<code>Git</code>上有<code>submodule</code>和<code>subtree</code>两种方式，推荐使用<a href=\"http://aoxuis.me/post/2013-08-06-git-subtree\" target=\"_blank\" rel=\"noopener\">subtree</a>方式：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次初始化</span><br><span class=\"line\">$ git remote <span class=\"keyword\">add </span>-f &lt;remote-<span class=\"keyword\">subtree-repository-name&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository-url&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span><span class=\"keyword\">add </span>--prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt; </span>--squash</span><br><span class=\"line\"></span><br><span class=\"line\"># 同步<span class=\"keyword\">subtree的更新</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span>pull --prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt; </span>--squash</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送到远程<span class=\"keyword\">subtree库</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span><span class=\"keyword\">push </span>--prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>查看所有分支，有<code>*</code>标记的是当前分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-a</span><br></pre></td></tr></table></figure></p>\n<p>创建本地分支：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch &lt;<span class=\"keyword\">new</span><span class=\"type\">branch</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建并切换本地分支：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b &lt;<span class=\"keyword\">new</span><span class=\"type\">branch</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>从标签创建分支：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"params\">&lt;branch&gt;</span> <span class=\"params\">&lt;tagname&gt;</span></span><br><span class=\"line\">$ git checkout <span class=\"params\">&lt;branch&gt;</span> <span class=\"meta\"># 切换到新建分支</span></span><br></pre></td></tr></table></figure></p>\n<p>推送新建本地分支到远程：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git push -u origin &lt;remote-branch-name&gt;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git push --<span class=\"keyword\">set</span>-upstream <span class=\"comment\">origin &lt;remote-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>删除本地分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-d &lt;<span class=\"keyword\">branch&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>若当前分支因为有修改未提交或其它情况不能删除，请使用<code>-D</code>选项强制删除。</p>\n</blockquote>\n<p>删除远程分支(三种方法)：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git push origin --delete &lt;remote-branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin -d &lt;remote-branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin <span class=\"symbol\">:&lt;remote-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>清除无用的分支：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git remote prune origin</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>说明：remote上的一个分支被其他人删除后，需要更新本地的分支列表。</p>\n</blockquote>\n<p>获取远程分支到本地已有分支：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --<span class=\"built_in\">set</span>-upstream &lt;<span class=\"built_in\">local</span>-branch&gt; origin/branch</span></span><br></pre></td></tr></table></figure></p>\n<p>获取远程分支到本地并新建本地分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -<span class=\"keyword\">b </span>&lt;local-<span class=\"keyword\">branch&gt; </span>&lt;remote-<span class=\"keyword\">branch&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同步当前分支的更新，使用<code>git pull</code>并不保险：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载最新的代码到远程跟踪分支, 即origin/&lt;branch-name&gt;</span></span><br><span class=\"line\">$ git fetch <span class=\"keyword\">origin </span>&lt;<span class=\"keyword\">branch-name&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># 查看更新内容</span></span><br><span class=\"line\">$ git <span class=\"keyword\">difftool </span>&lt;<span class=\"keyword\">branch-name&gt; </span><span class=\"keyword\">origin/&lt;branch-name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\"># </span>尝试合并远程跟踪分支的代码到本地分支 </span><br><span class=\"line\">$ git merge <span class=\"keyword\">origin/&lt;branch-name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\"># </span>借助mergetool解决冲突              </span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>同步其它分支的更新，本例拉取<code>master</code>分支更新：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin <span class=\"literal\">master</span></span><br><span class=\"line\">$ git difftool <span class=\"tag\">&lt;branch-name&gt;</span> origin/<span class=\"literal\">master</span></span><br><span class=\"line\">$ git merge origin/<span class=\"literal\">master</span></span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>查看某个<code>&lt;commit id&gt;</code>属于哪个分支:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -<span class=\"keyword\">a</span> <span class=\"comment\">--contains &lt;commit id&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>查看标签：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span></span><br></pre></td></tr></table></figure></p>\n<p>创建标签：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> <span class=\"tag\">&lt;tagname&gt;</span> -m <span class=\"string\">\"tag message\"</span> <span class=\"comment\"># 创建标签在当前最新提交的commit上</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> <span class=\"tag\">&lt;tagname&gt;</span> -m <span class=\"string\">\"tag message\"</span> <span class=\"tag\">&lt;commit id&gt;</span> <span class=\"comment\"># 创建标签在指定的commit上</span></span><br></pre></td></tr></table></figure></p>\n<p>推送标签到远程服务器：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push</span> origin &lt;tagname&gt; <span class=\"meta\"># 推送一个本地标签</span></span><br><span class=\"line\">$ git <span class=\"keyword\">push</span> origin --tags <span class=\"meta\"># 推送全部未推送过的本地标签</span></span><br></pre></td></tr></table></figure></p>\n<p>删除标签：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git tag -d &lt;tagname&gt; <span class=\"comment\"># 删除一个本地标签</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin <span class=\"symbol\">:refs/tags/&lt;tagname&gt;</span> <span class=\"comment\"># 删除一个远程标签</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"撤销与回退\"><a href=\"#撤销与回退\" class=\"headerlink\" title=\"撤销与回退\"></a>撤销与回退</h2><p>查看当前仓库状态：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git status</span><br></pre></td></tr></table></figure></p>\n<p>查看文件更改：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git difftool <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br><span class=\"line\">$ git mergetool <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>查看提交历史：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\">#只保留commit id 和 commit message</span></span></span><br></pre></td></tr></table></figure></p>\n<p>撤销工作区<code>Tracked files</code>的修改：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout <span class=\"comment\">-- &lt;filename&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>撤销工作区<code>Untracked files</code>的修改：</p>\n<ul>\n<li>n：查看将会删除的文件，防止误删；</li>\n<li>f：<code>Untracked</code>的文件；</li>\n<li>d：<code>Untracked</code>的目录；</li>\n<li>x：包含<code>gitignore</code>的<code>Untracked</code>文件和目录一并删掉，慎用！；  </li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git clean -nfd</span></span><br></pre></td></tr></table></figure>\n<p>回退版本区(<code>git commit</code>)和暂存区(<code>git add</code>)，不删除工作空间代码：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--mixed HEAD^ # --mixed为默认参数</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span>^</span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)，暂存区(<code>git add</code>)不回退，不删除工作空间代码：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--soft HEAD^</span></span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)和暂存区(<code>git add</code>)，并删除工作空间代码(不包括<code>Untracked files</code>)，执行后直接恢复到指定<code>&lt;commit-id&gt;</code>状态：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard &lt;commit-id&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上个版本，<code>HEAD^^</code>表示上上个版本，上100个版本可以表示为<code>HEAD~100</code>以此类推。</p>\n</blockquote>\n<p>回退版本后，若需要返回原来的版本，会发现找不到未来的<code>commit id</code>，则需要查看操作命令历史进行查找：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git reflog</span><br></pre></td></tr></table></figure></p>\n<p>从版本库删除文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>若你的代码已经<code>push</code>到线上，则推荐使用下面这个命令回滚：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git revert &lt;commit-<span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>revert</code>是用一次新的<code>commit</code>来回滚之前的<code>commit</code>，更安全;<code>reset</code>则是直接删除指定的<code>commit</code>，若直接<code>push</code>会导致冲突。</p>\n</blockquote>\n<h2 id=\"暂存\"><a href=\"#暂存\" class=\"headerlink\" title=\"暂存\"></a>暂存</h2><p>当你需要切换分支时，若当前工作区还有些修改没有完成、又不适合提交的，操作切换分支是会提示出错的，这时就需要将这些修改暂存起来：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git stash save <span class=\"string\">\"message\"</span></span><br></pre></td></tr></table></figure></p>\n<p>查看:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure></p>\n<p>恢复:<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">pop</span> [--<span class=\"keyword\">index</span>] [stash@&#123;num&#125;]　</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">$ git stash apply [--<span class=\"keyword\">index</span>] [stash@&#123;num&#125;]　<span class=\"comment\"># 不删除已恢复的进度.</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>--index</code>表示不仅恢复工作区,还会恢复暂存区；<code>num</code>是你要恢复的操作的序列号,默认恢复最新进度。</p>\n</blockquote>\n<p>删除进度:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">drop</span> [stash@&#123;<span class=\"keyword\">num</span>&#125;] <span class=\"comment\"># 删除指定进度</span></span><br><span class=\"line\">$ git stash <span class=\"keyword\">clear</span> <span class=\"comment\"># 删除所有</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"清理仓库\"><a href=\"#清理仓库\" class=\"headerlink\" title=\"清理仓库\"></a>清理仓库</h2><h3 id=\"清理无用的分支和标签\"><a href=\"#清理无用的分支和标签\" class=\"headerlink\" title=\"清理无用的分支和标签\"></a>清理无用的分支和标签</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git branch -d &lt;branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git tag -d &lt;tag-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote prune origin</span><br><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n<h3 id=\"清理大文件\"><a href=\"#清理大文件\" class=\"headerlink\" title=\"清理大文件\"></a>清理大文件</h3><ul>\n<li><p>查看<code>git</code>相关文件占用空间：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git count-objects -v</span><br><span class=\"line\"><span class=\"variable\">$ </span>du -sh .git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>寻找大文件<code>ID</code>：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git verify-<span class=\"keyword\">pack</span> -v .git/objects/<span class=\"keyword\">pack</span>/*.idx | <span class=\"keyword\">sort</span> -k <span class=\"number\">3</span> -n | tail -<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>输出的第一列是文件<code>ID</code>，第二列表示文件（<code>blob</code>）或目录（<code>tree</code>），第三列是文件大小，此处筛选了最大的10条。</p>\n</blockquote>\n<ul>\n<li><p>获取文件名与<code>ID</code>映射：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rev-list --objects --all <span class=\"params\">| grep \"$(git verify-pack -v .git/objects/pack/*.idx |</span> sort -k <span class=\"number\">3</span> -n <span class=\"params\">| tail -10 |</span> awk <span class=\"string\">'&#123;print$1&#125;'</span>)<span class=\"string\">\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从所有提交中删除文件：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git filter-branch --tree-filter <span class=\"string\">'rm -rf xxx'</span> HEAD --<span class=\"keyword\">all</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理<code>.git</code>目录：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git gc <span class=\"attribute\">--prune</span>=now</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>在执行<code>push</code>操作时，<code>git</code>会自动执行一次<code>gc</code>操作，不过只有<code>loose object</code>达到一定数量后才会真正调用，建议手动执行。</p>\n</blockquote>\n<h3 id=\"处理大型二进制文件\"><a href=\"#处理大型二进制文件\" class=\"headerlink\" title=\"处理大型二进制文件\"></a>处理大型二进制文件</h3><p>由于<code>Git</code>在存储二进制文件时效率不高，所以需要借助<a href=\"http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym\" target=\"_blank\" rel=\"noopener\">第三方组件</a>。</p>\n<h2 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件\"></a>忽略特殊文件</h2><p>当你的仓库中有一些文件，类似密码或者数据库文件不需要提交但又必须放在仓库目录下，每次<code>git status</code>都会提示<code>Untracked</code>，看着让人很不爽，提供两种方法解决这个问题</p>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h3><p>在代码仓库目录创建一个<code>.gitignore</code>文件，编写规则如下：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp/  <span class=\"comment\"># 忽略tmp文件夹下所有内容</span></span><br><span class=\"line\">*<span class=\"string\">.ini</span> <span class=\"comment\"># 忽略所有ini文件</span></span><br><span class=\"line\">!data/ <span class=\"comment\">#忽略除了data文件夹的所有内容</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\"><code>.gitignore</code>模版</a></p>\n</blockquote>\n<h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><p>在用户目录创建一个<code>.gitignore_global</code>文件，编写规则同<code>.gitignore</code>，并修改<code>~/.gitconfig</code>：<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[core]</span></span><br><span class=\"line\">\texcludesfile = ~/.gitignore_global</span><br></pre></td></tr></table></figure></p>\n<p>如果添加的忽略对象已经<code>Tracked</code>，纳入了版本管理中，则需要在代码仓库中先把本地缓存删除,改变成<code>Untracked</code>状态:<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r <span class=\"comment\">--cached .</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"奇技淫巧\"><a href=\"#奇技淫巧\" class=\"headerlink\" title=\"奇技淫巧\"></a>奇技淫巧</h2><h3 id=\"重写历史（慎用！）\"><a href=\"#重写历史（慎用！）\" class=\"headerlink\" title=\"重写历史（慎用！）\"></a>重写历史（慎用！）</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git rebase -i [git-hash| head~n]</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push -f <span class=\"comment\"># 不强制 push 会多一条 merge 提交信息</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>git-hash</code>是你要开始进行<code>rebase</code>的<code>commit</code>的<code>hash</code>，而<code>head~n</code>则是从<code>HEAD</code>向前推<code>n</code>个<code>commit</code></p>\n</blockquote>\n<h3 id=\"全局更换电子邮件\"><a href=\"#全局更换电子邮件\" class=\"headerlink\" title=\"全局更换电子邮件\"></a>全局更换电子邮件</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch <span class=\"comment\">--commit-filter '</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">\"$GIT_AUTHOR_EMAIL\"</span> = <span class=\"string\">\"xxx@localhost\"</span> ];</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">                GIT_AUTHOR_NAME=<span class=\"string\">\"xxx\"</span>;</span><br><span class=\"line\">                GIT_AUTHOR_EMAIL=<span class=\"string\">\"xxx@example.com\"</span>;</span><br><span class=\"line\">                git commit-tree <span class=\"string\">\"$@\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">                git commit-tree <span class=\"string\">\"$@\"</span>;</span><br><span class=\"line\">        fi' HEAD <span class=\"comment\">--all</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h2><p>查看帮助：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git --<span class=\"built_in\">help</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的git教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用Git命令清单</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Git-Book</a></li>\n<li><a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">Git-Reference</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002783245\" target=\"_blank\" rel=\"noopener\">Git push与pull的默认行为</a></li>\n<li><a href=\"http://www.tuicool.com/articles/rUBNBvI\" target=\"_blank\" rel=\"noopener\">git stash 详解</a></li>\n</ol>\n<hr>\n<p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>"},{"title":"Git速查手册（第二版）","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2019-02-12T04:02:40.000Z","_content":"\n本文是对之前[Git速查手册](http://answerywj.com/2016/08/28/Git%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/)的更新，增加了一些这段时间使用到的命令。\n\n----------\n\n<!--more-->\n\n## 配置git\n笔者使用的是v2.1.0，推荐大家使用v1.8以上的[版本](https://git-scm.com/downloads)。 查看git版本：\n```\n$ git --version\n```\n配置命令``git config``分为三个级别：\n```\n--system : 系统级,位于 /etc/gitconfig .\n--global : 用户级,位于 ~/.gitconfig .\n--local : 仓库级,位于 repo/.git/config ,default并且优先级最高.\n```\n首先需要删除global用户信息,防止不同git软件之间的冲突：\n```\n$ git config --global --unset user.name\n$ git config --global --unset user.email\n```\n设置用户信息.若同时使用gitlab和github,推荐配置local用户信息：\n```\n$ git config --local user.name \"username\"\n$ git config --local user.email \"email\"\n```\n\ngit支持https和ssh等协议.https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，而ssh支持的原生git协议速度最快。\n检查本机SSH公钥:\n```\n$ ls ~/.ssh\n```\n若存在,则将`id_rsa.pub`添加到github的SSH keys中。若不存在,则生成:\n```\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\" \n```\n当ssh配置完成后，再次检查ssh连接情况：\n```\n$ ssh -T git@github.com\nHi! You’ve successfully authenticated, but GitHub does not provide shell access.\n```\n若出现上述信息，则表示设置成功。\n若使用https访问, 则进行如下配置,并且设置超时时间避免重复输入密码：\n```\n$ git config --global http.sslverify false\n$ git config --global credential.helper 'cache --timeout=3600'\n```\n设置可视化diff和merge工具, linux系统上推荐使用meld或者diffuse：\n```\n$ git config --global diff.tool meld\n$ git config --global merge.tool meld\n```\n保存用户名,密码, 避免每次`pull/push`操作都需要手动输入：\n```\n$ git config --global credential.helper store\n# 执行上免的命令后, 下次操作输入的密码会被保存\n```\n设置颜色,利于使用：\n```\n$ git config --global color.ui.true\n```\n设置别名：\n```\n$ git config --global alias checkout co \n```\n> 上面的命令将``checkout``设置为别名``co``。\n\n最后,查看一下所有的设置：\n```\n$ git config --local --list\n$ git config --global --list\n$ git config --system --list\n```\n\n\n## 工作流\n![工作流](git-work-flow.jpg)\n\n工作区就是你的本地仓库文件夹,不过其中的``.git``目录不属于工作区,而是版本库。里面存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。  \n现在来解释一下前面的添加和提交操作：  \n1. ``git add``把文件添加进去，实际上就是把文件修改添加到暂存区；\n2. ``git commit``提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。\n\n## 基本操作\n获取远程仓库：\n```\n$ git clone git@github.com:USERNAME/repo.git\n```\n将本地的仓库添加到远程：\n```\n$ cd repo\n$ git init\n$ git remote add origin git@github.com:USERNAME/repo.git\n```\n> ``origin``就是一个名字，是``git``为你默认创建的指向这个远程代码库的标签。\n\n添加修改:\n```\n$ git add <filename> \n$ git add .  # 添加当前目录所有修改过的文件  \n$ git add *  # 递归地添加执行命令时所在的目录中的所有文件\n```\n\n提交修改:\n```\n$ git commit -m \"commit message\"\n$ git commit -am \"commit message\"\n```\n> ``commit message``的填写可以参考[写好 Git Commit 信息的 7 个建议](http://blog.jobbole.com/92713/)。  \n> ``am``将添加和提交合并为一步,但只对本来就存在的文件有效。\n\n\n推送修改：\n```\n$ git push -u origin <feature-branch-name>\n```\n> ``-u``选项可以将本地分支与远程分支关联,下次``git pull``操作时可以不带参数.具体参见[这里](http://stackoverflow.com/questions/5697750/what-exactly-does-the-u-do-git-push-u-origin-master-vs-git-push-origin-ma)。\n\n查看远程仓库：\n```\n$ git remote -v\norigin git@github.com:USERNAME/repo.git (push)\norigin git@github.com:USERNAME/repo.git (fetch)\n```\n\nfork后同步上游仓库的更新：\n```\n# 第一次需要添加上游仓库\n$ git remote add upstream git@github.com:USERNAME/repo.git\n \n$ git remote -v\norigin  git@github.com:USERNAME/repo.git (push)\norigin  git@github.com:USERNAME/repo.git (fetch)\nupstream  git@github.com:USERNAME/repo.git  (push)\nupstream  git@github.com:USERNAME/repo.git (fetch)\n\n$ git fetch upstream \n$ git difftool <branch-name> upstream/master\n$ git merge upstream/master\n$ git mergetool\n```\n\n引用公共代码：\n代码引用在git上有两种方式：``submodule``和``subtree``，推荐使用[subtree](http://aoxuis.me/post/2013-08-06-git-subtree)方式。\n``` \n# 第一次初始化\n$ git remote add -f <remote-subtree-repository-name> <remote-subtree-repository-url>\n$ git subtree add --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name> --squash\n\n# 同步subtree的更新\n$ git subtree pull --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name> --squash\n\n# 推送到远程subtree库\n$ git subtree push --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name>\n```\n\n## 使用标签\n查看标签 ：\n```\n$ git tag\n```\n\n创建标签 ：\n``` \n$ git tag -a <tagname> -m \"tag message\" # 创建标签在当前最新提交的commit上\n$ git tag -a <tagname> -m \"tag message\" <commit id> # 创建标签在指定的commit上\n```\n推送标签到远程：\n```\n$ git push origin <tagname> # 推送一个本地标签\n$ git push origin --tags # 推送全部未推送过的本地标签\n```\n删除标签：\n```\n$ git tag -d <tagname> # 删除一个本地标签；\n$ git push origin :refs/tags/<tagname> # 删除一个远程标签。\n```\n\n## 撤销与回退\n查看当前仓库状态:\n```\n$ git status\n```\n查看文件更改：\n```\n$ git difftool <filename>\n$ git mergetool <filename>\n```\n\n查看提交历史:\n```\n$ git log\n$ git log --pretty=oneline #只保留commit id 和 commit message\n```\n\n撤销工作区``Tracked files``的修改：\n```\n$ git checkout -- <filename>\n```\n\n撤销工作区``Untracked files``的修改：\n```\n#####\n# n:查看将会删除的文件，防止误删\n# f:Untracked的文件\n# d:Untracked的目录\n# x:包含gitignore的Untracked文件和目录一并删掉，慎用！\n#####\n\ngit clean -nfd\ngit clean -fd\n```\n\n回退版本区(`git commit`)和暂存区(`git add`)，不删除工作空间代码：\n```\n$ git reset --mixed HEAD^ # --mixed为默认参数\n$ git reset HEAD^\n```\n\n回退版本区(`git commit`)，暂存区(`git add`)不回退，不删除工作空间代码：\n```\n$ git reset --soft HEAD^\n```\n\n回退版本区(`git commit`)和暂存区(`git add`)，并删除工作空间代码(不包括``Untracked files``)，执行后直接恢复到指定`<commit-id>`状态：\n```\n$ git reset --hard <commit-id>\n```\n> `HEAD`表示当前版本，``HEAD^``表示上个版本，``HEAD^^``表示上上个版本，上100个版本可以表示为``HEAD~100``以此类推。\n\n回退版本后，若需要返回原来的版本，会发现找不到未来的``commit id``，则需要查看操作命令历史进行查找：\n```\n$ git reflog\n```\n\n从版本库删除文件：\n```\n$ git rm <filename>\n```\n\n若你的代码已经``push``到线上，则推荐使用下面这个命令回滚：\n```\n$ git revert <commit-id>\n```\n> ``revert``是用一次新的``commit``来回滚之前的``commit``，更安全;``reset``则是直接删除指定的``commit``，若直接``push``会导致冲突。\n\n## 分支\n查看所有分支，有``*``标记的是当前分支：\n```\n$ git branch -a\n```\n创建本地分支：\n```\n$ git branch <newbranch>\n```\n\n创建并切换本地分支：\n```\n$ git checkout -b <newbranch>\n```\n\n从标签创建分支：\n```\n$ git branch <branch> <tagname>\n$ git checkout <branch> # 切换到新建分支\n```\n\n推送新建本地分支到远程：\n```\n$ git push -u origin <remote-branch-name>\n  or\n$ git push --set-upstream origin <remote-branch-name>\n```\n\n删除本地分支：\n```\n$ git branch -d <branch>\n```\n> 若当前分支因为有修改未提交或其它情况不能删除，请使用``-D``选项强制删除。\n\n删除远程分支(三种方法)：\n```\n$ git push origin --delete <remote-branch-name>\n$ git push origin -d <remote-branch-name>\n$ git push origin :<remote-branch-name>\n```\n\n清除无用的分支：\n```\n$ git remote prune origin\n```\n> 说明：remote上的一个分支被其他人删除后，需要更新本地的分支列表。\n\n获取远程分支到本地已有分支：\n```\n$ git branch --set-upstream <local-branch> origin/branch\n```\n\n获取远程分支到本地并新建本地分支：\n```\n$ git checkout -b <local-branch> <remote-branch>\n```\n\n同步当前分支的更新，使用``git pull``并不保险：\n```\n# 下载最新的代码到远程跟踪分支, 即origin/<branch-name>\n$ git fetch origin <branch-name> \n# 查看更新内容\n$ git difftool <branch-name> origin/<branch-name>\n# 尝试合并远程跟踪分支的代码到本地分支 \n$ git merge origin/<branch-name>\n# 借助mergetool解决冲突              \n$ git mergetool                               \n```\n\n同步其它分支的更新，本例拉取``master``分支更新：\n```\n$ git fetch origin master\n$ git difftool <branch-name> origin/master\n$ git merge origin/master\n$ git mergetool\n```\n\n查看某个`<commit id>`属于哪个分支:\n```\n$ git branch -a --contains <commit id>\n```\n\n## 暂存\n当你需要切换分支时,若当前工作区还有些修改没有完成,又不适合提交的,操作切换分支是会提示出错的.这时就需要将这些修改暂存起来:\n```\n$ git stash save \"message\"\n```\n\n查看:\n```\n$ git stash list\n```\n\n恢复:\n```\n$ git stash pop [--index] [stash@{num}]　\n  or\n$ git stash apply [--index] [stash@{num}]　# 不删除已恢复的进度.\n```\n> ``--index``表示不仅恢复工作区,还会恢复暂存区;``num``是你要恢复的操作的序列号,默认恢复最新进度.\n\n删除进度:\n```\n$ git stash drop [stash@{num}] # 删除指定进度\n$ git stash clear # 删除所有\n```\n\n## 清理仓库\n### 清理无用的分支和标签\n```\n$ git branch -d <branch-name>\n$ git tag -d <tag-name>\n$ git remote prune origin\n$ git pull\n```\n\n### 清理大文件\n- 查看`git`相关文件占用空间：\n```\n$ git count-objects -v\n$ du -sh .git\n```\n\n- 寻找大文件`ID`\n```\n$ git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10\n```\n> 输出的第一列是文件`I`D，第二列表示文件`（blob）`或目录`（tree）`，第三列是文件大小，此处筛选了最大的10条\n\n- 获取文件名与`ID`映射\n```\n$ git rev-list --objects --all | grep \"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10 | awk '{print$1}')\"\n```\n\n- 从所有提交中删除文件\n```\n$ git filter-branch --tree-filter 'rm -rf xxx' HEAD --all\n$ git pull\n```\n\n- 清理`.git`目录:\n```\n$ git gc --prune=now\n```\n>tips: 在执行`push`操作时，`git`会自动执行一次`gc`操作，不过只有`loose object`达到一定数量后才会真正调用，建议手动执行。\n\n### 处理大型二进制文件\n由于git在存储二进制文件时效率不高,所以需要借助[第三方组件](http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym)。\n\n## 忽略特殊文件\n当你的仓库中有一些文件，类似密码或者数据库文件不需要提交但又必须放在仓库目录下，每次``git status``都会提示``Untracked``，看着让人很不爽，提供两种方法解决这个问题\n\n### 本地\n在代码仓库目录创建一个``.gitignore``文件，编写规则如下：\n```\ntmp/  # 忽略tmp文件夹下所有内容\n*.ini # 忽略所有ini文件\n!data/ #忽略除了data文件夹的所有内容\n```\n\n### 全局\n在用户目录创建一个``.gitignore_global``文件，编写规则同``.gitignore``，并修改``~/.gitconfig``\n```\n[core]\n\texcludesfile = ~/.gitignore_global\n```\n\n如果添加的忽略对象已经`Tracked`，纳入了版本管理中，则需要在代码仓库中先把本地缓存删除,改变成`Untracked`状态\n```\n$ git rm -r --cached .\n```\n> [``.gitignore``模版](https://github.com/github/gitignore)\n\n## 奇技淫巧\n### 重写历史（慎用！）\n```\n$ git rebase -i [git-hash| head~n]\n```\n> 其中`git-hash`是你要开始进行`rebase`的`commit`的`hash`，而`head~n`则是从`HEAD`向前推`n`个`commit`\n\n\n### 全局更换电子邮件\n```\ngit filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_EMAIL\" = \"xxx@localhost\" ];\n        then\n                GIT_AUTHOR_NAME=\"xxx\";\n                GIT_AUTHOR_EMAIL=\"xxx@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD --all\n```\n\n## 帮助\n查看帮助：\n```\n$ git --help\n```\n\n## Reference\n1. [廖雪峰老师的git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n2. [常用Git命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n3. [Git-Book](https://git-scm.com/book/en/v2)\n4. [Git-Reference](https://git-scm.com/docs)\n5. [Git push与pull的默认行为](https://segmentfault.com/a/1190000002783245)\n6. [git stash 详解](http://www.tuicool.com/articles/rUBNBvI)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/git-help-v2.md","raw":"---\ntitle: Git速查手册（第二版）\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - git\ndate: 2019-02-12 12:02:40\ncategories: Git\n---\n\n本文是对之前[Git速查手册](http://answerywj.com/2016/08/28/Git%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/)的更新，增加了一些这段时间使用到的命令。\n\n----------\n\n<!--more-->\n\n## 配置git\n笔者使用的是v2.1.0，推荐大家使用v1.8以上的[版本](https://git-scm.com/downloads)。 查看git版本：\n```\n$ git --version\n```\n配置命令``git config``分为三个级别：\n```\n--system : 系统级,位于 /etc/gitconfig .\n--global : 用户级,位于 ~/.gitconfig .\n--local : 仓库级,位于 repo/.git/config ,default并且优先级最高.\n```\n首先需要删除global用户信息,防止不同git软件之间的冲突：\n```\n$ git config --global --unset user.name\n$ git config --global --unset user.email\n```\n设置用户信息.若同时使用gitlab和github,推荐配置local用户信息：\n```\n$ git config --local user.name \"username\"\n$ git config --local user.email \"email\"\n```\n\ngit支持https和ssh等协议.https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，而ssh支持的原生git协议速度最快。\n检查本机SSH公钥:\n```\n$ ls ~/.ssh\n```\n若存在,则将`id_rsa.pub`添加到github的SSH keys中。若不存在,则生成:\n```\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\" \n```\n当ssh配置完成后，再次检查ssh连接情况：\n```\n$ ssh -T git@github.com\nHi! You’ve successfully authenticated, but GitHub does not provide shell access.\n```\n若出现上述信息，则表示设置成功。\n若使用https访问, 则进行如下配置,并且设置超时时间避免重复输入密码：\n```\n$ git config --global http.sslverify false\n$ git config --global credential.helper 'cache --timeout=3600'\n```\n设置可视化diff和merge工具, linux系统上推荐使用meld或者diffuse：\n```\n$ git config --global diff.tool meld\n$ git config --global merge.tool meld\n```\n保存用户名,密码, 避免每次`pull/push`操作都需要手动输入：\n```\n$ git config --global credential.helper store\n# 执行上免的命令后, 下次操作输入的密码会被保存\n```\n设置颜色,利于使用：\n```\n$ git config --global color.ui.true\n```\n设置别名：\n```\n$ git config --global alias checkout co \n```\n> 上面的命令将``checkout``设置为别名``co``。\n\n最后,查看一下所有的设置：\n```\n$ git config --local --list\n$ git config --global --list\n$ git config --system --list\n```\n\n\n## 工作流\n![工作流](git-work-flow.jpg)\n\n工作区就是你的本地仓库文件夹,不过其中的``.git``目录不属于工作区,而是版本库。里面存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。  \n现在来解释一下前面的添加和提交操作：  \n1. ``git add``把文件添加进去，实际上就是把文件修改添加到暂存区；\n2. ``git commit``提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。\n\n## 基本操作\n获取远程仓库：\n```\n$ git clone git@github.com:USERNAME/repo.git\n```\n将本地的仓库添加到远程：\n```\n$ cd repo\n$ git init\n$ git remote add origin git@github.com:USERNAME/repo.git\n```\n> ``origin``就是一个名字，是``git``为你默认创建的指向这个远程代码库的标签。\n\n添加修改:\n```\n$ git add <filename> \n$ git add .  # 添加当前目录所有修改过的文件  \n$ git add *  # 递归地添加执行命令时所在的目录中的所有文件\n```\n\n提交修改:\n```\n$ git commit -m \"commit message\"\n$ git commit -am \"commit message\"\n```\n> ``commit message``的填写可以参考[写好 Git Commit 信息的 7 个建议](http://blog.jobbole.com/92713/)。  \n> ``am``将添加和提交合并为一步,但只对本来就存在的文件有效。\n\n\n推送修改：\n```\n$ git push -u origin <feature-branch-name>\n```\n> ``-u``选项可以将本地分支与远程分支关联,下次``git pull``操作时可以不带参数.具体参见[这里](http://stackoverflow.com/questions/5697750/what-exactly-does-the-u-do-git-push-u-origin-master-vs-git-push-origin-ma)。\n\n查看远程仓库：\n```\n$ git remote -v\norigin git@github.com:USERNAME/repo.git (push)\norigin git@github.com:USERNAME/repo.git (fetch)\n```\n\nfork后同步上游仓库的更新：\n```\n# 第一次需要添加上游仓库\n$ git remote add upstream git@github.com:USERNAME/repo.git\n \n$ git remote -v\norigin  git@github.com:USERNAME/repo.git (push)\norigin  git@github.com:USERNAME/repo.git (fetch)\nupstream  git@github.com:USERNAME/repo.git  (push)\nupstream  git@github.com:USERNAME/repo.git (fetch)\n\n$ git fetch upstream \n$ git difftool <branch-name> upstream/master\n$ git merge upstream/master\n$ git mergetool\n```\n\n引用公共代码：\n代码引用在git上有两种方式：``submodule``和``subtree``，推荐使用[subtree](http://aoxuis.me/post/2013-08-06-git-subtree)方式。\n``` \n# 第一次初始化\n$ git remote add -f <remote-subtree-repository-name> <remote-subtree-repository-url>\n$ git subtree add --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name> --squash\n\n# 同步subtree的更新\n$ git subtree pull --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name> --squash\n\n# 推送到远程subtree库\n$ git subtree push --prefix=<local-subtree-directory> <remote-subtree-repository> <remote-subtree-branch-name>\n```\n\n## 使用标签\n查看标签 ：\n```\n$ git tag\n```\n\n创建标签 ：\n``` \n$ git tag -a <tagname> -m \"tag message\" # 创建标签在当前最新提交的commit上\n$ git tag -a <tagname> -m \"tag message\" <commit id> # 创建标签在指定的commit上\n```\n推送标签到远程：\n```\n$ git push origin <tagname> # 推送一个本地标签\n$ git push origin --tags # 推送全部未推送过的本地标签\n```\n删除标签：\n```\n$ git tag -d <tagname> # 删除一个本地标签；\n$ git push origin :refs/tags/<tagname> # 删除一个远程标签。\n```\n\n## 撤销与回退\n查看当前仓库状态:\n```\n$ git status\n```\n查看文件更改：\n```\n$ git difftool <filename>\n$ git mergetool <filename>\n```\n\n查看提交历史:\n```\n$ git log\n$ git log --pretty=oneline #只保留commit id 和 commit message\n```\n\n撤销工作区``Tracked files``的修改：\n```\n$ git checkout -- <filename>\n```\n\n撤销工作区``Untracked files``的修改：\n```\n#####\n# n:查看将会删除的文件，防止误删\n# f:Untracked的文件\n# d:Untracked的目录\n# x:包含gitignore的Untracked文件和目录一并删掉，慎用！\n#####\n\ngit clean -nfd\ngit clean -fd\n```\n\n回退版本区(`git commit`)和暂存区(`git add`)，不删除工作空间代码：\n```\n$ git reset --mixed HEAD^ # --mixed为默认参数\n$ git reset HEAD^\n```\n\n回退版本区(`git commit`)，暂存区(`git add`)不回退，不删除工作空间代码：\n```\n$ git reset --soft HEAD^\n```\n\n回退版本区(`git commit`)和暂存区(`git add`)，并删除工作空间代码(不包括``Untracked files``)，执行后直接恢复到指定`<commit-id>`状态：\n```\n$ git reset --hard <commit-id>\n```\n> `HEAD`表示当前版本，``HEAD^``表示上个版本，``HEAD^^``表示上上个版本，上100个版本可以表示为``HEAD~100``以此类推。\n\n回退版本后，若需要返回原来的版本，会发现找不到未来的``commit id``，则需要查看操作命令历史进行查找：\n```\n$ git reflog\n```\n\n从版本库删除文件：\n```\n$ git rm <filename>\n```\n\n若你的代码已经``push``到线上，则推荐使用下面这个命令回滚：\n```\n$ git revert <commit-id>\n```\n> ``revert``是用一次新的``commit``来回滚之前的``commit``，更安全;``reset``则是直接删除指定的``commit``，若直接``push``会导致冲突。\n\n## 分支\n查看所有分支，有``*``标记的是当前分支：\n```\n$ git branch -a\n```\n创建本地分支：\n```\n$ git branch <newbranch>\n```\n\n创建并切换本地分支：\n```\n$ git checkout -b <newbranch>\n```\n\n从标签创建分支：\n```\n$ git branch <branch> <tagname>\n$ git checkout <branch> # 切换到新建分支\n```\n\n推送新建本地分支到远程：\n```\n$ git push -u origin <remote-branch-name>\n  or\n$ git push --set-upstream origin <remote-branch-name>\n```\n\n删除本地分支：\n```\n$ git branch -d <branch>\n```\n> 若当前分支因为有修改未提交或其它情况不能删除，请使用``-D``选项强制删除。\n\n删除远程分支(三种方法)：\n```\n$ git push origin --delete <remote-branch-name>\n$ git push origin -d <remote-branch-name>\n$ git push origin :<remote-branch-name>\n```\n\n清除无用的分支：\n```\n$ git remote prune origin\n```\n> 说明：remote上的一个分支被其他人删除后，需要更新本地的分支列表。\n\n获取远程分支到本地已有分支：\n```\n$ git branch --set-upstream <local-branch> origin/branch\n```\n\n获取远程分支到本地并新建本地分支：\n```\n$ git checkout -b <local-branch> <remote-branch>\n```\n\n同步当前分支的更新，使用``git pull``并不保险：\n```\n# 下载最新的代码到远程跟踪分支, 即origin/<branch-name>\n$ git fetch origin <branch-name> \n# 查看更新内容\n$ git difftool <branch-name> origin/<branch-name>\n# 尝试合并远程跟踪分支的代码到本地分支 \n$ git merge origin/<branch-name>\n# 借助mergetool解决冲突              \n$ git mergetool                               \n```\n\n同步其它分支的更新，本例拉取``master``分支更新：\n```\n$ git fetch origin master\n$ git difftool <branch-name> origin/master\n$ git merge origin/master\n$ git mergetool\n```\n\n查看某个`<commit id>`属于哪个分支:\n```\n$ git branch -a --contains <commit id>\n```\n\n## 暂存\n当你需要切换分支时,若当前工作区还有些修改没有完成,又不适合提交的,操作切换分支是会提示出错的.这时就需要将这些修改暂存起来:\n```\n$ git stash save \"message\"\n```\n\n查看:\n```\n$ git stash list\n```\n\n恢复:\n```\n$ git stash pop [--index] [stash@{num}]　\n  or\n$ git stash apply [--index] [stash@{num}]　# 不删除已恢复的进度.\n```\n> ``--index``表示不仅恢复工作区,还会恢复暂存区;``num``是你要恢复的操作的序列号,默认恢复最新进度.\n\n删除进度:\n```\n$ git stash drop [stash@{num}] # 删除指定进度\n$ git stash clear # 删除所有\n```\n\n## 清理仓库\n### 清理无用的分支和标签\n```\n$ git branch -d <branch-name>\n$ git tag -d <tag-name>\n$ git remote prune origin\n$ git pull\n```\n\n### 清理大文件\n- 查看`git`相关文件占用空间：\n```\n$ git count-objects -v\n$ du -sh .git\n```\n\n- 寻找大文件`ID`\n```\n$ git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10\n```\n> 输出的第一列是文件`I`D，第二列表示文件`（blob）`或目录`（tree）`，第三列是文件大小，此处筛选了最大的10条\n\n- 获取文件名与`ID`映射\n```\n$ git rev-list --objects --all | grep \"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10 | awk '{print$1}')\"\n```\n\n- 从所有提交中删除文件\n```\n$ git filter-branch --tree-filter 'rm -rf xxx' HEAD --all\n$ git pull\n```\n\n- 清理`.git`目录:\n```\n$ git gc --prune=now\n```\n>tips: 在执行`push`操作时，`git`会自动执行一次`gc`操作，不过只有`loose object`达到一定数量后才会真正调用，建议手动执行。\n\n### 处理大型二进制文件\n由于git在存储二进制文件时效率不高,所以需要借助[第三方组件](http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym)。\n\n## 忽略特殊文件\n当你的仓库中有一些文件，类似密码或者数据库文件不需要提交但又必须放在仓库目录下，每次``git status``都会提示``Untracked``，看着让人很不爽，提供两种方法解决这个问题\n\n### 本地\n在代码仓库目录创建一个``.gitignore``文件，编写规则如下：\n```\ntmp/  # 忽略tmp文件夹下所有内容\n*.ini # 忽略所有ini文件\n!data/ #忽略除了data文件夹的所有内容\n```\n\n### 全局\n在用户目录创建一个``.gitignore_global``文件，编写规则同``.gitignore``，并修改``~/.gitconfig``\n```\n[core]\n\texcludesfile = ~/.gitignore_global\n```\n\n如果添加的忽略对象已经`Tracked`，纳入了版本管理中，则需要在代码仓库中先把本地缓存删除,改变成`Untracked`状态\n```\n$ git rm -r --cached .\n```\n> [``.gitignore``模版](https://github.com/github/gitignore)\n\n## 奇技淫巧\n### 重写历史（慎用！）\n```\n$ git rebase -i [git-hash| head~n]\n```\n> 其中`git-hash`是你要开始进行`rebase`的`commit`的`hash`，而`head~n`则是从`HEAD`向前推`n`个`commit`\n\n\n### 全局更换电子邮件\n```\ngit filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_EMAIL\" = \"xxx@localhost\" ];\n        then\n                GIT_AUTHOR_NAME=\"xxx\";\n                GIT_AUTHOR_EMAIL=\"xxx@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD --all\n```\n\n## 帮助\n查看帮助：\n```\n$ git --help\n```\n\n## Reference\n1. [廖雪峰老师的git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n2. [常用Git命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n3. [Git-Book](https://git-scm.com/book/en/v2)\n4. [Git-Reference](https://git-scm.com/docs)\n5. [Git push与pull的默认行为](https://segmentfault.com/a/1190000002783245)\n6. [git stash 详解](http://www.tuicool.com/articles/rUBNBvI)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"git-help-v2","published":1,"updated":"2019-10-17T03:31:55.165Z","layout":"post","photos":[],"link":"","_id":"cklumqgey001u79n5801cz1ag","content":"<p>本文是对之前<a href=\"http://answerywj.com/2016/08/28/Git%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/\">Git速查手册</a>的更新，增加了一些这段时间使用到的命令。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><p>笔者使用的是v2.1.0，推荐大家使用v1.8以上的<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">版本</a>。 查看git版本：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure></p>\n<p>配置命令<code>git config</code>分为三个级别：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--system : 系统级,位于 /etc/gitconfig .</span><br><span class=\"line\">--global : 用户级,位于 ~/.gitconfig .</span><br><span class=\"line\">--local : 仓库级,位于 repo/.git<span class=\"built_in\">/config </span>,default并且优先级最高.</span><br></pre></td></tr></table></figure></p>\n<p>首先需要删除global用户信息,防止不同git软件之间的冲突：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --unset user.name</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --unset user.email</span><br></pre></td></tr></table></figure></p>\n<p>设置用户信息.若同时使用gitlab和github,推荐配置local用户信息：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local user.email <span class=\"string\">\"email\"</span></span><br></pre></td></tr></table></figure></p>\n<p>git支持https和ssh等协议.https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，而ssh支持的原生git协议速度最快。<br>检查本机SSH公钥:<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">ls</span> ~<span class=\"string\">/.ssh</span></span><br></pre></td></tr></table></figure></p>\n<p>若存在,则将<code>id_rsa.pub</code>添加到github的SSH keys中。若不存在,则生成:<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>当ssh配置完成后，再次检查ssh连接情况：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi! You’ve successfully authenticated, <span class=\"keyword\">but</span> GitHub <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> provide shell access.</span><br></pre></td></tr></table></figure></p>\n<p>若出现上述信息，则表示设置成功。<br>若使用https访问, 则进行如下配置,并且设置超时时间避免重复输入密码：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global http<span class=\"selector-class\">.sslverify</span> false</span><br><span class=\"line\">$ git config --global credential<span class=\"selector-class\">.helper</span> <span class=\"string\">'cache --timeout=3600'</span></span><br></pre></td></tr></table></figure></p>\n<p>设置可视化diff和merge工具, linux系统上推荐使用meld或者diffuse：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global diff.tool meld</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global merge.tool meld</span><br></pre></td></tr></table></figure></p>\n<p>保存用户名,密码, 避免每次<code>pull/push</code>操作都需要手动输入：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global credential.helper store</span><br><span class=\"line\"><span class=\"comment\"># 执行上免的命令后, 下次操作输入的密码会被保存</span></span><br></pre></td></tr></table></figure></p>\n<p>设置颜色,利于使用：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global color.ui.<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>设置别名：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global alias checkout co</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上面的命令将<code>checkout</code>设置为别名<code>co</code>。</p>\n</blockquote>\n<p>最后,查看一下所有的设置：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local --list</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --list</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--system --list</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p><img src=\"/2019/02/12/git-help-v2/git-work-flow.jpg\" alt=\"工作流\"></p>\n<p>工作区就是你的本地仓库文件夹,不过其中的<code>.git</code>目录不属于工作区,而是版本库。里面存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>现在来解释一下前面的添加和提交操作：  </p>\n<ol>\n<li><code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</li>\n<li><code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</li>\n</ol>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>获取远程仓库：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@github.com:USERNAME/repo.git</span><br></pre></td></tr></table></figure></p>\n<p>将本地的仓库添加到远程：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>cd repo</span><br><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add origin git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>origin</code>就是一个名字，是<code>git</code>为你默认创建的指向这个远程代码库的标签。</p>\n</blockquote>\n<p>添加修改:<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> &lt;filename&gt; </span></span><br><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> .  <span class=\"comment\"># 添加当前目录所有修改过的文件  </span></span></span><br><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> *  <span class=\"comment\"># 递归地添加执行命令时所在的目录中的所有文件</span></span></span><br></pre></td></tr></table></figure></p>\n<p>提交修改:<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"commit message\"</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -am <span class=\"string\">\"commit message\"</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>commit message</code>的填写可以参考<a href=\"http://blog.jobbole.com/92713/\" target=\"_blank\" rel=\"noopener\">写好 Git Commit 信息的 7 个建议</a>。<br><code>am</code>将添加和提交合并为一步,但只对本来就存在的文件有效。</p>\n</blockquote>\n<p>推送修改：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> &lt;<span class=\"built_in\">feature</span>-branch-name&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>-u</code>选项可以将本地分支与远程分支关联,下次<code>git pull</code>操作时可以不带参数.具体参见<a href=\"http://stackoverflow.com/questions/5697750/what-exactly-does-the-u-do-git-push-u-origin-master-vs-git-push-origin-ma\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</blockquote>\n<p>查看远程仓库：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (push)</span><br><span class=\"line\">origin git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (fetch)</span><br></pre></td></tr></table></figure></p>\n<p>fork后同步上游仓库的更新：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一次需要添加上游仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add upstream git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote -v</span><br><span class=\"line\">origin  git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git (push)</span><br><span class=\"line\">origin  git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git (fetch)</span><br><span class=\"line\">upstream  git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git  (push)</span><br><span class=\"line\">upstream  git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git (fetch)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>git fetch upstream </span><br><span class=\"line\"><span class=\"variable\">$ </span>git difftool &lt;branch-name&gt; upstream/master</span><br><span class=\"line\"><span class=\"variable\">$ </span>git merge upstream/master</span><br><span class=\"line\"><span class=\"variable\">$ </span>git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>引用公共代码：<br>代码引用在git上有两种方式：<code>submodule</code>和<code>subtree</code>，推荐使用<a href=\"http://aoxuis.me/post/2013-08-06-git-subtree\" target=\"_blank\" rel=\"noopener\">subtree</a>方式。<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次初始化</span><br><span class=\"line\">$ git remote <span class=\"keyword\">add </span>-f &lt;remote-<span class=\"keyword\">subtree-repository-name&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository-url&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span><span class=\"keyword\">add </span>--prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt; </span>--squash</span><br><span class=\"line\"></span><br><span class=\"line\"># 同步<span class=\"keyword\">subtree的更新</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span>pull --prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt; </span>--squash</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送到远程<span class=\"keyword\">subtree库</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span><span class=\"keyword\">push </span>--prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用标签\"><a href=\"#使用标签\" class=\"headerlink\" title=\"使用标签\"></a>使用标签</h2><p>查看标签 ：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span></span><br></pre></td></tr></table></figure></p>\n<p>创建标签 ：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> <span class=\"tag\">&lt;tagname&gt;</span> -m <span class=\"string\">\"tag message\"</span> <span class=\"comment\"># 创建标签在当前最新提交的commit上</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> <span class=\"tag\">&lt;tagname&gt;</span> -m <span class=\"string\">\"tag message\"</span> <span class=\"tag\">&lt;commit id&gt;</span> <span class=\"comment\"># 创建标签在指定的commit上</span></span><br></pre></td></tr></table></figure></p>\n<p>推送标签到远程：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push</span> origin &lt;tagname&gt; <span class=\"meta\"># 推送一个本地标签</span></span><br><span class=\"line\">$ git <span class=\"keyword\">push</span> origin --tags <span class=\"meta\"># 推送全部未推送过的本地标签</span></span><br></pre></td></tr></table></figure></p>\n<p>删除标签：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git tag -d &lt;tagname&gt; <span class=\"comment\"># 删除一个本地标签；</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin <span class=\"symbol\">:refs/tags/&lt;tagname&gt;</span> <span class=\"comment\"># 删除一个远程标签。</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"撤销与回退\"><a href=\"#撤销与回退\" class=\"headerlink\" title=\"撤销与回退\"></a>撤销与回退</h2><p>查看当前仓库状态:<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git status</span><br></pre></td></tr></table></figure></p>\n<p>查看文件更改：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git difftool <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br><span class=\"line\">$ git mergetool <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>查看提交历史:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\">#只保留commit id 和 commit message</span></span></span><br></pre></td></tr></table></figure></p>\n<p>撤销工作区<code>Tracked files</code>的修改：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout <span class=\"comment\">-- &lt;filename&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>撤销工作区<code>Untracked files</code>的修改：<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#####</span><br><span class=\"line\"># n:查看将会删除的文件，防止误删</span><br><span class=\"line\"># f:Untracked的文件</span><br><span class=\"line\"># d:Untracked的目录</span><br><span class=\"line\"># x:包含gitignore的Untracked文件和目录一并删掉，慎用！</span><br><span class=\"line\">#####</span><br><span class=\"line\"></span><br><span class=\"line\">git clean -nfd</span><br><span class=\"line\">git clean -fd</span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)和暂存区(<code>git add</code>)，不删除工作空间代码：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--mixed HEAD^ # --mixed为默认参数</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span>^</span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)，暂存区(<code>git add</code>)不回退，不删除工作空间代码：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--soft HEAD^</span></span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)和暂存区(<code>git add</code>)，并删除工作空间代码(不包括<code>Untracked files</code>)，执行后直接恢复到指定<code>&lt;commit-id&gt;</code>状态：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard &lt;commit-id&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上个版本，<code>HEAD^^</code>表示上上个版本，上100个版本可以表示为<code>HEAD~100</code>以此类推。</p>\n</blockquote>\n<p>回退版本后，若需要返回原来的版本，会发现找不到未来的<code>commit id</code>，则需要查看操作命令历史进行查找：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git reflog</span><br></pre></td></tr></table></figure></p>\n<p>从版本库删除文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>若你的代码已经<code>push</code>到线上，则推荐使用下面这个命令回滚：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git revert &lt;commit-<span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>revert</code>是用一次新的<code>commit</code>来回滚之前的<code>commit</code>，更安全;<code>reset</code>则是直接删除指定的<code>commit</code>，若直接<code>push</code>会导致冲突。</p>\n</blockquote>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>查看所有分支，有<code>*</code>标记的是当前分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-a</span><br></pre></td></tr></table></figure></p>\n<p>创建本地分支：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch &lt;<span class=\"keyword\">new</span><span class=\"type\">branch</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建并切换本地分支：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b &lt;<span class=\"keyword\">new</span><span class=\"type\">branch</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>从标签创建分支：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"params\">&lt;branch&gt;</span> <span class=\"params\">&lt;tagname&gt;</span></span><br><span class=\"line\">$ git checkout <span class=\"params\">&lt;branch&gt;</span> <span class=\"meta\"># 切换到新建分支</span></span><br></pre></td></tr></table></figure></p>\n<p>推送新建本地分支到远程：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git push -u origin &lt;remote-branch-name&gt;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git push --<span class=\"keyword\">set</span>-upstream <span class=\"comment\">origin &lt;remote-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>删除本地分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-d &lt;<span class=\"keyword\">branch&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>若当前分支因为有修改未提交或其它情况不能删除，请使用<code>-D</code>选项强制删除。</p>\n</blockquote>\n<p>删除远程分支(三种方法)：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git push origin --delete &lt;remote-branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin -d &lt;remote-branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin <span class=\"symbol\">:&lt;remote-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>清除无用的分支：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git remote prune origin</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>说明：remote上的一个分支被其他人删除后，需要更新本地的分支列表。</p>\n</blockquote>\n<p>获取远程分支到本地已有分支：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --<span class=\"built_in\">set</span>-upstream &lt;<span class=\"built_in\">local</span>-branch&gt; origin/branch</span></span><br></pre></td></tr></table></figure></p>\n<p>获取远程分支到本地并新建本地分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -<span class=\"keyword\">b </span>&lt;local-<span class=\"keyword\">branch&gt; </span>&lt;remote-<span class=\"keyword\">branch&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同步当前分支的更新，使用<code>git pull</code>并不保险：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载最新的代码到远程跟踪分支, 即origin/&lt;branch-name&gt;</span></span><br><span class=\"line\">$ git fetch <span class=\"keyword\">origin </span>&lt;<span class=\"keyword\">branch-name&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># 查看更新内容</span></span><br><span class=\"line\">$ git <span class=\"keyword\">difftool </span>&lt;<span class=\"keyword\">branch-name&gt; </span><span class=\"keyword\">origin/&lt;branch-name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\"># </span>尝试合并远程跟踪分支的代码到本地分支 </span><br><span class=\"line\">$ git merge <span class=\"keyword\">origin/&lt;branch-name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\"># </span>借助mergetool解决冲突              </span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>同步其它分支的更新，本例拉取<code>master</code>分支更新：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin <span class=\"literal\">master</span></span><br><span class=\"line\">$ git difftool <span class=\"tag\">&lt;branch-name&gt;</span> origin/<span class=\"literal\">master</span></span><br><span class=\"line\">$ git merge origin/<span class=\"literal\">master</span></span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>查看某个<code>&lt;commit id&gt;</code>属于哪个分支:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -<span class=\"keyword\">a</span> <span class=\"comment\">--contains &lt;commit id&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"暂存\"><a href=\"#暂存\" class=\"headerlink\" title=\"暂存\"></a>暂存</h2><p>当你需要切换分支时,若当前工作区还有些修改没有完成,又不适合提交的,操作切换分支是会提示出错的.这时就需要将这些修改暂存起来:<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git stash save <span class=\"string\">\"message\"</span></span><br></pre></td></tr></table></figure></p>\n<p>查看:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure></p>\n<p>恢复:<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">pop</span> [--<span class=\"keyword\">index</span>] [stash@&#123;num&#125;]　</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">$ git stash apply [--<span class=\"keyword\">index</span>] [stash@&#123;num&#125;]　<span class=\"comment\"># 不删除已恢复的进度.</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>--index</code>表示不仅恢复工作区,还会恢复暂存区;<code>num</code>是你要恢复的操作的序列号,默认恢复最新进度.</p>\n</blockquote>\n<p>删除进度:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">drop</span> [stash@&#123;<span class=\"keyword\">num</span>&#125;] <span class=\"comment\"># 删除指定进度</span></span><br><span class=\"line\">$ git stash <span class=\"keyword\">clear</span> <span class=\"comment\"># 删除所有</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"清理仓库\"><a href=\"#清理仓库\" class=\"headerlink\" title=\"清理仓库\"></a>清理仓库</h2><h3 id=\"清理无用的分支和标签\"><a href=\"#清理无用的分支和标签\" class=\"headerlink\" title=\"清理无用的分支和标签\"></a>清理无用的分支和标签</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git branch -d &lt;branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git tag -d &lt;tag-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote prune origin</span><br><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n<h3 id=\"清理大文件\"><a href=\"#清理大文件\" class=\"headerlink\" title=\"清理大文件\"></a>清理大文件</h3><ul>\n<li><p>查看<code>git</code>相关文件占用空间：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git count-objects -v</span><br><span class=\"line\"><span class=\"variable\">$ </span>du -sh .git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>寻找大文件<code>ID</code></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git verify-<span class=\"keyword\">pack</span> -v .git/objects/<span class=\"keyword\">pack</span>/*.idx | <span class=\"keyword\">sort</span> -k <span class=\"number\">3</span> -n | tail -<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>输出的第一列是文件<code>I</code>D，第二列表示文件<code>（blob）</code>或目录<code>（tree）</code>，第三列是文件大小，此处筛选了最大的10条</p>\n</blockquote>\n<ul>\n<li><p>获取文件名与<code>ID</code>映射</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rev-list --objects --all <span class=\"params\">| grep \"$(git verify-pack -v .git/objects/pack/*.idx |</span> sort -k <span class=\"number\">3</span> -n <span class=\"params\">| tail -10 |</span> awk <span class=\"string\">'&#123;print$1&#125;'</span>)<span class=\"string\">\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从所有提交中删除文件</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git filter-branch --tree-filter <span class=\"string\">'rm -rf xxx'</span> HEAD --<span class=\"keyword\">all</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理<code>.git</code>目录:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git gc <span class=\"attribute\">--prune</span>=now</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>tips: 在执行<code>push</code>操作时，<code>git</code>会自动执行一次<code>gc</code>操作，不过只有<code>loose object</code>达到一定数量后才会真正调用，建议手动执行。</p>\n</blockquote>\n<h3 id=\"处理大型二进制文件\"><a href=\"#处理大型二进制文件\" class=\"headerlink\" title=\"处理大型二进制文件\"></a>处理大型二进制文件</h3><p>由于git在存储二进制文件时效率不高,所以需要借助<a href=\"http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym\" target=\"_blank\" rel=\"noopener\">第三方组件</a>。</p>\n<h2 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件\"></a>忽略特殊文件</h2><p>当你的仓库中有一些文件，类似密码或者数据库文件不需要提交但又必须放在仓库目录下，每次<code>git status</code>都会提示<code>Untracked</code>，看着让人很不爽，提供两种方法解决这个问题</p>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h3><p>在代码仓库目录创建一个<code>.gitignore</code>文件，编写规则如下：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp/  <span class=\"comment\"># 忽略tmp文件夹下所有内容</span></span><br><span class=\"line\">*<span class=\"string\">.ini</span> <span class=\"comment\"># 忽略所有ini文件</span></span><br><span class=\"line\">!data/ <span class=\"comment\">#忽略除了data文件夹的所有内容</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><p>在用户目录创建一个<code>.gitignore_global</code>文件，编写规则同<code>.gitignore</code>，并修改<code>~/.gitconfig</code><br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[core]</span></span><br><span class=\"line\">\texcludesfile = ~/.gitignore_global</span><br></pre></td></tr></table></figure></p>\n<p>如果添加的忽略对象已经<code>Tracked</code>，纳入了版本管理中，则需要在代码仓库中先把本地缓存删除,改变成<code>Untracked</code>状态<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r <span class=\"comment\">--cached .</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\"><code>.gitignore</code>模版</a></p>\n</blockquote>\n<h2 id=\"奇技淫巧\"><a href=\"#奇技淫巧\" class=\"headerlink\" title=\"奇技淫巧\"></a>奇技淫巧</h2><h3 id=\"重写历史（慎用！）\"><a href=\"#重写历史（慎用！）\" class=\"headerlink\" title=\"重写历史（慎用！）\"></a>重写历史（慎用！）</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i [git-hash<span class=\"string\">| head~n]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>git-hash</code>是你要开始进行<code>rebase</code>的<code>commit</code>的<code>hash</code>，而<code>head~n</code>则是从<code>HEAD</code>向前推<code>n</code>个<code>commit</code></p>\n</blockquote>\n<h3 id=\"全局更换电子邮件\"><a href=\"#全局更换电子邮件\" class=\"headerlink\" title=\"全局更换电子邮件\"></a>全局更换电子邮件</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch <span class=\"comment\">--commit-filter '</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">\"$GIT_AUTHOR_EMAIL\"</span> = <span class=\"string\">\"xxx@localhost\"</span> ];</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">                GIT_AUTHOR_NAME=<span class=\"string\">\"xxx\"</span>;</span><br><span class=\"line\">                GIT_AUTHOR_EMAIL=<span class=\"string\">\"xxx@example.com\"</span>;</span><br><span class=\"line\">                git commit-tree <span class=\"string\">\"$@\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">                git commit-tree <span class=\"string\">\"$@\"</span>;</span><br><span class=\"line\">        fi' HEAD <span class=\"comment\">--all</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h2><p>查看帮助：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git --<span class=\"built_in\">help</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的git教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用Git命令清单</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Git-Book</a></li>\n<li><a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">Git-Reference</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002783245\" target=\"_blank\" rel=\"noopener\">Git push与pull的默认行为</a></li>\n<li><a href=\"http://www.tuicool.com/articles/rUBNBvI\" target=\"_blank\" rel=\"noopener\">git stash 详解</a></li>\n</ol>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文是对之前<a href=\"http://answerywj.com/2016/08/28/Git%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/\">Git速查手册</a>的更新，增加了一些这段时间使用到的命令。</p>\n<hr>","more":"<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><p>笔者使用的是v2.1.0，推荐大家使用v1.8以上的<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">版本</a>。 查看git版本：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure></p>\n<p>配置命令<code>git config</code>分为三个级别：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--system : 系统级,位于 /etc/gitconfig .</span><br><span class=\"line\">--global : 用户级,位于 ~/.gitconfig .</span><br><span class=\"line\">--local : 仓库级,位于 repo/.git<span class=\"built_in\">/config </span>,default并且优先级最高.</span><br></pre></td></tr></table></figure></p>\n<p>首先需要删除global用户信息,防止不同git软件之间的冲突：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --unset user.name</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --unset user.email</span><br></pre></td></tr></table></figure></p>\n<p>设置用户信息.若同时使用gitlab和github,推荐配置local用户信息：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local user.email <span class=\"string\">\"email\"</span></span><br></pre></td></tr></table></figure></p>\n<p>git支持https和ssh等协议.https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，而ssh支持的原生git协议速度最快。<br>检查本机SSH公钥:<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">ls</span> ~<span class=\"string\">/.ssh</span></span><br></pre></td></tr></table></figure></p>\n<p>若存在,则将<code>id_rsa.pub</code>添加到github的SSH keys中。若不存在,则生成:<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>当ssh配置完成后，再次检查ssh连接情况：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi! You’ve successfully authenticated, <span class=\"keyword\">but</span> GitHub <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> provide shell access.</span><br></pre></td></tr></table></figure></p>\n<p>若出现上述信息，则表示设置成功。<br>若使用https访问, 则进行如下配置,并且设置超时时间避免重复输入密码：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global http<span class=\"selector-class\">.sslverify</span> false</span><br><span class=\"line\">$ git config --global credential<span class=\"selector-class\">.helper</span> <span class=\"string\">'cache --timeout=3600'</span></span><br></pre></td></tr></table></figure></p>\n<p>设置可视化diff和merge工具, linux系统上推荐使用meld或者diffuse：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global diff.tool meld</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global merge.tool meld</span><br></pre></td></tr></table></figure></p>\n<p>保存用户名,密码, 避免每次<code>pull/push</code>操作都需要手动输入：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global credential.helper store</span><br><span class=\"line\"><span class=\"comment\"># 执行上免的命令后, 下次操作输入的密码会被保存</span></span><br></pre></td></tr></table></figure></p>\n<p>设置颜色,利于使用：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global color.ui.<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>设置别名：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global alias checkout co</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上面的命令将<code>checkout</code>设置为别名<code>co</code>。</p>\n</blockquote>\n<p>最后,查看一下所有的设置：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--local --list</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global --list</span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--system --list</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p><img src=\"/2019/02/12/git-help-v2/git-work-flow.jpg\" alt=\"工作流\"></p>\n<p>工作区就是你的本地仓库文件夹,不过其中的<code>.git</code>目录不属于工作区,而是版本库。里面存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>现在来解释一下前面的添加和提交操作：  </p>\n<ol>\n<li><code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</li>\n<li><code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</li>\n</ol>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>获取远程仓库：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@github.com:USERNAME/repo.git</span><br></pre></td></tr></table></figure></p>\n<p>将本地的仓库添加到远程：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>cd repo</span><br><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add origin git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>origin</code>就是一个名字，是<code>git</code>为你默认创建的指向这个远程代码库的标签。</p>\n</blockquote>\n<p>添加修改:<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> &lt;filename&gt; </span></span><br><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> .  <span class=\"comment\"># 添加当前目录所有修改过的文件  </span></span></span><br><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> *  <span class=\"comment\"># 递归地添加执行命令时所在的目录中的所有文件</span></span></span><br></pre></td></tr></table></figure></p>\n<p>提交修改:<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"commit message\"</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -am <span class=\"string\">\"commit message\"</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>commit message</code>的填写可以参考<a href=\"http://blog.jobbole.com/92713/\" target=\"_blank\" rel=\"noopener\">写好 Git Commit 信息的 7 个建议</a>。<br><code>am</code>将添加和提交合并为一步,但只对本来就存在的文件有效。</p>\n</blockquote>\n<p>推送修改：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> &lt;<span class=\"built_in\">feature</span>-branch-name&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>-u</code>选项可以将本地分支与远程分支关联,下次<code>git pull</code>操作时可以不带参数.具体参见<a href=\"http://stackoverflow.com/questions/5697750/what-exactly-does-the-u-do-git-push-u-origin-master-vs-git-push-origin-ma\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</blockquote>\n<p>查看远程仓库：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (push)</span><br><span class=\"line\">origin git@github<span class=\"selector-class\">.com</span>:USERNAME/repo<span class=\"selector-class\">.git</span> (fetch)</span><br></pre></td></tr></table></figure></p>\n<p>fork后同步上游仓库的更新：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一次需要添加上游仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add upstream git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote -v</span><br><span class=\"line\">origin  git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git (push)</span><br><span class=\"line\">origin  git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git (fetch)</span><br><span class=\"line\">upstream  git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git  (push)</span><br><span class=\"line\">upstream  git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>USERNAME/repo.git (fetch)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>git fetch upstream </span><br><span class=\"line\"><span class=\"variable\">$ </span>git difftool &lt;branch-name&gt; upstream/master</span><br><span class=\"line\"><span class=\"variable\">$ </span>git merge upstream/master</span><br><span class=\"line\"><span class=\"variable\">$ </span>git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>引用公共代码：<br>代码引用在git上有两种方式：<code>submodule</code>和<code>subtree</code>，推荐使用<a href=\"http://aoxuis.me/post/2013-08-06-git-subtree\" target=\"_blank\" rel=\"noopener\">subtree</a>方式。<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次初始化</span><br><span class=\"line\">$ git remote <span class=\"keyword\">add </span>-f &lt;remote-<span class=\"keyword\">subtree-repository-name&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository-url&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span><span class=\"keyword\">add </span>--prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt; </span>--squash</span><br><span class=\"line\"></span><br><span class=\"line\"># 同步<span class=\"keyword\">subtree的更新</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span>pull --prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt; </span>--squash</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送到远程<span class=\"keyword\">subtree库</span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>git <span class=\"keyword\">subtree </span><span class=\"keyword\">push </span>--prefix=&lt;local-<span class=\"keyword\">subtree-directory&gt; </span>&lt;remote-<span class=\"keyword\">subtree-repository&gt; </span>&lt;remote-<span class=\"keyword\">subtree-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用标签\"><a href=\"#使用标签\" class=\"headerlink\" title=\"使用标签\"></a>使用标签</h2><p>查看标签 ：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span></span><br></pre></td></tr></table></figure></p>\n<p>创建标签 ：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> <span class=\"tag\">&lt;tagname&gt;</span> -m <span class=\"string\">\"tag message\"</span> <span class=\"comment\"># 创建标签在当前最新提交的commit上</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> <span class=\"tag\">&lt;tagname&gt;</span> -m <span class=\"string\">\"tag message\"</span> <span class=\"tag\">&lt;commit id&gt;</span> <span class=\"comment\"># 创建标签在指定的commit上</span></span><br></pre></td></tr></table></figure></p>\n<p>推送标签到远程：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push</span> origin &lt;tagname&gt; <span class=\"meta\"># 推送一个本地标签</span></span><br><span class=\"line\">$ git <span class=\"keyword\">push</span> origin --tags <span class=\"meta\"># 推送全部未推送过的本地标签</span></span><br></pre></td></tr></table></figure></p>\n<p>删除标签：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git tag -d &lt;tagname&gt; <span class=\"comment\"># 删除一个本地标签；</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin <span class=\"symbol\">:refs/tags/&lt;tagname&gt;</span> <span class=\"comment\"># 删除一个远程标签。</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"撤销与回退\"><a href=\"#撤销与回退\" class=\"headerlink\" title=\"撤销与回退\"></a>撤销与回退</h2><p>查看当前仓库状态:<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git status</span><br></pre></td></tr></table></figure></p>\n<p>查看文件更改：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git difftool <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br><span class=\"line\">$ git mergetool <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>查看提交历史:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\">#只保留commit id 和 commit message</span></span></span><br></pre></td></tr></table></figure></p>\n<p>撤销工作区<code>Tracked files</code>的修改：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout <span class=\"comment\">-- &lt;filename&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>撤销工作区<code>Untracked files</code>的修改：<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#####</span><br><span class=\"line\"># n:查看将会删除的文件，防止误删</span><br><span class=\"line\"># f:Untracked的文件</span><br><span class=\"line\"># d:Untracked的目录</span><br><span class=\"line\"># x:包含gitignore的Untracked文件和目录一并删掉，慎用！</span><br><span class=\"line\">#####</span><br><span class=\"line\"></span><br><span class=\"line\">git clean -nfd</span><br><span class=\"line\">git clean -fd</span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)和暂存区(<code>git add</code>)，不删除工作空间代码：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--mixed HEAD^ # --mixed为默认参数</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span>^</span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)，暂存区(<code>git add</code>)不回退，不删除工作空间代码：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--soft HEAD^</span></span><br></pre></td></tr></table></figure></p>\n<p>回退版本区(<code>git commit</code>)和暂存区(<code>git add</code>)，并删除工作空间代码(不包括<code>Untracked files</code>)，执行后直接恢复到指定<code>&lt;commit-id&gt;</code>状态：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard &lt;commit-id&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上个版本，<code>HEAD^^</code>表示上上个版本，上100个版本可以表示为<code>HEAD~100</code>以此类推。</p>\n</blockquote>\n<p>回退版本后，若需要返回原来的版本，会发现找不到未来的<code>commit id</code>，则需要查看操作命令历史进行查找：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git reflog</span><br></pre></td></tr></table></figure></p>\n<p>从版本库删除文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>若你的代码已经<code>push</code>到线上，则推荐使用下面这个命令回滚：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git revert &lt;commit-<span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>revert</code>是用一次新的<code>commit</code>来回滚之前的<code>commit</code>，更安全;<code>reset</code>则是直接删除指定的<code>commit</code>，若直接<code>push</code>会导致冲突。</p>\n</blockquote>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>查看所有分支，有<code>*</code>标记的是当前分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-a</span><br></pre></td></tr></table></figure></p>\n<p>创建本地分支：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch &lt;<span class=\"keyword\">new</span><span class=\"type\">branch</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建并切换本地分支：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b &lt;<span class=\"keyword\">new</span><span class=\"type\">branch</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>从标签创建分支：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"params\">&lt;branch&gt;</span> <span class=\"params\">&lt;tagname&gt;</span></span><br><span class=\"line\">$ git checkout <span class=\"params\">&lt;branch&gt;</span> <span class=\"meta\"># 切换到新建分支</span></span><br></pre></td></tr></table></figure></p>\n<p>推送新建本地分支到远程：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git push -u origin &lt;remote-branch-name&gt;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git push --<span class=\"keyword\">set</span>-upstream <span class=\"comment\">origin &lt;remote-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>删除本地分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-d &lt;<span class=\"keyword\">branch&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>若当前分支因为有修改未提交或其它情况不能删除，请使用<code>-D</code>选项强制删除。</p>\n</blockquote>\n<p>删除远程分支(三种方法)：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git push origin --delete &lt;remote-branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin -d &lt;remote-branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git push origin <span class=\"symbol\">:&lt;remote-branch-name&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>清除无用的分支：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git remote prune origin</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>说明：remote上的一个分支被其他人删除后，需要更新本地的分支列表。</p>\n</blockquote>\n<p>获取远程分支到本地已有分支：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --<span class=\"built_in\">set</span>-upstream &lt;<span class=\"built_in\">local</span>-branch&gt; origin/branch</span></span><br></pre></td></tr></table></figure></p>\n<p>获取远程分支到本地并新建本地分支：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -<span class=\"keyword\">b </span>&lt;local-<span class=\"keyword\">branch&gt; </span>&lt;remote-<span class=\"keyword\">branch&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同步当前分支的更新，使用<code>git pull</code>并不保险：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载最新的代码到远程跟踪分支, 即origin/&lt;branch-name&gt;</span></span><br><span class=\"line\">$ git fetch <span class=\"keyword\">origin </span>&lt;<span class=\"keyword\">branch-name&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># 查看更新内容</span></span><br><span class=\"line\">$ git <span class=\"keyword\">difftool </span>&lt;<span class=\"keyword\">branch-name&gt; </span><span class=\"keyword\">origin/&lt;branch-name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\"># </span>尝试合并远程跟踪分支的代码到本地分支 </span><br><span class=\"line\">$ git merge <span class=\"keyword\">origin/&lt;branch-name&gt;</span></span><br><span class=\"line\"><span class=\"keyword\"># </span>借助mergetool解决冲突              </span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>同步其它分支的更新，本例拉取<code>master</code>分支更新：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin <span class=\"literal\">master</span></span><br><span class=\"line\">$ git difftool <span class=\"tag\">&lt;branch-name&gt;</span> origin/<span class=\"literal\">master</span></span><br><span class=\"line\">$ git merge origin/<span class=\"literal\">master</span></span><br><span class=\"line\">$ git mergetool</span><br></pre></td></tr></table></figure></p>\n<p>查看某个<code>&lt;commit id&gt;</code>属于哪个分支:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -<span class=\"keyword\">a</span> <span class=\"comment\">--contains &lt;commit id&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"暂存\"><a href=\"#暂存\" class=\"headerlink\" title=\"暂存\"></a>暂存</h2><p>当你需要切换分支时,若当前工作区还有些修改没有完成,又不适合提交的,操作切换分支是会提示出错的.这时就需要将这些修改暂存起来:<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git stash save <span class=\"string\">\"message\"</span></span><br></pre></td></tr></table></figure></p>\n<p>查看:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure></p>\n<p>恢复:<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">pop</span> [--<span class=\"keyword\">index</span>] [stash@&#123;num&#125;]　</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">$ git stash apply [--<span class=\"keyword\">index</span>] [stash@&#123;num&#125;]　<span class=\"comment\"># 不删除已恢复的进度.</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>--index</code>表示不仅恢复工作区,还会恢复暂存区;<code>num</code>是你要恢复的操作的序列号,默认恢复最新进度.</p>\n</blockquote>\n<p>删除进度:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">drop</span> [stash@&#123;<span class=\"keyword\">num</span>&#125;] <span class=\"comment\"># 删除指定进度</span></span><br><span class=\"line\">$ git stash <span class=\"keyword\">clear</span> <span class=\"comment\"># 删除所有</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"清理仓库\"><a href=\"#清理仓库\" class=\"headerlink\" title=\"清理仓库\"></a>清理仓库</h2><h3 id=\"清理无用的分支和标签\"><a href=\"#清理无用的分支和标签\" class=\"headerlink\" title=\"清理无用的分支和标签\"></a>清理无用的分支和标签</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git branch -d &lt;branch-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git tag -d &lt;tag-name&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote prune origin</span><br><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n<h3 id=\"清理大文件\"><a href=\"#清理大文件\" class=\"headerlink\" title=\"清理大文件\"></a>清理大文件</h3><ul>\n<li><p>查看<code>git</code>相关文件占用空间：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git count-objects -v</span><br><span class=\"line\"><span class=\"variable\">$ </span>du -sh .git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>寻找大文件<code>ID</code></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git verify-<span class=\"keyword\">pack</span> -v .git/objects/<span class=\"keyword\">pack</span>/*.idx | <span class=\"keyword\">sort</span> -k <span class=\"number\">3</span> -n | tail -<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>输出的第一列是文件<code>I</code>D，第二列表示文件<code>（blob）</code>或目录<code>（tree）</code>，第三列是文件大小，此处筛选了最大的10条</p>\n</blockquote>\n<ul>\n<li><p>获取文件名与<code>ID</code>映射</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rev-list --objects --all <span class=\"params\">| grep \"$(git verify-pack -v .git/objects/pack/*.idx |</span> sort -k <span class=\"number\">3</span> -n <span class=\"params\">| tail -10 |</span> awk <span class=\"string\">'&#123;print$1&#125;'</span>)<span class=\"string\">\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从所有提交中删除文件</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git filter-branch --tree-filter <span class=\"string\">'rm -rf xxx'</span> HEAD --<span class=\"keyword\">all</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理<code>.git</code>目录:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git gc <span class=\"attribute\">--prune</span>=now</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>tips: 在执行<code>push</code>操作时，<code>git</code>会自动执行一次<code>gc</code>操作，不过只有<code>loose object</code>达到一定数量后才会真正调用，建议手动执行。</p>\n</blockquote>\n<h3 id=\"处理大型二进制文件\"><a href=\"#处理大型二进制文件\" class=\"headerlink\" title=\"处理大型二进制文件\"></a>处理大型二进制文件</h3><p>由于git在存储二进制文件时效率不高,所以需要借助<a href=\"http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym\" target=\"_blank\" rel=\"noopener\">第三方组件</a>。</p>\n<h2 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件\"></a>忽略特殊文件</h2><p>当你的仓库中有一些文件，类似密码或者数据库文件不需要提交但又必须放在仓库目录下，每次<code>git status</code>都会提示<code>Untracked</code>，看着让人很不爽，提供两种方法解决这个问题</p>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h3><p>在代码仓库目录创建一个<code>.gitignore</code>文件，编写规则如下：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp/  <span class=\"comment\"># 忽略tmp文件夹下所有内容</span></span><br><span class=\"line\">*<span class=\"string\">.ini</span> <span class=\"comment\"># 忽略所有ini文件</span></span><br><span class=\"line\">!data/ <span class=\"comment\">#忽略除了data文件夹的所有内容</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><p>在用户目录创建一个<code>.gitignore_global</code>文件，编写规则同<code>.gitignore</code>，并修改<code>~/.gitconfig</code><br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[core]</span></span><br><span class=\"line\">\texcludesfile = ~/.gitignore_global</span><br></pre></td></tr></table></figure></p>\n<p>如果添加的忽略对象已经<code>Tracked</code>，纳入了版本管理中，则需要在代码仓库中先把本地缓存删除,改变成<code>Untracked</code>状态<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r <span class=\"comment\">--cached .</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\"><code>.gitignore</code>模版</a></p>\n</blockquote>\n<h2 id=\"奇技淫巧\"><a href=\"#奇技淫巧\" class=\"headerlink\" title=\"奇技淫巧\"></a>奇技淫巧</h2><h3 id=\"重写历史（慎用！）\"><a href=\"#重写历史（慎用！）\" class=\"headerlink\" title=\"重写历史（慎用！）\"></a>重写历史（慎用！）</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i [git-hash<span class=\"string\">| head~n]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>git-hash</code>是你要开始进行<code>rebase</code>的<code>commit</code>的<code>hash</code>，而<code>head~n</code>则是从<code>HEAD</code>向前推<code>n</code>个<code>commit</code></p>\n</blockquote>\n<h3 id=\"全局更换电子邮件\"><a href=\"#全局更换电子邮件\" class=\"headerlink\" title=\"全局更换电子邮件\"></a>全局更换电子邮件</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch <span class=\"comment\">--commit-filter '</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">\"$GIT_AUTHOR_EMAIL\"</span> = <span class=\"string\">\"xxx@localhost\"</span> ];</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">                GIT_AUTHOR_NAME=<span class=\"string\">\"xxx\"</span>;</span><br><span class=\"line\">                GIT_AUTHOR_EMAIL=<span class=\"string\">\"xxx@example.com\"</span>;</span><br><span class=\"line\">                git commit-tree <span class=\"string\">\"$@\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">                git commit-tree <span class=\"string\">\"$@\"</span>;</span><br><span class=\"line\">        fi' HEAD <span class=\"comment\">--all</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h2><p>查看帮助：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git --<span class=\"built_in\">help</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的git教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用Git命令清单</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Git-Book</a></li>\n<li><a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">Git-Reference</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002783245\" target=\"_blank\" rel=\"noopener\">Git push与pull的默认行为</a></li>\n<li><a href=\"http://www.tuicool.com/articles/rUBNBvI\" target=\"_blank\" rel=\"noopener\">git stash 详解</a></li>\n</ol>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Homebrew","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2020-02-17T12:42:48.000Z","_content":"\n本文将介绍`Homebrew`的安装与使用。\n\n----------\n<!--more-->\n\n## Homebrew\n### 简介\n`Homebrew`是`OS X`上类似于`apt-get`和`yum`的软件包管理器，软件源依托于`Github`之上，所以在国内的网络环境之下，常常会出现使用`Homebrew`安装软件时，如`brew install sshfs`，经常会长时间卡在`Updating Homebrew...`。\n> `OS X 10.9`开始支持\n\n### 安装\n首先安装依赖`Xcode命令行工具`：\n```\n$ xcode-select --install\n```\n\n然后安装`Homebrew`：\n```\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 卸载\n```\n$ ruby -e \"$(curl -fsSL $https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n$ sudo rm -rf /usr/local/\n```\n\n## 解决软件源更新慢问题\n### 取消更新\n当安装过程中，卡在`Updating Homebrew...`时，我们可以按住`control + c`，来取消本次更新；之后命令行会显示`^C`，表示取消成功，后面会继续安装工作。\n> 这个方法是临时，仅在本次安装生效。\n\n### 关闭自动更新\n`Homebrew`的软件源更新，是在每次安装时自动执行的，可以通过配置进行关闭。\n\n`zsh`终端方式：\n```\n$ echo 'export HOMEBREW_NO_AUTO_UPDATE=true' >> ~/.zshrc\n$ source ~/.zshrc\n```\n\n`bash`终端方式：\n```\n$ echo 'export HOMEBREW_NO_AUTO_UPDATE=true' >> ~/.bash_profile\n$ source ~/.bash_profile\n```\n> 这个方法是永久的，每次安装都会生效，但弊端是无法获取最新的软件。\n\n### 替换软件源\n这里推荐中科大的镜像源，亲测可用。  \n#### 替换homebrew源\n```\n$ cd \"$(brew --repo)\"\n$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n```\n\n还原官方源：\n```\n$ cd \"$(brew --repo)\"\n$ git remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n#### 替换homebrew-core源(核心软件仓库)\n```\n$ cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\n$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n```\n\n还原官方源：\n```\n$ cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\n$ git remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n#### 替换homebrew-cask源(macOS应用)\n```\n$ cd \"$(brew --repo)\"/Library/Taps/homebrew/homebrew-cask \n$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git\n```\n若提示找不到`\"$(brew --repo)\"/Library/Taps/homebrew/homebrew-cask`，则：\n```\n$ cd \"$(brew --repo)\"/Library/Taps/homebrew/\n$ git clone https://mirrors.ustc.edu.cn/homebrew-cask.git\n```\n\n还原官方源：\n```\n$ cd \"$(brew --repo)\"/Library/Taps/homebrew/homebrew-cask  \n$ git remote set-url origin https://github.com/Homebrew/homebrew-cask\n```\n\n> `brew cask`安装软件，会自动创建软链接到`Application`目录，这样在`Launchpad`中也能查看到安装的软件，方便启动软件\n\n#### 替换homebrew bottles源(预编译二进制软件包)\n`zsh`终端方式：\n```\n$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.zshrc\n$ source ~/.zshrc\n```\n\n`bash`终端方式：\n```\n$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile\n$ source ~/.bash_profile\n```\n\n还原官方源：进入如上终端配置文件，并删除`HOMEBREW_BOTTLE_DOMAIN`改行配置，并\n`source`终端配置文件，使之生效。\n\n## 常见错误\n- `Error: Another active Homebrew update process is already in progress.`  \n解决方法：`rm -rf /usr/local/var/homebrew/locks`\n\n## 附\n### Homebrew常用命令\n- 查看Homebrew版本：\n```\n$ brew -v\n```\n\n- Homebrew帮助信息：\n```\n$ brew [cask] -h\n```\n\n- 更新Homebrew：\n```\n$ brew update\n```\n\n- 更新Homebrew cask：\n```\n$ brew cask upgrade\n```\n\n- 安装软件：\n```\n$ brew [cask] install <packageName>\n```\n\n- 卸载软件：\n```\n$ brew [cask] uninstall <packageName>\n```\n\n- 查询可用软件：\n```\n$ brew search <packageName>\n```\n\n- 查看已安装软件：\n```\n$ brew [cask] list\n```\n\n- 查看软件信息：\n```\n$ brew [cask] info <packageName>\n```\n\n### 确认shell版本方式\n```\n$ echo $SHELL\n```\n> 输出`/bin/zsh`为`zsh`终端，输出`/bin/bash`为`bash`终端。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/homebrew-in-mac.md","raw":"---\ntitle: Homebrew\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - mac\n  - Homebrew\ndate: 2020-02-17 20:42:48\ncategories: 系统配置\n---\n\n本文将介绍`Homebrew`的安装与使用。\n\n----------\n<!--more-->\n\n## Homebrew\n### 简介\n`Homebrew`是`OS X`上类似于`apt-get`和`yum`的软件包管理器，软件源依托于`Github`之上，所以在国内的网络环境之下，常常会出现使用`Homebrew`安装软件时，如`brew install sshfs`，经常会长时间卡在`Updating Homebrew...`。\n> `OS X 10.9`开始支持\n\n### 安装\n首先安装依赖`Xcode命令行工具`：\n```\n$ xcode-select --install\n```\n\n然后安装`Homebrew`：\n```\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 卸载\n```\n$ ruby -e \"$(curl -fsSL $https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n$ sudo rm -rf /usr/local/\n```\n\n## 解决软件源更新慢问题\n### 取消更新\n当安装过程中，卡在`Updating Homebrew...`时，我们可以按住`control + c`，来取消本次更新；之后命令行会显示`^C`，表示取消成功，后面会继续安装工作。\n> 这个方法是临时，仅在本次安装生效。\n\n### 关闭自动更新\n`Homebrew`的软件源更新，是在每次安装时自动执行的，可以通过配置进行关闭。\n\n`zsh`终端方式：\n```\n$ echo 'export HOMEBREW_NO_AUTO_UPDATE=true' >> ~/.zshrc\n$ source ~/.zshrc\n```\n\n`bash`终端方式：\n```\n$ echo 'export HOMEBREW_NO_AUTO_UPDATE=true' >> ~/.bash_profile\n$ source ~/.bash_profile\n```\n> 这个方法是永久的，每次安装都会生效，但弊端是无法获取最新的软件。\n\n### 替换软件源\n这里推荐中科大的镜像源，亲测可用。  \n#### 替换homebrew源\n```\n$ cd \"$(brew --repo)\"\n$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n```\n\n还原官方源：\n```\n$ cd \"$(brew --repo)\"\n$ git remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n#### 替换homebrew-core源(核心软件仓库)\n```\n$ cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\n$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n```\n\n还原官方源：\n```\n$ cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\n$ git remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n#### 替换homebrew-cask源(macOS应用)\n```\n$ cd \"$(brew --repo)\"/Library/Taps/homebrew/homebrew-cask \n$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git\n```\n若提示找不到`\"$(brew --repo)\"/Library/Taps/homebrew/homebrew-cask`，则：\n```\n$ cd \"$(brew --repo)\"/Library/Taps/homebrew/\n$ git clone https://mirrors.ustc.edu.cn/homebrew-cask.git\n```\n\n还原官方源：\n```\n$ cd \"$(brew --repo)\"/Library/Taps/homebrew/homebrew-cask  \n$ git remote set-url origin https://github.com/Homebrew/homebrew-cask\n```\n\n> `brew cask`安装软件，会自动创建软链接到`Application`目录，这样在`Launchpad`中也能查看到安装的软件，方便启动软件\n\n#### 替换homebrew bottles源(预编译二进制软件包)\n`zsh`终端方式：\n```\n$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.zshrc\n$ source ~/.zshrc\n```\n\n`bash`终端方式：\n```\n$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile\n$ source ~/.bash_profile\n```\n\n还原官方源：进入如上终端配置文件，并删除`HOMEBREW_BOTTLE_DOMAIN`改行配置，并\n`source`终端配置文件，使之生效。\n\n## 常见错误\n- `Error: Another active Homebrew update process is already in progress.`  \n解决方法：`rm -rf /usr/local/var/homebrew/locks`\n\n## 附\n### Homebrew常用命令\n- 查看Homebrew版本：\n```\n$ brew -v\n```\n\n- Homebrew帮助信息：\n```\n$ brew [cask] -h\n```\n\n- 更新Homebrew：\n```\n$ brew update\n```\n\n- 更新Homebrew cask：\n```\n$ brew cask upgrade\n```\n\n- 安装软件：\n```\n$ brew [cask] install <packageName>\n```\n\n- 卸载软件：\n```\n$ brew [cask] uninstall <packageName>\n```\n\n- 查询可用软件：\n```\n$ brew search <packageName>\n```\n\n- 查看已安装软件：\n```\n$ brew [cask] list\n```\n\n- 查看软件信息：\n```\n$ brew [cask] info <packageName>\n```\n\n### 确认shell版本方式\n```\n$ echo $SHELL\n```\n> 输出`/bin/zsh`为`zsh`终端，输出`/bin/bash`为`bash`终端。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"homebrew-in-mac","published":1,"updated":"2020-07-21T01:40:07.161Z","layout":"post","photos":[],"link":"","_id":"cklumqgf0001y79n59mrv5niw","content":"<p>本文将介绍<code>Homebrew</code>的安装与使用。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><code>Homebrew</code>是<code>OS X</code>上类似于<code>apt-get</code>和<code>yum</code>的软件包管理器，软件源依托于<code>Github</code>之上，所以在国内的网络环境之下，常常会出现使用<code>Homebrew</code>安装软件时，如<code>brew install sshfs</code>，经常会长时间卡在<code>Updating Homebrew...</code>。</p>\n<blockquote>\n<p><code>OS X 10.9</code>开始支持</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先安装依赖<code>Xcode命令行工具</code>：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcode-<span class=\"keyword\">select</span> <span class=\"comment\">--install</span></span><br></pre></td></tr></table></figure></p>\n<p>然后安装<code>Homebrew</code>：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL $https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo rm -rf /usr/<span class=\"built_in\">local</span>/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决软件源更新慢问题\"><a href=\"#解决软件源更新慢问题\" class=\"headerlink\" title=\"解决软件源更新慢问题\"></a>解决软件源更新慢问题</h2><h3 id=\"取消更新\"><a href=\"#取消更新\" class=\"headerlink\" title=\"取消更新\"></a>取消更新</h3><p>当安装过程中，卡在<code>Updating Homebrew...</code>时，我们可以按住<code>control + c</code>，来取消本次更新；之后命令行会显示<code>^C</code>，表示取消成功，后面会继续安装工作。</p>\n<blockquote>\n<p>这个方法是临时，仅在本次安装生效。</p>\n</blockquote>\n<h3 id=\"关闭自动更新\"><a href=\"#关闭自动更新\" class=\"headerlink\" title=\"关闭自动更新\"></a>关闭自动更新</h3><p><code>Homebrew</code>的软件源更新，是在每次安装时自动执行的，可以通过配置进行关闭。</p>\n<p><code>zsh</code>终端方式：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_NO_AUTO_UPDATE=true'</span> &gt;&gt; ~/.zshrc</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure></p>\n<p><code>bash</code>终端方式：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_NO_AUTO_UPDATE=true'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.bash_profile</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个方法是永久的，每次安装都会生效，但弊端是无法获取最新的软件。</p>\n</blockquote>\n<h3 id=\"替换软件源\"><a href=\"#替换软件源\" class=\"headerlink\" title=\"替换软件源\"></a>替换软件源</h3><p>这里推荐中科大的镜像源，亲测可用。  </p>\n<h4 id=\"替换homebrew源\"><a href=\"#替换homebrew源\" class=\"headerlink\" title=\"替换homebrew源\"></a>替换homebrew源</h4><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)\"</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">mirrors.</span><span class=\"string\">ustc.</span><span class=\"string\">edu.</span><span class=\"string\">cn/</span><span class=\"string\">brew.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure>\n<p>还原官方源：<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)\"</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">github.</span><span class=\"string\">com/</span><span class=\"string\">Homebrew/</span><span class=\"string\">brew.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"替换homebrew-core源-核心软件仓库\"><a href=\"#替换homebrew-core源-核心软件仓库\" class=\"headerlink\" title=\"替换homebrew-core源(核心软件仓库)\"></a>替换homebrew-core源(核心软件仓库)</h4><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">mirrors.</span><span class=\"string\">ustc.</span><span class=\"string\">edu.</span><span class=\"string\">cn/</span><span class=\"string\">homebrew-core.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure>\n<p>还原官方源：<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">github.</span><span class=\"string\">com/</span><span class=\"string\">Homebrew/</span><span class=\"string\">homebrew-core.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"替换homebrew-cask源-macOS应用\"><a href=\"#替换homebrew-cask源-macOS应用\" class=\"headerlink\" title=\"替换homebrew-cask源(macOS应用)\"></a>替换homebrew-cask源(macOS应用)</h4><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)\"</span>/<span class=\"string\">Library/</span><span class=\"string\">Taps/</span><span class=\"string\">homebrew/</span><span class=\"string\">homebrew-cask </span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">mirrors.</span><span class=\"string\">ustc.</span><span class=\"string\">edu.</span><span class=\"string\">cn/</span><span class=\"string\">homebrew-cask.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure>\n<p>若提示找不到<code>&quot;$(brew --repo)&quot;/Library/Taps/homebrew/homebrew-cask</code>，则：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span>/Library/Taps/homebrew/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://mirrors.ustc.edu.cn/homebrew-cask.git</span></span><br></pre></td></tr></table></figure></p>\n<p>还原官方源：<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)\"</span>/<span class=\"string\">Library/</span><span class=\"string\">Taps/</span><span class=\"string\">homebrew/</span><span class=\"string\">homebrew-cask </span> </span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">github.</span><span class=\"string\">com/</span><span class=\"string\">Homebrew/</span><span class=\"string\">homebrew-cask</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>brew cask</code>安装软件，会自动创建软链接到<code>Application</code>目录，这样在<code>Launchpad</code>中也能查看到安装的软件，方便启动软件</p>\n</blockquote>\n<h4 id=\"替换homebrew-bottles源-预编译二进制软件包\"><a href=\"#替换homebrew-bottles源-预编译二进制软件包\" class=\"headerlink\" title=\"替换homebrew bottles源(预编译二进制软件包)\"></a>替换homebrew bottles源(预编译二进制软件包)</h4><p><code>zsh</code>终端方式：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure></p>\n<p><code>bash</code>终端方式：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.bash_profile</span></span><br></pre></td></tr></table></figure></p>\n<p>还原官方源：进入如上终端配置文件，并删除<code>HOMEBREW_BOTTLE_DOMAIN</code>改行配置，并<br><code>source</code>终端配置文件，使之生效。</p>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><ul>\n<li><code>Error: Another active Homebrew update process is already in progress.</code><br>解决方法：<code>rm -rf /usr/local/var/homebrew/locks</code></li>\n</ul>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><h3 id=\"Homebrew常用命令\"><a href=\"#Homebrew常用命令\" class=\"headerlink\" title=\"Homebrew常用命令\"></a>Homebrew常用命令</h3><ul>\n<li><p>查看Homebrew版本：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>-v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Homebrew帮助信息：</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"string\">[cask]</span> -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新Homebrew：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新Homebrew cask：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>cask upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>[cask] <span class=\"keyword\">install </span>&lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载软件：</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"string\">[cask]</span> uninstall &lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询可用软件：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"built_in\">search</span> <span class=\"symbol\">&lt;packageName&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看已安装软件：</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"string\">[cask]</span> list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看软件信息：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>[cask] <span class=\"meta\">info</span> &lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"确认shell版本方式\"><a href=\"#确认shell版本方式\" class=\"headerlink\" title=\"确认shell版本方式\"></a>确认shell版本方式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出<code>/bin/zsh</code>为<code>zsh</code>终端，输出<code>/bin/bash</code>为<code>bash</code>终端。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍<code>Homebrew</code>的安装与使用。</p>\n<hr>","more":"<h2 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><code>Homebrew</code>是<code>OS X</code>上类似于<code>apt-get</code>和<code>yum</code>的软件包管理器，软件源依托于<code>Github</code>之上，所以在国内的网络环境之下，常常会出现使用<code>Homebrew</code>安装软件时，如<code>brew install sshfs</code>，经常会长时间卡在<code>Updating Homebrew...</code>。</p>\n<blockquote>\n<p><code>OS X 10.9</code>开始支持</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先安装依赖<code>Xcode命令行工具</code>：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcode-<span class=\"keyword\">select</span> <span class=\"comment\">--install</span></span><br></pre></td></tr></table></figure></p>\n<p>然后安装<code>Homebrew</code>：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL $https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo rm -rf /usr/<span class=\"built_in\">local</span>/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决软件源更新慢问题\"><a href=\"#解决软件源更新慢问题\" class=\"headerlink\" title=\"解决软件源更新慢问题\"></a>解决软件源更新慢问题</h2><h3 id=\"取消更新\"><a href=\"#取消更新\" class=\"headerlink\" title=\"取消更新\"></a>取消更新</h3><p>当安装过程中，卡在<code>Updating Homebrew...</code>时，我们可以按住<code>control + c</code>，来取消本次更新；之后命令行会显示<code>^C</code>，表示取消成功，后面会继续安装工作。</p>\n<blockquote>\n<p>这个方法是临时，仅在本次安装生效。</p>\n</blockquote>\n<h3 id=\"关闭自动更新\"><a href=\"#关闭自动更新\" class=\"headerlink\" title=\"关闭自动更新\"></a>关闭自动更新</h3><p><code>Homebrew</code>的软件源更新，是在每次安装时自动执行的，可以通过配置进行关闭。</p>\n<p><code>zsh</code>终端方式：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_NO_AUTO_UPDATE=true'</span> &gt;&gt; ~/.zshrc</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure></p>\n<p><code>bash</code>终端方式：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_NO_AUTO_UPDATE=true'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.bash_profile</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个方法是永久的，每次安装都会生效，但弊端是无法获取最新的软件。</p>\n</blockquote>\n<h3 id=\"替换软件源\"><a href=\"#替换软件源\" class=\"headerlink\" title=\"替换软件源\"></a>替换软件源</h3><p>这里推荐中科大的镜像源，亲测可用。  </p>\n<h4 id=\"替换homebrew源\"><a href=\"#替换homebrew源\" class=\"headerlink\" title=\"替换homebrew源\"></a>替换homebrew源</h4><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)\"</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">mirrors.</span><span class=\"string\">ustc.</span><span class=\"string\">edu.</span><span class=\"string\">cn/</span><span class=\"string\">brew.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure>\n<p>还原官方源：<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)\"</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">github.</span><span class=\"string\">com/</span><span class=\"string\">Homebrew/</span><span class=\"string\">brew.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"替换homebrew-core源-核心软件仓库\"><a href=\"#替换homebrew-core源-核心软件仓库\" class=\"headerlink\" title=\"替换homebrew-core源(核心软件仓库)\"></a>替换homebrew-core源(核心软件仓库)</h4><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">mirrors.</span><span class=\"string\">ustc.</span><span class=\"string\">edu.</span><span class=\"string\">cn/</span><span class=\"string\">homebrew-core.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure>\n<p>还原官方源：<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">github.</span><span class=\"string\">com/</span><span class=\"string\">Homebrew/</span><span class=\"string\">homebrew-core.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"替换homebrew-cask源-macOS应用\"><a href=\"#替换homebrew-cask源-macOS应用\" class=\"headerlink\" title=\"替换homebrew-cask源(macOS应用)\"></a>替换homebrew-cask源(macOS应用)</h4><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)\"</span>/<span class=\"string\">Library/</span><span class=\"string\">Taps/</span><span class=\"string\">homebrew/</span><span class=\"string\">homebrew-cask </span></span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">mirrors.</span><span class=\"string\">ustc.</span><span class=\"string\">edu.</span><span class=\"string\">cn/</span><span class=\"string\">homebrew-cask.</span><span class=\"string\">git</span></span><br></pre></td></tr></table></figure>\n<p>若提示找不到<code>&quot;$(brew --repo)&quot;/Library/Taps/homebrew/homebrew-cask</code>，则：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span>/Library/Taps/homebrew/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://mirrors.ustc.edu.cn/homebrew-cask.git</span></span><br></pre></td></tr></table></figure></p>\n<p>还原官方源：<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">cd </span><span class=\"string\">\"$(brew --repo)\"</span>/<span class=\"string\">Library/</span><span class=\"string\">Taps/</span><span class=\"string\">homebrew/</span><span class=\"string\">homebrew-cask </span> </span><br><span class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">https:</span>//<span class=\"string\">github.</span><span class=\"string\">com/</span><span class=\"string\">Homebrew/</span><span class=\"string\">homebrew-cask</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>brew cask</code>安装软件，会自动创建软链接到<code>Application</code>目录，这样在<code>Launchpad</code>中也能查看到安装的软件，方便启动软件</p>\n</blockquote>\n<h4 id=\"替换homebrew-bottles源-预编译二进制软件包\"><a href=\"#替换homebrew-bottles源-预编译二进制软件包\" class=\"headerlink\" title=\"替换homebrew bottles源(预编译二进制软件包)\"></a>替换homebrew bottles源(预编译二进制软件包)</h4><p><code>zsh</code>终端方式：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure></p>\n<p><code>bash</code>终端方式：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.bash_profile</span></span><br></pre></td></tr></table></figure></p>\n<p>还原官方源：进入如上终端配置文件，并删除<code>HOMEBREW_BOTTLE_DOMAIN</code>改行配置，并<br><code>source</code>终端配置文件，使之生效。</p>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><ul>\n<li><code>Error: Another active Homebrew update process is already in progress.</code><br>解决方法：<code>rm -rf /usr/local/var/homebrew/locks</code></li>\n</ul>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><h3 id=\"Homebrew常用命令\"><a href=\"#Homebrew常用命令\" class=\"headerlink\" title=\"Homebrew常用命令\"></a>Homebrew常用命令</h3><ul>\n<li><p>查看Homebrew版本：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>-v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Homebrew帮助信息：</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"string\">[cask]</span> -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新Homebrew：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新Homebrew cask：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>cask upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>[cask] <span class=\"keyword\">install </span>&lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载软件：</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"string\">[cask]</span> uninstall &lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询可用软件：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"built_in\">search</span> <span class=\"symbol\">&lt;packageName&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看已安装软件：</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"string\">[cask]</span> list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看软件信息：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span>[cask] <span class=\"meta\">info</span> &lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"确认shell版本方式\"><a href=\"#确认shell版本方式\" class=\"headerlink\" title=\"确认shell版本方式\"></a>确认shell版本方式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出<code>/bin/zsh</code>为<code>zsh</code>终端，输出<code>/bin/bash</code>为<code>bash</code>终端。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"UNIX下IO模型分析","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2017-06-27T08:30:40.000Z","_content":"\n对*UNIX*下的五种常见*IO*模型分析，帮助理解\n<!--more-->\n\n## IO操作的两个阶段\n以读数据操作为例：\n 1. 等待内核数据准备（数据拷贝到内核缓冲区）\n 2. 将数据从内核拷贝到用户空间\n\n## IO模型\n*UNIX*下共有五种常见的*IO*模型：\n![UNIX下共有五种常见的IO模型](io-model.png)\n\n下面以`recvfrom`接口举例\n\n### 阻塞IO\n默认情况下，所有的套接字都是阻塞的\n![阻塞IO](blocking-io.png)\n调用`recvfrom`接口，进程在*IO*操作的两个阶段都会阻塞，直到最终数据拷贝到用户空间或者过程中出现错误才会返回，进程在阻塞状态下是不占用*CPU*资源的\n> 最常见的错误是发生系统中断，此时需要重读，可参考[这里](https://github.com/AnSwErYWJ/DogFood/blob/master/C/RD.c)\n\n### 非阻塞IO\n可以通过`fcntl(sockfd,F_SETFL,O_NONBLOCK)`将套接字设置成非阻塞\n![非阻塞IO](no-blocking-io.png)\n调用`recvfrom`接口，无论内核缓冲区是否有可用数据，进程都会立即返回，所以在*IO*操作的第一阶段是非阻塞的; 若无数据可用，内核将`errno`设置为为`EWOULDBLOCK`或者`EAGAIN`，进程可以使用轮询的方法，保证内核在数据准备好时，能立即拷贝到用户空间; 若有则立即将数据拷贝到用户空间，进程在数据拷贝到用户空间即*IO*操作的第二阶段是阻塞的;\n> 非阻塞*IO*过于消耗*CPU*时间，将大部分时间用于轮询\n\n### 多路复用IO\n多路复用系统调用：`select`,`poll`和`epoll`，其中*windows*平台不支持`poll`和`epoll`，使用方法可以参考[I/O 多路复用之select、poll、epoll详解](https://segmentfault.com/a/1190000003063859?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io#articleHeader14)和[Linux select/poll和epoll实现机制对比](http://www.cnblogs.com/NerdWill/p/4996476.html)\n![ 多路复用IO](multi-io.png)\n调用`select`，等待内核数据准备，所以*IO*操作的第一个阶段，进程是阻塞的，不过是阻塞在多路复用系统调用上，而不是*IO*系统调用上; 当`select`返回套接字可读条件时，再调用`recvfrom`将数据从内核拷贝到用户空间，*IO*操作的第二阶段，进程是阻塞的\n\n多路复用*IO*和阻塞*IO*，在*IO*操作的两个阶段都是阻塞的，不过多路复用*IO*使用了两个系统调用，而阻塞*IO*只使用了一个，所以在连接数不是很多的情况下，阻塞*IO*可能性能更佳; 多路复用*IO*的优势在于可以同时监控多个用于*IO*的文件描述符。\n\n> 多线程中的阻塞*IO*，与多路复用*IO*极为相似\n\n### 信号驱动IO\n![信号驱动IO](signal-io.png)\n调用`sigaction`等系统调用安装信号处理函数，并立即返回，所以*IO*操作的第一阶段，进程是非阻塞的; 当内核数据准备好时，内核会产生一个信号，通知进程将数据从内核拷贝到用户空间，*IO*操作的第二阶段，进程是阻塞的\n\n> 使用方法：[IO的多路复用和信号驱动](http://www.cnblogs.com/ittinybird/p/4574397.html)\n\n### 异步IO\n异步*IO*有一组以`aio`开头的系统调用，使用方法可参考[Linux AIO机制](http://blog.csdn.net/tq02h2a/article/details/3825114)\n![异步IO](asyn-io.png)\n调用异步*IO*系统调用，给内核传递描述字、缓冲区指针、缓冲区大小（与`read`相同的三个参数）、文件偏移（与`lseek`类似），告诉内核当整个操作完成时如何通知我们，并立即返回，在*IO*操作的两个阶段，进程都不阻塞\n\n## 总结\n![5种IO模式比较](compare-io.png)\n- 同步*IO*和异步*IO*的主要区别是将数据从内核拷贝到用户空间是否阻塞，前者会在将数据从内核拷贝到用户空间时即*IO*操作的第二个阶段发生阻塞，而后者则在系统调用后直接返回，直到内核发送信号通知*IO*操作完成，在*IO*操作的两个阶段都没有阻塞\n- 阻塞*IO*和非阻塞*IO*的主要区别是系统调用是否立即返回（默认将数据从内核拷贝到用户空间即*IO*操作的第二个阶段是立即返回的），前者会在*IO*操作的两个阶段完成前一直阻塞，后者在内核没有准备好数据的情况下立即返回，即只会在*IO*操作的第二个阶段阻塞\n- 信号驱动*IO*和异步*IO*的主要区别在于前者由内核通知我们何时启动一个*IO*操作，在将数据从内核拷贝到用户空间过程中即*IO*操作的第一个阶段依旧是阻塞的，而后者是由内核通知我们*IO*操作何时完成，在*IO*操作的两个阶段都没有阻塞\n\n> [知乎](https://www.zhihu.com/question/19732473/answer/20851256)上有一个比较生动的例子可以说明这几种模型之间的关系。\n\n## Reference\n- [UNIX网络编程 卷1：套接字联网API](http://about:blank)\n- [Linux IO模式及 select、poll、epoll详解](https://segmentfault.com/a/1190000003063859?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n- [Linux下5种IO模型的小结](http://www.cnblogs.com/ittinybird/p/4666044.html)\n- [UNIX网络编程读书笔记：I/O模型（阻塞、非阻塞、I/O复用、信号驱动、异步）](http://www.cnblogs.com/nufangrensheng/p/3588690.html)\n- [ IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）](http://blog.csdn.net/historyasamirror/article/details/5778378)\n- [Linux五种IO模型性能分析](http://blog.csdn.net/jay900323/article/details/18141217)\n\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/io-model.md","raw":"---\ntitle: UNIX下IO模型分析\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ndate: 2017-06-27 16:30:40\ncategories: 科普\ntags: IO\n---\n\n对*UNIX*下的五种常见*IO*模型分析，帮助理解\n<!--more-->\n\n## IO操作的两个阶段\n以读数据操作为例：\n 1. 等待内核数据准备（数据拷贝到内核缓冲区）\n 2. 将数据从内核拷贝到用户空间\n\n## IO模型\n*UNIX*下共有五种常见的*IO*模型：\n![UNIX下共有五种常见的IO模型](io-model.png)\n\n下面以`recvfrom`接口举例\n\n### 阻塞IO\n默认情况下，所有的套接字都是阻塞的\n![阻塞IO](blocking-io.png)\n调用`recvfrom`接口，进程在*IO*操作的两个阶段都会阻塞，直到最终数据拷贝到用户空间或者过程中出现错误才会返回，进程在阻塞状态下是不占用*CPU*资源的\n> 最常见的错误是发生系统中断，此时需要重读，可参考[这里](https://github.com/AnSwErYWJ/DogFood/blob/master/C/RD.c)\n\n### 非阻塞IO\n可以通过`fcntl(sockfd,F_SETFL,O_NONBLOCK)`将套接字设置成非阻塞\n![非阻塞IO](no-blocking-io.png)\n调用`recvfrom`接口，无论内核缓冲区是否有可用数据，进程都会立即返回，所以在*IO*操作的第一阶段是非阻塞的; 若无数据可用，内核将`errno`设置为为`EWOULDBLOCK`或者`EAGAIN`，进程可以使用轮询的方法，保证内核在数据准备好时，能立即拷贝到用户空间; 若有则立即将数据拷贝到用户空间，进程在数据拷贝到用户空间即*IO*操作的第二阶段是阻塞的;\n> 非阻塞*IO*过于消耗*CPU*时间，将大部分时间用于轮询\n\n### 多路复用IO\n多路复用系统调用：`select`,`poll`和`epoll`，其中*windows*平台不支持`poll`和`epoll`，使用方法可以参考[I/O 多路复用之select、poll、epoll详解](https://segmentfault.com/a/1190000003063859?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io#articleHeader14)和[Linux select/poll和epoll实现机制对比](http://www.cnblogs.com/NerdWill/p/4996476.html)\n![ 多路复用IO](multi-io.png)\n调用`select`，等待内核数据准备，所以*IO*操作的第一个阶段，进程是阻塞的，不过是阻塞在多路复用系统调用上，而不是*IO*系统调用上; 当`select`返回套接字可读条件时，再调用`recvfrom`将数据从内核拷贝到用户空间，*IO*操作的第二阶段，进程是阻塞的\n\n多路复用*IO*和阻塞*IO*，在*IO*操作的两个阶段都是阻塞的，不过多路复用*IO*使用了两个系统调用，而阻塞*IO*只使用了一个，所以在连接数不是很多的情况下，阻塞*IO*可能性能更佳; 多路复用*IO*的优势在于可以同时监控多个用于*IO*的文件描述符。\n\n> 多线程中的阻塞*IO*，与多路复用*IO*极为相似\n\n### 信号驱动IO\n![信号驱动IO](signal-io.png)\n调用`sigaction`等系统调用安装信号处理函数，并立即返回，所以*IO*操作的第一阶段，进程是非阻塞的; 当内核数据准备好时，内核会产生一个信号，通知进程将数据从内核拷贝到用户空间，*IO*操作的第二阶段，进程是阻塞的\n\n> 使用方法：[IO的多路复用和信号驱动](http://www.cnblogs.com/ittinybird/p/4574397.html)\n\n### 异步IO\n异步*IO*有一组以`aio`开头的系统调用，使用方法可参考[Linux AIO机制](http://blog.csdn.net/tq02h2a/article/details/3825114)\n![异步IO](asyn-io.png)\n调用异步*IO*系统调用，给内核传递描述字、缓冲区指针、缓冲区大小（与`read`相同的三个参数）、文件偏移（与`lseek`类似），告诉内核当整个操作完成时如何通知我们，并立即返回，在*IO*操作的两个阶段，进程都不阻塞\n\n## 总结\n![5种IO模式比较](compare-io.png)\n- 同步*IO*和异步*IO*的主要区别是将数据从内核拷贝到用户空间是否阻塞，前者会在将数据从内核拷贝到用户空间时即*IO*操作的第二个阶段发生阻塞，而后者则在系统调用后直接返回，直到内核发送信号通知*IO*操作完成，在*IO*操作的两个阶段都没有阻塞\n- 阻塞*IO*和非阻塞*IO*的主要区别是系统调用是否立即返回（默认将数据从内核拷贝到用户空间即*IO*操作的第二个阶段是立即返回的），前者会在*IO*操作的两个阶段完成前一直阻塞，后者在内核没有准备好数据的情况下立即返回，即只会在*IO*操作的第二个阶段阻塞\n- 信号驱动*IO*和异步*IO*的主要区别在于前者由内核通知我们何时启动一个*IO*操作，在将数据从内核拷贝到用户空间过程中即*IO*操作的第一个阶段依旧是阻塞的，而后者是由内核通知我们*IO*操作何时完成，在*IO*操作的两个阶段都没有阻塞\n\n> [知乎](https://www.zhihu.com/question/19732473/answer/20851256)上有一个比较生动的例子可以说明这几种模型之间的关系。\n\n## Reference\n- [UNIX网络编程 卷1：套接字联网API](http://about:blank)\n- [Linux IO模式及 select、poll、epoll详解](https://segmentfault.com/a/1190000003063859?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n- [Linux下5种IO模型的小结](http://www.cnblogs.com/ittinybird/p/4666044.html)\n- [UNIX网络编程读书笔记：I/O模型（阻塞、非阻塞、I/O复用、信号驱动、异步）](http://www.cnblogs.com/nufangrensheng/p/3588690.html)\n- [ IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）](http://blog.csdn.net/historyasamirror/article/details/5778378)\n- [Linux五种IO模型性能分析](http://blog.csdn.net/jay900323/article/details/18141217)\n\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"io-model","published":1,"updated":"2020-07-21T01:40:07.161Z","layout":"post","photos":[],"link":"","_id":"cklumqgf1002279n5pi0l0l2f","content":"<p>对<em>UNIX</em>下的五种常见<em>IO</em>模型分析，帮助理解<br><a id=\"more\"></a></p>\n<h2 id=\"IO操作的两个阶段\"><a href=\"#IO操作的两个阶段\" class=\"headerlink\" title=\"IO操作的两个阶段\"></a>IO操作的两个阶段</h2><p>以读数据操作为例：</p>\n<ol>\n<li>等待内核数据准备（数据拷贝到内核缓冲区）</li>\n<li>将数据从内核拷贝到用户空间</li>\n</ol>\n<h2 id=\"IO模型\"><a href=\"#IO模型\" class=\"headerlink\" title=\"IO模型\"></a>IO模型</h2><p><em>UNIX</em>下共有五种常见的<em>IO</em>模型：<br><img src=\"/2017/06/27/io-model/io-model.png\" alt=\"UNIX下共有五种常见的IO模型\"></p>\n<p>下面以<code>recvfrom</code>接口举例</p>\n<h3 id=\"阻塞IO\"><a href=\"#阻塞IO\" class=\"headerlink\" title=\"阻塞IO\"></a>阻塞IO</h3><p>默认情况下，所有的套接字都是阻塞的<br><img src=\"/2017/06/27/io-model/blocking-io.png\" alt=\"阻塞IO\"><br>调用<code>recvfrom</code>接口，进程在<em>IO</em>操作的两个阶段都会阻塞，直到最终数据拷贝到用户空间或者过程中出现错误才会返回，进程在阻塞状态下是不占用<em>CPU</em>资源的</p>\n<blockquote>\n<p>最常见的错误是发生系统中断，此时需要重读，可参考<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/RD.c\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n</blockquote>\n<h3 id=\"非阻塞IO\"><a href=\"#非阻塞IO\" class=\"headerlink\" title=\"非阻塞IO\"></a>非阻塞IO</h3><p>可以通过<code>fcntl(sockfd,F_SETFL,O_NONBLOCK)</code>将套接字设置成非阻塞<br><img src=\"/2017/06/27/io-model/no-blocking-io.png\" alt=\"非阻塞IO\"><br>调用<code>recvfrom</code>接口，无论内核缓冲区是否有可用数据，进程都会立即返回，所以在<em>IO</em>操作的第一阶段是非阻塞的; 若无数据可用，内核将<code>errno</code>设置为为<code>EWOULDBLOCK</code>或者<code>EAGAIN</code>，进程可以使用轮询的方法，保证内核在数据准备好时，能立即拷贝到用户空间; 若有则立即将数据拷贝到用户空间，进程在数据拷贝到用户空间即<em>IO</em>操作的第二阶段是阻塞的;</p>\n<blockquote>\n<p>非阻塞<em>IO</em>过于消耗<em>CPU</em>时间，将大部分时间用于轮询</p>\n</blockquote>\n<h3 id=\"多路复用IO\"><a href=\"#多路复用IO\" class=\"headerlink\" title=\"多路复用IO\"></a>多路复用IO</h3><p>多路复用系统调用：<code>select</code>,<code>poll</code>和<code>epoll</code>，其中<em>windows</em>平台不支持<code>poll</code>和<code>epoll</code>，使用方法可以参考<a href=\"https://segmentfault.com/a/1190000003063859?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io#articleHeader14\" target=\"_blank\" rel=\"noopener\">I/O 多路复用之select、poll、epoll详解</a>和<a href=\"http://www.cnblogs.com/NerdWill/p/4996476.html\" target=\"_blank\" rel=\"noopener\">Linux select/poll和epoll实现机制对比</a><br><img src=\"/2017/06/27/io-model/multi-io.png\" alt=\" 多路复用IO\"><br>调用<code>select</code>，等待内核数据准备，所以<em>IO</em>操作的第一个阶段，进程是阻塞的，不过是阻塞在多路复用系统调用上，而不是<em>IO</em>系统调用上; 当<code>select</code>返回套接字可读条件时，再调用<code>recvfrom</code>将数据从内核拷贝到用户空间，<em>IO</em>操作的第二阶段，进程是阻塞的</p>\n<p>多路复用<em>IO</em>和阻塞<em>IO</em>，在<em>IO</em>操作的两个阶段都是阻塞的，不过多路复用<em>IO</em>使用了两个系统调用，而阻塞<em>IO</em>只使用了一个，所以在连接数不是很多的情况下，阻塞<em>IO</em>可能性能更佳; 多路复用<em>IO</em>的优势在于可以同时监控多个用于<em>IO</em>的文件描述符。</p>\n<blockquote>\n<p>多线程中的阻塞<em>IO</em>，与多路复用<em>IO</em>极为相似</p>\n</blockquote>\n<h3 id=\"信号驱动IO\"><a href=\"#信号驱动IO\" class=\"headerlink\" title=\"信号驱动IO\"></a>信号驱动IO</h3><p><img src=\"/2017/06/27/io-model/signal-io.png\" alt=\"信号驱动IO\"><br>调用<code>sigaction</code>等系统调用安装信号处理函数，并立即返回，所以<em>IO</em>操作的第一阶段，进程是非阻塞的; 当内核数据准备好时，内核会产生一个信号，通知进程将数据从内核拷贝到用户空间，<em>IO</em>操作的第二阶段，进程是阻塞的</p>\n<blockquote>\n<p>使用方法：<a href=\"http://www.cnblogs.com/ittinybird/p/4574397.html\" target=\"_blank\" rel=\"noopener\">IO的多路复用和信号驱动</a></p>\n</blockquote>\n<h3 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h3><p>异步<em>IO</em>有一组以<code>aio</code>开头的系统调用，使用方法可参考<a href=\"http://blog.csdn.net/tq02h2a/article/details/3825114\" target=\"_blank\" rel=\"noopener\">Linux AIO机制</a><br><img src=\"/2017/06/27/io-model/asyn-io.png\" alt=\"异步IO\"><br>调用异步<em>IO</em>系统调用，给内核传递描述字、缓冲区指针、缓冲区大小（与<code>read</code>相同的三个参数）、文件偏移（与<code>lseek</code>类似），告诉内核当整个操作完成时如何通知我们，并立即返回，在<em>IO</em>操作的两个阶段，进程都不阻塞</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"/2017/06/27/io-model/compare-io.png\" alt=\"5种IO模式比较\"></p>\n<ul>\n<li>同步<em>IO</em>和异步<em>IO</em>的主要区别是将数据从内核拷贝到用户空间是否阻塞，前者会在将数据从内核拷贝到用户空间时即<em>IO</em>操作的第二个阶段发生阻塞，而后者则在系统调用后直接返回，直到内核发送信号通知<em>IO</em>操作完成，在<em>IO</em>操作的两个阶段都没有阻塞</li>\n<li>阻塞<em>IO</em>和非阻塞<em>IO</em>的主要区别是系统调用是否立即返回（默认将数据从内核拷贝到用户空间即<em>IO</em>操作的第二个阶段是立即返回的），前者会在<em>IO</em>操作的两个阶段完成前一直阻塞，后者在内核没有准备好数据的情况下立即返回，即只会在<em>IO</em>操作的第二个阶段阻塞</li>\n<li>信号驱动<em>IO</em>和异步<em>IO</em>的主要区别在于前者由内核通知我们何时启动一个<em>IO</em>操作，在将数据从内核拷贝到用户空间过程中即<em>IO</em>操作的第一个阶段依旧是阻塞的，而后者是由内核通知我们<em>IO</em>操作何时完成，在<em>IO</em>操作的两个阶段都没有阻塞</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/19732473/answer/20851256\" target=\"_blank\" rel=\"noopener\">知乎</a>上有一个比较生动的例子可以说明这几种模型之间的关系。</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://about:blank\" target=\"_blank\" rel=\"noopener\">UNIX网络编程 卷1：套接字联网API</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000003063859?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"noopener\">Linux IO模式及 select、poll、epoll详解</a></li>\n<li><a href=\"http://www.cnblogs.com/ittinybird/p/4666044.html\" target=\"_blank\" rel=\"noopener\">Linux下5种IO模型的小结</a></li>\n<li><a href=\"http://www.cnblogs.com/nufangrensheng/p/3588690.html\" target=\"_blank\" rel=\"noopener\">UNIX网络编程读书笔记：I/O模型（阻塞、非阻塞、I/O复用、信号驱动、异步）</a></li>\n<li><a href=\"http://blog.csdn.net/historyasamirror/article/details/5778378\" target=\"_blank\" rel=\"noopener\"> IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）</a></li>\n<li><a href=\"http://blog.csdn.net/jay900323/article/details/18141217\" target=\"_blank\" rel=\"noopener\">Linux五种IO模型性能分析</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>对<em>UNIX</em>下的五种常见<em>IO</em>模型分析，帮助理解<br></p>","more":"<p></p>\n<h2 id=\"IO操作的两个阶段\"><a href=\"#IO操作的两个阶段\" class=\"headerlink\" title=\"IO操作的两个阶段\"></a>IO操作的两个阶段</h2><p>以读数据操作为例：</p>\n<ol>\n<li>等待内核数据准备（数据拷贝到内核缓冲区）</li>\n<li>将数据从内核拷贝到用户空间</li>\n</ol>\n<h2 id=\"IO模型\"><a href=\"#IO模型\" class=\"headerlink\" title=\"IO模型\"></a>IO模型</h2><p><em>UNIX</em>下共有五种常见的<em>IO</em>模型：<br><img src=\"/2017/06/27/io-model/io-model.png\" alt=\"UNIX下共有五种常见的IO模型\"></p>\n<p>下面以<code>recvfrom</code>接口举例</p>\n<h3 id=\"阻塞IO\"><a href=\"#阻塞IO\" class=\"headerlink\" title=\"阻塞IO\"></a>阻塞IO</h3><p>默认情况下，所有的套接字都是阻塞的<br><img src=\"/2017/06/27/io-model/blocking-io.png\" alt=\"阻塞IO\"><br>调用<code>recvfrom</code>接口，进程在<em>IO</em>操作的两个阶段都会阻塞，直到最终数据拷贝到用户空间或者过程中出现错误才会返回，进程在阻塞状态下是不占用<em>CPU</em>资源的</p>\n<blockquote>\n<p>最常见的错误是发生系统中断，此时需要重读，可参考<a href=\"https://github.com/AnSwErYWJ/DogFood/blob/master/C/RD.c\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n</blockquote>\n<h3 id=\"非阻塞IO\"><a href=\"#非阻塞IO\" class=\"headerlink\" title=\"非阻塞IO\"></a>非阻塞IO</h3><p>可以通过<code>fcntl(sockfd,F_SETFL,O_NONBLOCK)</code>将套接字设置成非阻塞<br><img src=\"/2017/06/27/io-model/no-blocking-io.png\" alt=\"非阻塞IO\"><br>调用<code>recvfrom</code>接口，无论内核缓冲区是否有可用数据，进程都会立即返回，所以在<em>IO</em>操作的第一阶段是非阻塞的; 若无数据可用，内核将<code>errno</code>设置为为<code>EWOULDBLOCK</code>或者<code>EAGAIN</code>，进程可以使用轮询的方法，保证内核在数据准备好时，能立即拷贝到用户空间; 若有则立即将数据拷贝到用户空间，进程在数据拷贝到用户空间即<em>IO</em>操作的第二阶段是阻塞的;</p>\n<blockquote>\n<p>非阻塞<em>IO</em>过于消耗<em>CPU</em>时间，将大部分时间用于轮询</p>\n</blockquote>\n<h3 id=\"多路复用IO\"><a href=\"#多路复用IO\" class=\"headerlink\" title=\"多路复用IO\"></a>多路复用IO</h3><p>多路复用系统调用：<code>select</code>,<code>poll</code>和<code>epoll</code>，其中<em>windows</em>平台不支持<code>poll</code>和<code>epoll</code>，使用方法可以参考<a href=\"https://segmentfault.com/a/1190000003063859?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io#articleHeader14\" target=\"_blank\" rel=\"noopener\">I/O 多路复用之select、poll、epoll详解</a>和<a href=\"http://www.cnblogs.com/NerdWill/p/4996476.html\" target=\"_blank\" rel=\"noopener\">Linux select/poll和epoll实现机制对比</a><br><img src=\"/2017/06/27/io-model/multi-io.png\" alt=\" 多路复用IO\"><br>调用<code>select</code>，等待内核数据准备，所以<em>IO</em>操作的第一个阶段，进程是阻塞的，不过是阻塞在多路复用系统调用上，而不是<em>IO</em>系统调用上; 当<code>select</code>返回套接字可读条件时，再调用<code>recvfrom</code>将数据从内核拷贝到用户空间，<em>IO</em>操作的第二阶段，进程是阻塞的</p>\n<p>多路复用<em>IO</em>和阻塞<em>IO</em>，在<em>IO</em>操作的两个阶段都是阻塞的，不过多路复用<em>IO</em>使用了两个系统调用，而阻塞<em>IO</em>只使用了一个，所以在连接数不是很多的情况下，阻塞<em>IO</em>可能性能更佳; 多路复用<em>IO</em>的优势在于可以同时监控多个用于<em>IO</em>的文件描述符。</p>\n<blockquote>\n<p>多线程中的阻塞<em>IO</em>，与多路复用<em>IO</em>极为相似</p>\n</blockquote>\n<h3 id=\"信号驱动IO\"><a href=\"#信号驱动IO\" class=\"headerlink\" title=\"信号驱动IO\"></a>信号驱动IO</h3><p><img src=\"/2017/06/27/io-model/signal-io.png\" alt=\"信号驱动IO\"><br>调用<code>sigaction</code>等系统调用安装信号处理函数，并立即返回，所以<em>IO</em>操作的第一阶段，进程是非阻塞的; 当内核数据准备好时，内核会产生一个信号，通知进程将数据从内核拷贝到用户空间，<em>IO</em>操作的第二阶段，进程是阻塞的</p>\n<blockquote>\n<p>使用方法：<a href=\"http://www.cnblogs.com/ittinybird/p/4574397.html\" target=\"_blank\" rel=\"noopener\">IO的多路复用和信号驱动</a></p>\n</blockquote>\n<h3 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h3><p>异步<em>IO</em>有一组以<code>aio</code>开头的系统调用，使用方法可参考<a href=\"http://blog.csdn.net/tq02h2a/article/details/3825114\" target=\"_blank\" rel=\"noopener\">Linux AIO机制</a><br><img src=\"/2017/06/27/io-model/asyn-io.png\" alt=\"异步IO\"><br>调用异步<em>IO</em>系统调用，给内核传递描述字、缓冲区指针、缓冲区大小（与<code>read</code>相同的三个参数）、文件偏移（与<code>lseek</code>类似），告诉内核当整个操作完成时如何通知我们，并立即返回，在<em>IO</em>操作的两个阶段，进程都不阻塞</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"/2017/06/27/io-model/compare-io.png\" alt=\"5种IO模式比较\"></p>\n<ul>\n<li>同步<em>IO</em>和异步<em>IO</em>的主要区别是将数据从内核拷贝到用户空间是否阻塞，前者会在将数据从内核拷贝到用户空间时即<em>IO</em>操作的第二个阶段发生阻塞，而后者则在系统调用后直接返回，直到内核发送信号通知<em>IO</em>操作完成，在<em>IO</em>操作的两个阶段都没有阻塞</li>\n<li>阻塞<em>IO</em>和非阻塞<em>IO</em>的主要区别是系统调用是否立即返回（默认将数据从内核拷贝到用户空间即<em>IO</em>操作的第二个阶段是立即返回的），前者会在<em>IO</em>操作的两个阶段完成前一直阻塞，后者在内核没有准备好数据的情况下立即返回，即只会在<em>IO</em>操作的第二个阶段阻塞</li>\n<li>信号驱动<em>IO</em>和异步<em>IO</em>的主要区别在于前者由内核通知我们何时启动一个<em>IO</em>操作，在将数据从内核拷贝到用户空间过程中即<em>IO</em>操作的第一个阶段依旧是阻塞的，而后者是由内核通知我们<em>IO</em>操作何时完成，在<em>IO</em>操作的两个阶段都没有阻塞</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/19732473/answer/20851256\" target=\"_blank\" rel=\"noopener\">知乎</a>上有一个比较生动的例子可以说明这几种模型之间的关系。</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://about:blank\" target=\"_blank\" rel=\"noopener\">UNIX网络编程 卷1：套接字联网API</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000003063859?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"noopener\">Linux IO模式及 select、poll、epoll详解</a></li>\n<li><a href=\"http://www.cnblogs.com/ittinybird/p/4666044.html\" target=\"_blank\" rel=\"noopener\">Linux下5种IO模型的小结</a></li>\n<li><a href=\"http://www.cnblogs.com/nufangrensheng/p/3588690.html\" target=\"_blank\" rel=\"noopener\">UNIX网络编程读书笔记：I/O模型（阻塞、非阻塞、I/O复用、信号驱动、异步）</a></li>\n<li><a href=\"http://blog.csdn.net/historyasamirror/article/details/5778378\" target=\"_blank\" rel=\"noopener\"> IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）</a></li>\n<li><a href=\"http://blog.csdn.net/jay900323/article/details/18141217\" target=\"_blank\" rel=\"noopener\">Linux五种IO模型性能分析</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux socket编程的心跳机制总结","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T06:23:47.000Z","_content":"\n**心跳机制**用于保持客户端和服务端的连接.\n\n----------\n<!--more-->\n\n## 什么是心跳机制\n**心跳机制**就是当客户端与服务端建立连接后，每隔几分钟发送一个固定消息给服务端，服务端收到后回复一个固定消息给客户端，如果服务端几分钟内没有收到客户端消息，则视客户端断开。发送方可以是客户端和服务端，看具体需求。\n\n## 为什么要使用\n我们都知道在TCP这种长连接情况下下，有可能有一大段时间是没有数据往来的，即处于空闲状态。理论上说，这个连接是一直保持连接的，但是在实际应用中，如果中间节点出现什么故障是难以预测的。更可怕的是，有的节点会自动把一定时间之内没有数据交互的连接切断。所以，需要我们利用心跳机制，来维持长连接，保活通信。\n\n## 实现方法\n\n- **应用层：** 由应用程序自己每隔一定时间向客户/服务端发送一个短小的数据包，然后启动一个线程，在线程中不断检测客户端的回应， 如果在一定时间内没有收到客户/服务端的回应，即认为客户/服务端已经掉线，连接不可用。\n- **设置SO_KEEPALIVE套接字选项：**在TCP通信中，存在heartbeat机制。其实就是TCP的选项。当服务/客户端，一方开启KeepAlive功能后，就会自动在规定时间内向对方发送心跳包， 而另一方在收到心跳包后就会自动回复，以告诉对方我仍然在线。\n> **注意：**因为开启KeepAlive功能需要消耗额外的宽带和流量，所以TCP协议层默认并不默认开启KeepAlive。KeepAlive超时需要7,200，000 MilliSeconds， 即2小时，探测次数为5次。对于很多应用程序来说，空闲时间太长。因此，我们可以手工开启KeepAlive功能并设置合理的KeepAlive参数。\n\n### 我的实现\n这里具体介绍设置SO_KEEPALIVE套接字选项这个方法。\n\n#### SO_KEEPALIVE的三个参数:\n1. tcp_keepalive_intvl：探测发包间隔为intvl。\n2. tcp_keepalive_idle：连接在idle时间内没有任何数据往来,则进行此TCP层的探测。\n3. tcp_keepalive_cnt：尝试探测的次数。\n\n#### setsockopt()函数介绍\n1. 用法：设置与某个套接字关联的选 项。选项可能存在于多层协议中，它们总会出现在最上面的套接字层。\n2. 函数原型：\n```\n#include <sys/types.h>\n#include <sys/socket.h>\nint setsockopt(int sock, int level, int optname, const void *optval, socklen_t optlen);\n\n参数：\nsock：将要被设置或者获取选项的套接字。\nlevel：选项所在的协议层。\noptname：需要访问的选项名。\noptval：对于getsockopt()，指向返回选项值的缓冲。对于setsockopt()，指向包含新选项值的缓冲。\noptlen：对于getsockopt()，作为入口参数时，选项值的最大长度。作为出口参数时，选项值的实际长度。对于setsockopt()，现选项的长度。\n\n返回说明：\n成功执行时，返回0。失败返回-1，errno被设为以下的某个值\nEBADF：sock不是有效的文件描述词\nEFAULT：optval指向的内存并非有效的进程空间\nEINVAL：在调用setsockopt()时，optlen无效\nENOPROTOOPT：指定的协议层不能识别选项\nENOTSOCK：sock描述的不是套接字\n```\n\n#### 具体代码\n``` C\nint heartbeat(int fd)\n{\n    int alive,error,idle,cnt,intv;\n\n    /*\n     * open keepalive on fd\n     */\n    Restart:\n    alive = 1;//set keepalive open\n    ret=setsockopt(fd,SOL_SOCKET,SO_KEEPALIVE,&alive,sizeof(alive));\n    if(ret < 0)\n    {\n        DEBUG(\"set socket option error.\\n\");\n        goto Restart;\n    }\n\n    /*\n     * 60S without data,send heartbeat package\n     */\n    idle = 60;\n    ret = setsockopt(fd,SOL_TCP,TCP_KEEPIDLE,&idle,sizeof(idle));\n    if(ret < 0)\n    {\n        DEBUG(\"set keepalive idle error.\\n\");\n        return -1;\n    }\n\n    /*\n     * without any respond,3m later resend package\n     */\n    intv = 180;\n    ret = setsockopt(fd,SOL_TCP,TCP_KEEPINTVL,&intv,sizeof(intv));\n    if(ret < 0)\n    {\n        DEBUG(\"set keepalive intv error.\\n\");\n        return -2;\n    }\n\n    /*\n     * send 5 times,without any response,mean connect lose\n     */\n    cnt = 5;\n    ret = setsockopt(fd,SOL_TCP,TCP_KEEPCNT,&cnt,sizeof(cnt));\n    if(ret < 0)\n    {\n        DEBUG(\"set keepalive cnt error.\\n\");\n        return -3;\n    }\n}\n```\n\n## 总结\n当然，还是有很多方法去实现心跳机制的，比如利用select实现的超时控制，或者利用守护进程或线程的单独检测。不过我个人认为设置SO_KEEPALIVE实现起来最简单，最方便。如果大家发现有什么问题，也欢迎大家交流。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n\n\n\n","source":"_posts/keepalive-of-socket.md","raw":"---\ntitle: Linux socket编程的心跳机制总结\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - tcp\n  - keepalive\ndate: 2016-07-14 14:23:47\ncategories: C/C++\n---\n\n**心跳机制**用于保持客户端和服务端的连接.\n\n----------\n<!--more-->\n\n## 什么是心跳机制\n**心跳机制**就是当客户端与服务端建立连接后，每隔几分钟发送一个固定消息给服务端，服务端收到后回复一个固定消息给客户端，如果服务端几分钟内没有收到客户端消息，则视客户端断开。发送方可以是客户端和服务端，看具体需求。\n\n## 为什么要使用\n我们都知道在TCP这种长连接情况下下，有可能有一大段时间是没有数据往来的，即处于空闲状态。理论上说，这个连接是一直保持连接的，但是在实际应用中，如果中间节点出现什么故障是难以预测的。更可怕的是，有的节点会自动把一定时间之内没有数据交互的连接切断。所以，需要我们利用心跳机制，来维持长连接，保活通信。\n\n## 实现方法\n\n- **应用层：** 由应用程序自己每隔一定时间向客户/服务端发送一个短小的数据包，然后启动一个线程，在线程中不断检测客户端的回应， 如果在一定时间内没有收到客户/服务端的回应，即认为客户/服务端已经掉线，连接不可用。\n- **设置SO_KEEPALIVE套接字选项：**在TCP通信中，存在heartbeat机制。其实就是TCP的选项。当服务/客户端，一方开启KeepAlive功能后，就会自动在规定时间内向对方发送心跳包， 而另一方在收到心跳包后就会自动回复，以告诉对方我仍然在线。\n> **注意：**因为开启KeepAlive功能需要消耗额外的宽带和流量，所以TCP协议层默认并不默认开启KeepAlive。KeepAlive超时需要7,200，000 MilliSeconds， 即2小时，探测次数为5次。对于很多应用程序来说，空闲时间太长。因此，我们可以手工开启KeepAlive功能并设置合理的KeepAlive参数。\n\n### 我的实现\n这里具体介绍设置SO_KEEPALIVE套接字选项这个方法。\n\n#### SO_KEEPALIVE的三个参数:\n1. tcp_keepalive_intvl：探测发包间隔为intvl。\n2. tcp_keepalive_idle：连接在idle时间内没有任何数据往来,则进行此TCP层的探测。\n3. tcp_keepalive_cnt：尝试探测的次数。\n\n#### setsockopt()函数介绍\n1. 用法：设置与某个套接字关联的选 项。选项可能存在于多层协议中，它们总会出现在最上面的套接字层。\n2. 函数原型：\n```\n#include <sys/types.h>\n#include <sys/socket.h>\nint setsockopt(int sock, int level, int optname, const void *optval, socklen_t optlen);\n\n参数：\nsock：将要被设置或者获取选项的套接字。\nlevel：选项所在的协议层。\noptname：需要访问的选项名。\noptval：对于getsockopt()，指向返回选项值的缓冲。对于setsockopt()，指向包含新选项值的缓冲。\noptlen：对于getsockopt()，作为入口参数时，选项值的最大长度。作为出口参数时，选项值的实际长度。对于setsockopt()，现选项的长度。\n\n返回说明：\n成功执行时，返回0。失败返回-1，errno被设为以下的某个值\nEBADF：sock不是有效的文件描述词\nEFAULT：optval指向的内存并非有效的进程空间\nEINVAL：在调用setsockopt()时，optlen无效\nENOPROTOOPT：指定的协议层不能识别选项\nENOTSOCK：sock描述的不是套接字\n```\n\n#### 具体代码\n``` C\nint heartbeat(int fd)\n{\n    int alive,error,idle,cnt,intv;\n\n    /*\n     * open keepalive on fd\n     */\n    Restart:\n    alive = 1;//set keepalive open\n    ret=setsockopt(fd,SOL_SOCKET,SO_KEEPALIVE,&alive,sizeof(alive));\n    if(ret < 0)\n    {\n        DEBUG(\"set socket option error.\\n\");\n        goto Restart;\n    }\n\n    /*\n     * 60S without data,send heartbeat package\n     */\n    idle = 60;\n    ret = setsockopt(fd,SOL_TCP,TCP_KEEPIDLE,&idle,sizeof(idle));\n    if(ret < 0)\n    {\n        DEBUG(\"set keepalive idle error.\\n\");\n        return -1;\n    }\n\n    /*\n     * without any respond,3m later resend package\n     */\n    intv = 180;\n    ret = setsockopt(fd,SOL_TCP,TCP_KEEPINTVL,&intv,sizeof(intv));\n    if(ret < 0)\n    {\n        DEBUG(\"set keepalive intv error.\\n\");\n        return -2;\n    }\n\n    /*\n     * send 5 times,without any response,mean connect lose\n     */\n    cnt = 5;\n    ret = setsockopt(fd,SOL_TCP,TCP_KEEPCNT,&cnt,sizeof(cnt));\n    if(ret < 0)\n    {\n        DEBUG(\"set keepalive cnt error.\\n\");\n        return -3;\n    }\n}\n```\n\n## 总结\n当然，还是有很多方法去实现心跳机制的，比如利用select实现的超时控制，或者利用守护进程或线程的单独检测。不过我个人认为设置SO_KEEPALIVE实现起来最简单，最方便。如果大家发现有什么问题，也欢迎大家交流。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n\n\n\n","slug":"keepalive-of-socket","published":1,"updated":"2020-07-21T01:40:07.161Z","layout":"post","photos":[],"link":"","_id":"cklumqgf2002679n5zeig3dm4","content":"<p><strong>心跳机制</strong>用于保持客户端和服务端的连接.</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"什么是心跳机制\"><a href=\"#什么是心跳机制\" class=\"headerlink\" title=\"什么是心跳机制\"></a>什么是心跳机制</h2><p><strong>心跳机制</strong>就是当客户端与服务端建立连接后，每隔几分钟发送一个固定消息给服务端，服务端收到后回复一个固定消息给客户端，如果服务端几分钟内没有收到客户端消息，则视客户端断开。发送方可以是客户端和服务端，看具体需求。</p>\n<h2 id=\"为什么要使用\"><a href=\"#为什么要使用\" class=\"headerlink\" title=\"为什么要使用\"></a>为什么要使用</h2><p>我们都知道在TCP这种长连接情况下下，有可能有一大段时间是没有数据往来的，即处于空闲状态。理论上说，这个连接是一直保持连接的，但是在实际应用中，如果中间节点出现什么故障是难以预测的。更可怕的是，有的节点会自动把一定时间之内没有数据交互的连接切断。所以，需要我们利用心跳机制，来维持长连接，保活通信。</p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><ul>\n<li><strong>应用层：</strong> 由应用程序自己每隔一定时间向客户/服务端发送一个短小的数据包，然后启动一个线程，在线程中不断检测客户端的回应， 如果在一定时间内没有收到客户/服务端的回应，即认为客户/服务端已经掉线，连接不可用。</li>\n<li><strong>设置SO_KEEPALIVE套接字选项：</strong>在TCP通信中，存在heartbeat机制。其实就是TCP的选项。当服务/客户端，一方开启KeepAlive功能后，就会自动在规定时间内向对方发送心跳包， 而另一方在收到心跳包后就会自动回复，以告诉对方我仍然在线。<blockquote>\n<p><strong>注意：</strong>因为开启KeepAlive功能需要消耗额外的宽带和流量，所以TCP协议层默认并不默认开启KeepAlive。KeepAlive超时需要7,200，000 MilliSeconds， 即2小时，探测次数为5次。对于很多应用程序来说，空闲时间太长。因此，我们可以手工开启KeepAlive功能并设置合理的KeepAlive参数。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"我的实现\"><a href=\"#我的实现\" class=\"headerlink\" title=\"我的实现\"></a>我的实现</h3><p>这里具体介绍设置SO_KEEPALIVE套接字选项这个方法。</p>\n<h4 id=\"SO-KEEPALIVE的三个参数\"><a href=\"#SO-KEEPALIVE的三个参数\" class=\"headerlink\" title=\"SO_KEEPALIVE的三个参数:\"></a>SO_KEEPALIVE的三个参数:</h4><ol>\n<li>tcp_keepalive_intvl：探测发包间隔为intvl。</li>\n<li>tcp_keepalive_idle：连接在idle时间内没有任何数据往来,则进行此TCP层的探测。</li>\n<li>tcp_keepalive_cnt：尝试探测的次数。</li>\n</ol>\n<h4 id=\"setsockopt-函数介绍\"><a href=\"#setsockopt-函数介绍\" class=\"headerlink\" title=\"setsockopt()函数介绍\"></a>setsockopt()函数介绍</h4><ol>\n<li>用法：设置与某个套接字关联的选 项。选项可能存在于多层协议中，它们总会出现在最上面的套接字层。</li>\n<li>函数原型：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setsockopt</span><span class=\"params\">(<span class=\"keyword\">int</span> sock, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> optname, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *optval, <span class=\"keyword\">socklen_t</span> optlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">参数：</span><br><span class=\"line\">sock：将要被设置或者获取选项的套接字。</span><br><span class=\"line\">level：选项所在的协议层。</span><br><span class=\"line\">optname：需要访问的选项名。</span><br><span class=\"line\">optval：对于getsockopt()，指向返回选项值的缓冲。对于setsockopt()，指向包含新选项值的缓冲。</span><br><span class=\"line\">optlen：对于getsockopt()，作为入口参数时，选项值的最大长度。作为出口参数时，选项值的实际长度。对于setsockopt()，现选项的长度。</span><br><span class=\"line\"></span><br><span class=\"line\">返回说明：</span><br><span class=\"line\">成功执行时，返回<span class=\"number\">0</span>。失败返回<span class=\"number\">-1</span>，errno被设为以下的某个值</span><br><span class=\"line\">EBADF：sock不是有效的文件描述词</span><br><span class=\"line\">EFAULT：optval指向的内存并非有效的进程空间</span><br><span class=\"line\">EINVAL：在调用setsockopt()时，optlen无效</span><br><span class=\"line\">ENOPROTOOPT：指定的协议层不能识别选项</span><br><span class=\"line\">ENOTSOCK：sock描述的不是套接字</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">heartbeat</span><span class=\"params\">(<span class=\"keyword\">int</span> fd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> alive,error,idle,cnt,intv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * open keepalive on fd</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Restart:</span><br><span class=\"line\">    alive = <span class=\"number\">1</span>;<span class=\"comment\">//set keepalive open</span></span><br><span class=\"line\">    ret=setsockopt(fd,SOL_SOCKET,SO_KEEPALIVE,&amp;alive,<span class=\"keyword\">sizeof</span>(alive));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DEBUG(<span class=\"string\">\"set socket option error.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> Restart;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 60S without data,send heartbeat package</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    idle = <span class=\"number\">60</span>;</span><br><span class=\"line\">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPIDLE,&amp;idle,<span class=\"keyword\">sizeof</span>(idle));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DEBUG(<span class=\"string\">\"set keepalive idle error.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * without any respond,3m later resend package</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    intv = <span class=\"number\">180</span>;</span><br><span class=\"line\">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPINTVL,&amp;intv,<span class=\"keyword\">sizeof</span>(intv));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DEBUG(<span class=\"string\">\"set keepalive intv error.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * send 5 times,without any response,mean connect lose</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    cnt = <span class=\"number\">5</span>;</span><br><span class=\"line\">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPCNT,&amp;cnt,<span class=\"keyword\">sizeof</span>(cnt));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DEBUG(<span class=\"string\">\"set keepalive cnt error.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然，还是有很多方法去实现心跳机制的，比如利用select实现的超时控制，或者利用守护进程或线程的单独检测。不过我个人认为设置SO_KEEPALIVE实现起来最简单，最方便。如果大家发现有什么问题，也欢迎大家交流。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p><strong>心跳机制</strong>用于保持客户端和服务端的连接.</p>\n<hr>","more":"<h2 id=\"什么是心跳机制\"><a href=\"#什么是心跳机制\" class=\"headerlink\" title=\"什么是心跳机制\"></a>什么是心跳机制</h2><p><strong>心跳机制</strong>就是当客户端与服务端建立连接后，每隔几分钟发送一个固定消息给服务端，服务端收到后回复一个固定消息给客户端，如果服务端几分钟内没有收到客户端消息，则视客户端断开。发送方可以是客户端和服务端，看具体需求。</p>\n<h2 id=\"为什么要使用\"><a href=\"#为什么要使用\" class=\"headerlink\" title=\"为什么要使用\"></a>为什么要使用</h2><p>我们都知道在TCP这种长连接情况下下，有可能有一大段时间是没有数据往来的，即处于空闲状态。理论上说，这个连接是一直保持连接的，但是在实际应用中，如果中间节点出现什么故障是难以预测的。更可怕的是，有的节点会自动把一定时间之内没有数据交互的连接切断。所以，需要我们利用心跳机制，来维持长连接，保活通信。</p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><ul>\n<li><strong>应用层：</strong> 由应用程序自己每隔一定时间向客户/服务端发送一个短小的数据包，然后启动一个线程，在线程中不断检测客户端的回应， 如果在一定时间内没有收到客户/服务端的回应，即认为客户/服务端已经掉线，连接不可用。</li>\n<li><strong>设置SO_KEEPALIVE套接字选项：</strong>在TCP通信中，存在heartbeat机制。其实就是TCP的选项。当服务/客户端，一方开启KeepAlive功能后，就会自动在规定时间内向对方发送心跳包， 而另一方在收到心跳包后就会自动回复，以告诉对方我仍然在线。<blockquote>\n<p><strong>注意：</strong>因为开启KeepAlive功能需要消耗额外的宽带和流量，所以TCP协议层默认并不默认开启KeepAlive。KeepAlive超时需要7,200，000 MilliSeconds， 即2小时，探测次数为5次。对于很多应用程序来说，空闲时间太长。因此，我们可以手工开启KeepAlive功能并设置合理的KeepAlive参数。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"我的实现\"><a href=\"#我的实现\" class=\"headerlink\" title=\"我的实现\"></a>我的实现</h3><p>这里具体介绍设置SO_KEEPALIVE套接字选项这个方法。</p>\n<h4 id=\"SO-KEEPALIVE的三个参数\"><a href=\"#SO-KEEPALIVE的三个参数\" class=\"headerlink\" title=\"SO_KEEPALIVE的三个参数:\"></a>SO_KEEPALIVE的三个参数:</h4><ol>\n<li>tcp_keepalive_intvl：探测发包间隔为intvl。</li>\n<li>tcp_keepalive_idle：连接在idle时间内没有任何数据往来,则进行此TCP层的探测。</li>\n<li>tcp_keepalive_cnt：尝试探测的次数。</li>\n</ol>\n<h4 id=\"setsockopt-函数介绍\"><a href=\"#setsockopt-函数介绍\" class=\"headerlink\" title=\"setsockopt()函数介绍\"></a>setsockopt()函数介绍</h4><ol>\n<li>用法：设置与某个套接字关联的选 项。选项可能存在于多层协议中，它们总会出现在最上面的套接字层。</li>\n<li>函数原型：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setsockopt</span><span class=\"params\">(<span class=\"keyword\">int</span> sock, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> optname, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *optval, <span class=\"keyword\">socklen_t</span> optlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">参数：</span><br><span class=\"line\">sock：将要被设置或者获取选项的套接字。</span><br><span class=\"line\">level：选项所在的协议层。</span><br><span class=\"line\">optname：需要访问的选项名。</span><br><span class=\"line\">optval：对于getsockopt()，指向返回选项值的缓冲。对于setsockopt()，指向包含新选项值的缓冲。</span><br><span class=\"line\">optlen：对于getsockopt()，作为入口参数时，选项值的最大长度。作为出口参数时，选项值的实际长度。对于setsockopt()，现选项的长度。</span><br><span class=\"line\"></span><br><span class=\"line\">返回说明：</span><br><span class=\"line\">成功执行时，返回<span class=\"number\">0</span>。失败返回<span class=\"number\">-1</span>，errno被设为以下的某个值</span><br><span class=\"line\">EBADF：sock不是有效的文件描述词</span><br><span class=\"line\">EFAULT：optval指向的内存并非有效的进程空间</span><br><span class=\"line\">EINVAL：在调用setsockopt()时，optlen无效</span><br><span class=\"line\">ENOPROTOOPT：指定的协议层不能识别选项</span><br><span class=\"line\">ENOTSOCK：sock描述的不是套接字</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">heartbeat</span><span class=\"params\">(<span class=\"keyword\">int</span> fd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> alive,error,idle,cnt,intv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * open keepalive on fd</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Restart:</span><br><span class=\"line\">    alive = <span class=\"number\">1</span>;<span class=\"comment\">//set keepalive open</span></span><br><span class=\"line\">    ret=setsockopt(fd,SOL_SOCKET,SO_KEEPALIVE,&amp;alive,<span class=\"keyword\">sizeof</span>(alive));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DEBUG(<span class=\"string\">\"set socket option error.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> Restart;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 60S without data,send heartbeat package</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    idle = <span class=\"number\">60</span>;</span><br><span class=\"line\">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPIDLE,&amp;idle,<span class=\"keyword\">sizeof</span>(idle));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DEBUG(<span class=\"string\">\"set keepalive idle error.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * without any respond,3m later resend package</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    intv = <span class=\"number\">180</span>;</span><br><span class=\"line\">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPINTVL,&amp;intv,<span class=\"keyword\">sizeof</span>(intv));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DEBUG(<span class=\"string\">\"set keepalive intv error.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * send 5 times,without any response,mean connect lose</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    cnt = <span class=\"number\">5</span>;</span><br><span class=\"line\">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPCNT,&amp;cnt,<span class=\"keyword\">sizeof</span>(cnt));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DEBUG(<span class=\"string\">\"set keepalive cnt error.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然，还是有很多方法去实现心跳机制的，比如利用select实现的超时控制，或者利用守护进程或线程的单独检测。不过我个人认为设置SO_KEEPALIVE实现起来最简单，最方便。如果大家发现有什么问题，也欢迎大家交流。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"--hash-style兼容性问题","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2020-05-14T07:54:25.000Z","_content":"\n本文记录了解决 `--hash-style` 兼容性问题的过程。\n\n-----\n<!--more-->\n\n## 问题\n```\ndlopen failed: empty/missing DT_HASH in \"libxxx.so\" (built with --hash-style=gnu?)\n```\n最近，稳定性监控平台，被这一行错误日志霸榜，刚看到时也一脸懵逼，下面我们来逐步分析。\n\n## 名词解释\n首先需要查阅一下相关文档，了解一下其中的”`新朋友`”。\n\n- `DT_HASH`\n```\nELF 中的一个 Sections，保存了一个用于查找符号的散列表，用于支持符号表的访问，能够提高符号搜索速度。\n```\n\n- `--hash-style=style`(以下解释摘自 `man ld`)\n```\nSet the type of linker's hash table(s). style can be either \"sysv\" for classic ELF \".hash\" section, \"gnu\" for new style GNU \".gnu.hash\" section or \"both\" for both the classic ELF \".hash\" and new style GNU \".gnu.hash\" hash tables. The default is \"sysv\".\n```\n\n## 实验\n通过查阅 `--hash-style=style` 参数，发现 `style` 支持三种配置：`sysv`、`gnu`和`both`，废话不多说，先试一把。\n\n- `gcc -Wl,--hash-style=sysv`\n```\n$ readelf -S libxxx.so  | grep \"hash\"\n[ 4] .hash             HASH             0000000000003120  00003120\n```\n\n- `gcc -Wl,--hash-style=gnu`\n```\n$ readelf -S libxxx.so  | grep \"hash\"\n[ 4] .gnu.hash         GNU_HASH         0000000000003120  00003120\n```\n\n- `gcc -Wl,--hash-style=both`\n```\n$ readelf -S libxxx.so  | grep \"hash\"\n  [ 4] .gnu.hash         GNU_HASH         0000000000003120  00003120\n  [ 5] .hash             HASH             00000000000035f8  000035f8\n```\n\n> `-Wl` 用于编译器向链接器传递参数。  \n  \n如上，发现使用不同的配置，`Sections Name` 不同。\n\n> `.gnu.hash` 段​，提​供了​与 `hash` 段​相​同​的​功​能​；但​是与 `hash` 相比，增加了某些限制（附加规则），​导致了不兼容，带​来​了​ `50%` 的​动​态​链​接​性​能​提​升​，具体参见 [https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2](https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2)。\n\n## 分析\n结合实验结果，我先翻译一下问题中的那一行错误日志：\n```\n动态库加载失败，libxxx.so 中 DT_HASH 为空或者丢失，是不是用了 --hash-style=gnu 编译?\n```\n结合上表，若 `--hash-style=gnu`，那么 `Section Name` 就是 `.gnu.hash` 了，当然找不到`.hash` 了。\n\n再查阅一下 `Makefile` 配置，发现并没有相关配置，怀疑是编译器的默认配置：\n\n```\n$ gcc -dumpspecs | grep \"hash\"\n... --hash-style=gnu ...\n```\n\n> `-dumpspecs` 参数可以打印编译器的内置规范。\n\n果不其然，默认的 `--hash-style` 配置为了 `gnu`。\n\n## 结论\n输出的动态库的 `--hash-style` 为 `gnu`，而目标系统并不能正确读取 `--hash-style` 为 `gnu` 的动态库，导致了如上的错误。\n\n## 解决方案\n配置 `--hash-style` 为 `both`：\n```\nLDFLAGS += -Wl,--hash-style=both\n```\n\n## 参考\n- [Only one --hash-style in embedded Linux. Why?](https://stackoverflow.com/questions/11741816/only-one-hash-style-in-embedded-linux-why)\n- [Binaries built on RHEL5 or FC6 do not work on RHEL4 or FC5!](https://sites.google.com/site/avinesh/binaryincompatibilitybetweenrhel4andrhel)\n- [Android NDK UnsatisfiedLinkError: “dlopen failed: empty/missing DT_HASH”](https://stackoverflow.com/questions/28638809/android-ndk-unsatisfiedlinkerror-dlopen-failed-empty-missing-dt-hash)\n- [Trouble understanding gcc linker options](https://stackoverflow.com/questions/42068271/trouble-understanding-gcc-linker-options)\n\n-----\n\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)","source":"_posts/ld-hash-style.md","raw":"---\ntitle: --hash-style兼容性问题\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - gcc\n  - ld\n  - hash-style\ndate: 2020-05-14 15:54:25\ncategories: 编译链接\n---\n\n本文记录了解决 `--hash-style` 兼容性问题的过程。\n\n-----\n<!--more-->\n\n## 问题\n```\ndlopen failed: empty/missing DT_HASH in \"libxxx.so\" (built with --hash-style=gnu?)\n```\n最近，稳定性监控平台，被这一行错误日志霸榜，刚看到时也一脸懵逼，下面我们来逐步分析。\n\n## 名词解释\n首先需要查阅一下相关文档，了解一下其中的”`新朋友`”。\n\n- `DT_HASH`\n```\nELF 中的一个 Sections，保存了一个用于查找符号的散列表，用于支持符号表的访问，能够提高符号搜索速度。\n```\n\n- `--hash-style=style`(以下解释摘自 `man ld`)\n```\nSet the type of linker's hash table(s). style can be either \"sysv\" for classic ELF \".hash\" section, \"gnu\" for new style GNU \".gnu.hash\" section or \"both\" for both the classic ELF \".hash\" and new style GNU \".gnu.hash\" hash tables. The default is \"sysv\".\n```\n\n## 实验\n通过查阅 `--hash-style=style` 参数，发现 `style` 支持三种配置：`sysv`、`gnu`和`both`，废话不多说，先试一把。\n\n- `gcc -Wl,--hash-style=sysv`\n```\n$ readelf -S libxxx.so  | grep \"hash\"\n[ 4] .hash             HASH             0000000000003120  00003120\n```\n\n- `gcc -Wl,--hash-style=gnu`\n```\n$ readelf -S libxxx.so  | grep \"hash\"\n[ 4] .gnu.hash         GNU_HASH         0000000000003120  00003120\n```\n\n- `gcc -Wl,--hash-style=both`\n```\n$ readelf -S libxxx.so  | grep \"hash\"\n  [ 4] .gnu.hash         GNU_HASH         0000000000003120  00003120\n  [ 5] .hash             HASH             00000000000035f8  000035f8\n```\n\n> `-Wl` 用于编译器向链接器传递参数。  \n  \n如上，发现使用不同的配置，`Sections Name` 不同。\n\n> `.gnu.hash` 段​，提​供了​与 `hash` 段​相​同​的​功​能​；但​是与 `hash` 相比，增加了某些限制（附加规则），​导致了不兼容，带​来​了​ `50%` 的​动​态​链​接​性​能​提​升​，具体参见 [https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2](https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2)。\n\n## 分析\n结合实验结果，我先翻译一下问题中的那一行错误日志：\n```\n动态库加载失败，libxxx.so 中 DT_HASH 为空或者丢失，是不是用了 --hash-style=gnu 编译?\n```\n结合上表，若 `--hash-style=gnu`，那么 `Section Name` 就是 `.gnu.hash` 了，当然找不到`.hash` 了。\n\n再查阅一下 `Makefile` 配置，发现并没有相关配置，怀疑是编译器的默认配置：\n\n```\n$ gcc -dumpspecs | grep \"hash\"\n... --hash-style=gnu ...\n```\n\n> `-dumpspecs` 参数可以打印编译器的内置规范。\n\n果不其然，默认的 `--hash-style` 配置为了 `gnu`。\n\n## 结论\n输出的动态库的 `--hash-style` 为 `gnu`，而目标系统并不能正确读取 `--hash-style` 为 `gnu` 的动态库，导致了如上的错误。\n\n## 解决方案\n配置 `--hash-style` 为 `both`：\n```\nLDFLAGS += -Wl,--hash-style=both\n```\n\n## 参考\n- [Only one --hash-style in embedded Linux. Why?](https://stackoverflow.com/questions/11741816/only-one-hash-style-in-embedded-linux-why)\n- [Binaries built on RHEL5 or FC6 do not work on RHEL4 or FC5!](https://sites.google.com/site/avinesh/binaryincompatibilitybetweenrhel4andrhel)\n- [Android NDK UnsatisfiedLinkError: “dlopen failed: empty/missing DT_HASH”](https://stackoverflow.com/questions/28638809/android-ndk-unsatisfiedlinkerror-dlopen-failed-empty-missing-dt-hash)\n- [Trouble understanding gcc linker options](https://stackoverflow.com/questions/42068271/trouble-understanding-gcc-linker-options)\n\n-----\n\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)","slug":"ld-hash-style","published":1,"updated":"2020-07-21T01:40:07.197Z","layout":"post","photos":[],"link":"","_id":"cklumqgf3002a79n5pd34ikuq","content":"<p>本文记录了解决 <code>--hash-style</code> 兼容性问题的过程。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dlopen failed: <span class=\"literal\">empty</span>/missing DT_HASH <span class=\"keyword\">in</span> <span class=\"string\">\"libxxx.so\"</span> (built <span class=\"keyword\">with</span> <span class=\"comment\">--hash-style=gnu?)</span></span><br></pre></td></tr></table></figure>\n<p>最近，稳定性监控平台，被这一行错误日志霸榜，刚看到时也一脸懵逼，下面我们来逐步分析。</p>\n<h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><p>首先需要查阅一下相关文档，了解一下其中的”<code>新朋友</code>”。</p>\n<ul>\n<li><p><code>DT_HASH</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ELF</span> 中的一个 Sections，保存了一个用于查找符号的散列表，用于支持符号表的访问，能够提高符号搜索速度。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>--hash-style=style</code>(以下解释摘自 <code>man ld</code>)</p>\n<figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set the <span class=\"keyword\">type</span> <span class=\"keyword\">of</span> linker<span class=\"symbol\">'s</span> hash table(s). style can be either <span class=\"string\">\"sysv\"</span> <span class=\"keyword\">for</span> classic ELF <span class=\"string\">\".hash\"</span> section, <span class=\"string\">\"gnu\"</span> <span class=\"keyword\">for</span> <span class=\"keyword\">new</span> style GNU <span class=\"string\">\".gnu.hash\"</span> section <span class=\"keyword\">or</span> <span class=\"string\">\"both\"</span> <span class=\"keyword\">for</span> both the classic ELF <span class=\"string\">\".hash\"</span> <span class=\"keyword\">and</span> <span class=\"keyword\">new</span> style GNU <span class=\"string\">\".gnu.hash\"</span> hash tables. The <span class=\"keyword\">default</span> <span class=\"keyword\">is</span> <span class=\"string\">\"sysv\"</span>.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><p>通过查阅 <code>--hash-style=style</code> 参数，发现 <code>style</code> 支持三种配置：<code>sysv</code>、<code>gnu</code>和<code>both</code>，废话不多说，先试一把。</p>\n<ul>\n<li><p><code>gcc -Wl,--hash-style=sysv</code></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -S libxxx.so  | grep <span class=\"string\">\"hash\"</span></span><br><span class=\"line\">[ <span class=\"number\">4</span>] .hash             HASH             <span class=\"number\">0000000000003120</span>  <span class=\"number\">00003120</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>gcc -Wl,--hash-style=gnu</code></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -S libxxx.so  | grep <span class=\"string\">\"hash\"</span></span><br><span class=\"line\">[ <span class=\"number\">4</span>] .gnu.hash         GNU_HASH         <span class=\"number\">0000000000003120</span>  <span class=\"number\">00003120</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>gcc -Wl,--hash-style=both</code></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -S libxxx.so  | grep <span class=\"string\">\"hash\"</span></span><br><span class=\"line\">  [ <span class=\"number\">4</span>] .gnu.hash         GNU_HASH         <span class=\"number\">0000000000003120</span>  <span class=\"number\">00003120</span></span><br><span class=\"line\">  [ <span class=\"number\">5</span>] .hash             HASH             <span class=\"number\">00000000000035</span>f8  <span class=\"number\">000035</span>f8</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>-Wl</code> 用于编译器向链接器传递参数。  </p>\n</blockquote>\n<p>如上，发现使用不同的配置，<code>Sections Name</code> 不同。</p>\n<blockquote>\n<p><code>.gnu.hash</code> 段​，提​供了​与 <code>hash</code> 段​相​同​的​功​能​；但​是与 <code>hash</code> 相比，增加了某些限制（附加规则），​导致了不兼容，带​来​了​ <code>50%</code> 的​动​态​链​接​性​能​提​升​，具体参见 <a href=\"https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2\" target=\"_blank\" rel=\"noopener\">https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2</a>。</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>结合实验结果，我先翻译一下问题中的那一行错误日志：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态库加载失败，libxxx.so 中 DT_HASH 为空或者丢失，是不是用了 <span class=\"attribute\">--hash-style</span>=gnu 编译?</span><br></pre></td></tr></table></figure></p>\n<p>结合上表，若 <code>--hash-style=gnu</code>，那么 <code>Section Name</code> 就是 <code>.gnu.hash</code> 了，当然找不到<code>.hash</code> 了。</p>\n<p>再查阅一下 <code>Makefile</code> 配置，发现并没有相关配置，怀疑是编译器的默认配置：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -dumpspecs | grep <span class=\"string\">\"hash\"</span></span><br><span class=\"line\"><span class=\"built_in\">..</span>. <span class=\"attribute\">--hash-style</span>=gnu <span class=\"built_in\">..</span>.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>-dumpspecs</code> 参数可以打印编译器的内置规范。</p>\n</blockquote>\n<p>果不其然，默认的 <code>--hash-style</code> 配置为了 <code>gnu</code>。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>输出的动态库的 <code>--hash-style</code> 为 <code>gnu</code>，而目标系统并不能正确读取 <code>--hash-style</code> 为 <code>gnu</code> 的动态库，导致了如上的错误。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>配置 <code>--hash-style</code> 为 <code>both</code>：<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LDFLAGS += -Wl,--hash-style=both</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/11741816/only-one-hash-style-in-embedded-linux-why\" target=\"_blank\" rel=\"noopener\">Only one –hash-style in embedded Linux. Why?</a></li>\n<li><a href=\"https://sites.google.com/site/avinesh/binaryincompatibilitybetweenrhel4andrhel\" target=\"_blank\" rel=\"noopener\">Binaries built on RHEL5 or FC6 do not work on RHEL4 or FC5!</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28638809/android-ndk-unsatisfiedlinkerror-dlopen-failed-empty-missing-dt-hash\" target=\"_blank\" rel=\"noopener\">Android NDK UnsatisfiedLinkError: “dlopen failed: empty/missing DT_HASH”</a></li>\n<li><a href=\"https://stackoverflow.com/questions/42068271/trouble-understanding-gcc-linker-options\" target=\"_blank\" rel=\"noopener\">Trouble understanding gcc linker options</a></li>\n</ul>\n<hr>\n<p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文记录了解决 <code>--hash-style</code> 兼容性问题的过程。</p>\n<hr>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dlopen failed: <span class=\"literal\">empty</span>/missing DT_HASH <span class=\"keyword\">in</span> <span class=\"string\">\"libxxx.so\"</span> (built <span class=\"keyword\">with</span> <span class=\"comment\">--hash-style=gnu?)</span></span><br></pre></td></tr></table></figure>\n<p>最近，稳定性监控平台，被这一行错误日志霸榜，刚看到时也一脸懵逼，下面我们来逐步分析。</p>\n<h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><p>首先需要查阅一下相关文档，了解一下其中的”<code>新朋友</code>”。</p>\n<ul>\n<li><p><code>DT_HASH</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ELF</span> 中的一个 Sections，保存了一个用于查找符号的散列表，用于支持符号表的访问，能够提高符号搜索速度。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>--hash-style=style</code>(以下解释摘自 <code>man ld</code>)</p>\n<figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set the <span class=\"keyword\">type</span> <span class=\"keyword\">of</span> linker<span class=\"symbol\">'s</span> hash table(s). style can be either <span class=\"string\">\"sysv\"</span> <span class=\"keyword\">for</span> classic ELF <span class=\"string\">\".hash\"</span> section, <span class=\"string\">\"gnu\"</span> <span class=\"keyword\">for</span> <span class=\"keyword\">new</span> style GNU <span class=\"string\">\".gnu.hash\"</span> section <span class=\"keyword\">or</span> <span class=\"string\">\"both\"</span> <span class=\"keyword\">for</span> both the classic ELF <span class=\"string\">\".hash\"</span> <span class=\"keyword\">and</span> <span class=\"keyword\">new</span> style GNU <span class=\"string\">\".gnu.hash\"</span> hash tables. The <span class=\"keyword\">default</span> <span class=\"keyword\">is</span> <span class=\"string\">\"sysv\"</span>.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><p>通过查阅 <code>--hash-style=style</code> 参数，发现 <code>style</code> 支持三种配置：<code>sysv</code>、<code>gnu</code>和<code>both</code>，废话不多说，先试一把。</p>\n<ul>\n<li><p><code>gcc -Wl,--hash-style=sysv</code></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -S libxxx.so  | grep <span class=\"string\">\"hash\"</span></span><br><span class=\"line\">[ <span class=\"number\">4</span>] .hash             HASH             <span class=\"number\">0000000000003120</span>  <span class=\"number\">00003120</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>gcc -Wl,--hash-style=gnu</code></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -S libxxx.so  | grep <span class=\"string\">\"hash\"</span></span><br><span class=\"line\">[ <span class=\"number\">4</span>] .gnu.hash         GNU_HASH         <span class=\"number\">0000000000003120</span>  <span class=\"number\">00003120</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>gcc -Wl,--hash-style=both</code></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -S libxxx.so  | grep <span class=\"string\">\"hash\"</span></span><br><span class=\"line\">  [ <span class=\"number\">4</span>] .gnu.hash         GNU_HASH         <span class=\"number\">0000000000003120</span>  <span class=\"number\">00003120</span></span><br><span class=\"line\">  [ <span class=\"number\">5</span>] .hash             HASH             <span class=\"number\">00000000000035</span>f8  <span class=\"number\">000035</span>f8</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>-Wl</code> 用于编译器向链接器传递参数。  </p>\n</blockquote>\n<p>如上，发现使用不同的配置，<code>Sections Name</code> 不同。</p>\n<blockquote>\n<p><code>.gnu.hash</code> 段​，提​供了​与 <code>hash</code> 段​相​同​的​功​能​；但​是与 <code>hash</code> 相比，增加了某些限制（附加规则），​导致了不兼容，带​来​了​ <code>50%</code> 的​动​态​链​接​性​能​提​升​，具体参见 <a href=\"https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2\" target=\"_blank\" rel=\"noopener\">https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2</a>。</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>结合实验结果，我先翻译一下问题中的那一行错误日志：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态库加载失败，libxxx.so 中 DT_HASH 为空或者丢失，是不是用了 <span class=\"attribute\">--hash-style</span>=gnu 编译?</span><br></pre></td></tr></table></figure></p>\n<p>结合上表，若 <code>--hash-style=gnu</code>，那么 <code>Section Name</code> 就是 <code>.gnu.hash</code> 了，当然找不到<code>.hash</code> 了。</p>\n<p>再查阅一下 <code>Makefile</code> 配置，发现并没有相关配置，怀疑是编译器的默认配置：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -dumpspecs | grep <span class=\"string\">\"hash\"</span></span><br><span class=\"line\"><span class=\"built_in\">..</span>. <span class=\"attribute\">--hash-style</span>=gnu <span class=\"built_in\">..</span>.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>-dumpspecs</code> 参数可以打印编译器的内置规范。</p>\n</blockquote>\n<p>果不其然，默认的 <code>--hash-style</code> 配置为了 <code>gnu</code>。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>输出的动态库的 <code>--hash-style</code> 为 <code>gnu</code>，而目标系统并不能正确读取 <code>--hash-style</code> 为 <code>gnu</code> 的动态库，导致了如上的错误。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>配置 <code>--hash-style</code> 为 <code>both</code>：<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LDFLAGS += -Wl,--hash-style=both</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/11741816/only-one-hash-style-in-embedded-linux-why\" target=\"_blank\" rel=\"noopener\">Only one –hash-style in embedded Linux. Why?</a></li>\n<li><a href=\"https://sites.google.com/site/avinesh/binaryincompatibilitybetweenrhel4andrhel\" target=\"_blank\" rel=\"noopener\">Binaries built on RHEL5 or FC6 do not work on RHEL4 or FC5!</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28638809/android-ndk-unsatisfiedlinkerror-dlopen-failed-empty-missing-dt-hash\" target=\"_blank\" rel=\"noopener\">Android NDK UnsatisfiedLinkError: “dlopen failed: empty/missing DT_HASH”</a></li>\n<li><a href=\"https://stackoverflow.com/questions/42068271/trouble-understanding-gcc-linker-options\" target=\"_blank\" rel=\"noopener\">Trouble understanding gcc linker options</a></li>\n</ul>\n<hr>\n<p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n</ul>"},{"title":"Linux的硬链接和软链接","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-08-02T03:46:09.000Z","_content":"\nLinux下链接的命令是*ln*,可以通过``man ln``查看.\n\n----------\n<!--more-->\n\n## 硬链接\n1. 链接的是索引节点(*inode*),硬链接文件*inode*值相同(在Linux的文件系统的文件不管是什么类型都给它分配一个*indoe*号),所以硬链接文件不占用磁盘空间.相当于创建一个别名;dentry是改变的(dentry包含文件名和inode等信息).\n2. 有两个限制:目录不能创建硬链接;只能在同一个文件系统中进行硬链接.\n3. 命令:\n    ``\n    ln srouce dest\n    ``\n4. 对源文件进行修改或删除,硬链接文件会同步修改.但删除硬链接的源文件,硬链接文件仍然存在.\n\n## 软链接\n1. 软链接又称为符号链接,链接的是路径(*path*),链接文件中包含的是另一个文件的位置信息.\n2. 可以是任意文件或者目录,可以链接不同文件系统的文件.\n3. 可以链接不存在的文件,这种现象称为\"断链\";也可以链接自己\n4. 命令:\n    ``\n    ln -s srouce dest\n    ``\n    *source*最好用绝对路径表示,这样可以在任何目录下进行链接.若使用相对路径，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接.\n5. 对源文件进行修改或删除,软链接文件会同步修改.\n\n### 缺点:\n1. 因为链接文件中包含的是另一个文件的位置信息，所以当源文件从一个目录移到其它目录中,再访问链接文件,系统就找不到了.\n2. 需要系统分配额外的空间用于建立新的索引节点和保存源文件的路径.\n\n## 理解\n* 与windows类比\n1. 硬链接类似复制,但与复制不同的是存在同步机制,一处的更改会同步到另一处,删除一处不会影响另一出.\n2. 软链接相当于windows中的快捷方式.\n\n* 硬链接可以防止误删\n硬连接的作用是允许一个文件拥有多个有效路径名，因为多个硬链接文件指向同一个索引节点.这样用户就可以建立硬连接到重要文件,以防止“误删”的功能.只删除一个链接并不影响索引节点本身和其它的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件才会被真正删除。\n\n* 硬链接的两个限制\n虽然系统有目录不能创建硬链接的限制,但是命令``ln -d``可以让超级用户对目录作硬连接，这说明系统限制对目录进行硬连接只是一个硬性规定，并不是逻辑上不允许或技术上的不可行。那么为什么要做出这个硬性规定呢?\n第一,如果引入了对目录的硬连接就有可能在目录中引入循环，那么在目录遍历的时候系统就会陷入无限循环当中。可是符号连接不也可以引入循环吗？因为在linux系统中，每个文件(目录也是文件)都对应着一个inode结构，其中inode数据结构中包含了文件类型(目录，普通文件，符号连接文件等等)的信息，也就是说操作系统在遍历目录时可以判断出符号连接，既然可以判断出符号连接当然就可以采取一些措施来防范进入过大的循环了，系统在连续遇到8个符号连接后就停止遍历，这就是为什么对目录符号连接不会进入死循环的原因了。但是对于硬连接，由于操作系统中采用的数据结构和算法限制，目前是不能防范这种死循环的。\n第二,文件的dentry结构主要包含了文件名,文件的inode号,指向父目录dentry结构的指针和其他一些指针,这里关键是那个指向父目录的指针;系统中所有的dentry结构都是按杂凑值存放在杂凑表中的，这里的杂凑算法很重要，它是取文件名和文件的父目录dentry结构的地址一起杂凑运算出杂凑值的。现在我们假设有两个目录 /a和/b，其中/b是我们通过`ln -d`命令建立起来的对/a的硬连接。这个时候内核空间中就会存在一个/a的dentry结构和一个/b的dentry结构，由上面的知识可知，/a和/b目录下面的每一个文件或目录都各自有对应的dentry结构(因为虽然/a目录下面的文件名没有改变，但是因为dentry结构有指向父目录dentry 的指针和计算杂凑值时考虑了父目录dentry结构的地址，这个时候dentry结构就分身乏术了),而且这种继承还会影响到所有子目录下面的文件，这样下来就会浪费很多系统空间了,特别是如果被硬连接的目录中存在大量文件和子目录的时候就更加明显了.\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/link-in-linux.md","raw":"---\ntitle: Linux的硬链接和软链接\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - link\ndate: 2016-08-02 11:46:09\ncategories: 编译链接\n---\n\nLinux下链接的命令是*ln*,可以通过``man ln``查看.\n\n----------\n<!--more-->\n\n## 硬链接\n1. 链接的是索引节点(*inode*),硬链接文件*inode*值相同(在Linux的文件系统的文件不管是什么类型都给它分配一个*indoe*号),所以硬链接文件不占用磁盘空间.相当于创建一个别名;dentry是改变的(dentry包含文件名和inode等信息).\n2. 有两个限制:目录不能创建硬链接;只能在同一个文件系统中进行硬链接.\n3. 命令:\n    ``\n    ln srouce dest\n    ``\n4. 对源文件进行修改或删除,硬链接文件会同步修改.但删除硬链接的源文件,硬链接文件仍然存在.\n\n## 软链接\n1. 软链接又称为符号链接,链接的是路径(*path*),链接文件中包含的是另一个文件的位置信息.\n2. 可以是任意文件或者目录,可以链接不同文件系统的文件.\n3. 可以链接不存在的文件,这种现象称为\"断链\";也可以链接自己\n4. 命令:\n    ``\n    ln -s srouce dest\n    ``\n    *source*最好用绝对路径表示,这样可以在任何目录下进行链接.若使用相对路径，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接.\n5. 对源文件进行修改或删除,软链接文件会同步修改.\n\n### 缺点:\n1. 因为链接文件中包含的是另一个文件的位置信息，所以当源文件从一个目录移到其它目录中,再访问链接文件,系统就找不到了.\n2. 需要系统分配额外的空间用于建立新的索引节点和保存源文件的路径.\n\n## 理解\n* 与windows类比\n1. 硬链接类似复制,但与复制不同的是存在同步机制,一处的更改会同步到另一处,删除一处不会影响另一出.\n2. 软链接相当于windows中的快捷方式.\n\n* 硬链接可以防止误删\n硬连接的作用是允许一个文件拥有多个有效路径名，因为多个硬链接文件指向同一个索引节点.这样用户就可以建立硬连接到重要文件,以防止“误删”的功能.只删除一个链接并不影响索引节点本身和其它的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件才会被真正删除。\n\n* 硬链接的两个限制\n虽然系统有目录不能创建硬链接的限制,但是命令``ln -d``可以让超级用户对目录作硬连接，这说明系统限制对目录进行硬连接只是一个硬性规定，并不是逻辑上不允许或技术上的不可行。那么为什么要做出这个硬性规定呢?\n第一,如果引入了对目录的硬连接就有可能在目录中引入循环，那么在目录遍历的时候系统就会陷入无限循环当中。可是符号连接不也可以引入循环吗？因为在linux系统中，每个文件(目录也是文件)都对应着一个inode结构，其中inode数据结构中包含了文件类型(目录，普通文件，符号连接文件等等)的信息，也就是说操作系统在遍历目录时可以判断出符号连接，既然可以判断出符号连接当然就可以采取一些措施来防范进入过大的循环了，系统在连续遇到8个符号连接后就停止遍历，这就是为什么对目录符号连接不会进入死循环的原因了。但是对于硬连接，由于操作系统中采用的数据结构和算法限制，目前是不能防范这种死循环的。\n第二,文件的dentry结构主要包含了文件名,文件的inode号,指向父目录dentry结构的指针和其他一些指针,这里关键是那个指向父目录的指针;系统中所有的dentry结构都是按杂凑值存放在杂凑表中的，这里的杂凑算法很重要，它是取文件名和文件的父目录dentry结构的地址一起杂凑运算出杂凑值的。现在我们假设有两个目录 /a和/b，其中/b是我们通过`ln -d`命令建立起来的对/a的硬连接。这个时候内核空间中就会存在一个/a的dentry结构和一个/b的dentry结构，由上面的知识可知，/a和/b目录下面的每一个文件或目录都各自有对应的dentry结构(因为虽然/a目录下面的文件名没有改变，但是因为dentry结构有指向父目录dentry 的指针和计算杂凑值时考虑了父目录dentry结构的地址，这个时候dentry结构就分身乏术了),而且这种继承还会影响到所有子目录下面的文件，这样下来就会浪费很多系统空间了,特别是如果被硬连接的目录中存在大量文件和子目录的时候就更加明显了.\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"link-in-linux","published":1,"updated":"2020-07-21T01:40:07.197Z","layout":"post","photos":[],"link":"","_id":"cklumqgf4002d79n5e0edw203","content":"<p>Linux下链接的命令是<em>ln</em>,可以通过<code>man ln</code>查看.</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h2><ol>\n<li>链接的是索引节点(<em>inode</em>),硬链接文件<em>inode</em>值相同(在Linux的文件系统的文件不管是什么类型都给它分配一个<em>indoe</em>号),所以硬链接文件不占用磁盘空间.相当于创建一个别名;dentry是改变的(dentry包含文件名和inode等信息).</li>\n<li>有两个限制:目录不能创建硬链接;只能在同一个文件系统中进行硬链接.</li>\n<li>命令:<br> <code>ln srouce dest</code></li>\n<li>对源文件进行修改或删除,硬链接文件会同步修改.但删除硬链接的源文件,硬链接文件仍然存在.</li>\n</ol>\n<h2 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h2><ol>\n<li>软链接又称为符号链接,链接的是路径(<em>path</em>),链接文件中包含的是另一个文件的位置信息.</li>\n<li>可以是任意文件或者目录,可以链接不同文件系统的文件.</li>\n<li>可以链接不存在的文件,这种现象称为”断链”;也可以链接自己</li>\n<li>命令:<br> <code>ln -s srouce dest</code><br> <em>source</em>最好用绝对路径表示,这样可以在任何目录下进行链接.若使用相对路径，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接.</li>\n<li>对源文件进行修改或删除,软链接文件会同步修改.</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h3><ol>\n<li>因为链接文件中包含的是另一个文件的位置信息，所以当源文件从一个目录移到其它目录中,再访问链接文件,系统就找不到了.</li>\n<li>需要系统分配额外的空间用于建立新的索引节点和保存源文件的路径.</li>\n</ol>\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><ul>\n<li>与windows类比</li>\n</ul>\n<ol>\n<li>硬链接类似复制,但与复制不同的是存在同步机制,一处的更改会同步到另一处,删除一处不会影响另一出.</li>\n<li>软链接相当于windows中的快捷方式.</li>\n</ol>\n<ul>\n<li><p>硬链接可以防止误删<br>硬连接的作用是允许一个文件拥有多个有效路径名，因为多个硬链接文件指向同一个索引节点.这样用户就可以建立硬连接到重要文件,以防止“误删”的功能.只删除一个链接并不影响索引节点本身和其它的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件才会被真正删除。</p>\n</li>\n<li><p>硬链接的两个限制<br>虽然系统有目录不能创建硬链接的限制,但是命令<code>ln -d</code>可以让超级用户对目录作硬连接，这说明系统限制对目录进行硬连接只是一个硬性规定，并不是逻辑上不允许或技术上的不可行。那么为什么要做出这个硬性规定呢?<br>第一,如果引入了对目录的硬连接就有可能在目录中引入循环，那么在目录遍历的时候系统就会陷入无限循环当中。可是符号连接不也可以引入循环吗？因为在linux系统中，每个文件(目录也是文件)都对应着一个inode结构，其中inode数据结构中包含了文件类型(目录，普通文件，符号连接文件等等)的信息，也就是说操作系统在遍历目录时可以判断出符号连接，既然可以判断出符号连接当然就可以采取一些措施来防范进入过大的循环了，系统在连续遇到8个符号连接后就停止遍历，这就是为什么对目录符号连接不会进入死循环的原因了。但是对于硬连接，由于操作系统中采用的数据结构和算法限制，目前是不能防范这种死循环的。<br>第二,文件的dentry结构主要包含了文件名,文件的inode号,指向父目录dentry结构的指针和其他一些指针,这里关键是那个指向父目录的指针;系统中所有的dentry结构都是按杂凑值存放在杂凑表中的，这里的杂凑算法很重要，它是取文件名和文件的父目录dentry结构的地址一起杂凑运算出杂凑值的。现在我们假设有两个目录 /a和/b，其中/b是我们通过<code>ln -d</code>命令建立起来的对/a的硬连接。这个时候内核空间中就会存在一个/a的dentry结构和一个/b的dentry结构，由上面的知识可知，/a和/b目录下面的每一个文件或目录都各自有对应的dentry结构(因为虽然/a目录下面的文件名没有改变，但是因为dentry结构有指向父目录dentry 的指针和计算杂凑值时考虑了父目录dentry结构的地址，这个时候dentry结构就分身乏术了),而且这种继承还会影响到所有子目录下面的文件，这样下来就会浪费很多系统空间了,特别是如果被硬连接的目录中存在大量文件和子目录的时候就更加明显了.</p>\n</li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>Linux下链接的命令是<em>ln</em>,可以通过<code>man ln</code>查看.</p>\n<hr>","more":"<h2 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h2><ol>\n<li>链接的是索引节点(<em>inode</em>),硬链接文件<em>inode</em>值相同(在Linux的文件系统的文件不管是什么类型都给它分配一个<em>indoe</em>号),所以硬链接文件不占用磁盘空间.相当于创建一个别名;dentry是改变的(dentry包含文件名和inode等信息).</li>\n<li>有两个限制:目录不能创建硬链接;只能在同一个文件系统中进行硬链接.</li>\n<li>命令:<br> <code>ln srouce dest</code></li>\n<li>对源文件进行修改或删除,硬链接文件会同步修改.但删除硬链接的源文件,硬链接文件仍然存在.</li>\n</ol>\n<h2 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h2><ol>\n<li>软链接又称为符号链接,链接的是路径(<em>path</em>),链接文件中包含的是另一个文件的位置信息.</li>\n<li>可以是任意文件或者目录,可以链接不同文件系统的文件.</li>\n<li>可以链接不存在的文件,这种现象称为”断链”;也可以链接自己</li>\n<li>命令:<br> <code>ln -s srouce dest</code><br> <em>source</em>最好用绝对路径表示,这样可以在任何目录下进行链接.若使用相对路径，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接.</li>\n<li>对源文件进行修改或删除,软链接文件会同步修改.</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h3><ol>\n<li>因为链接文件中包含的是另一个文件的位置信息，所以当源文件从一个目录移到其它目录中,再访问链接文件,系统就找不到了.</li>\n<li>需要系统分配额外的空间用于建立新的索引节点和保存源文件的路径.</li>\n</ol>\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><ul>\n<li>与windows类比</li>\n</ul>\n<ol>\n<li>硬链接类似复制,但与复制不同的是存在同步机制,一处的更改会同步到另一处,删除一处不会影响另一出.</li>\n<li>软链接相当于windows中的快捷方式.</li>\n</ol>\n<ul>\n<li><p>硬链接可以防止误删<br>硬连接的作用是允许一个文件拥有多个有效路径名，因为多个硬链接文件指向同一个索引节点.这样用户就可以建立硬连接到重要文件,以防止“误删”的功能.只删除一个链接并不影响索引节点本身和其它的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件才会被真正删除。</p>\n</li>\n<li><p>硬链接的两个限制<br>虽然系统有目录不能创建硬链接的限制,但是命令<code>ln -d</code>可以让超级用户对目录作硬连接，这说明系统限制对目录进行硬连接只是一个硬性规定，并不是逻辑上不允许或技术上的不可行。那么为什么要做出这个硬性规定呢?<br>第一,如果引入了对目录的硬连接就有可能在目录中引入循环，那么在目录遍历的时候系统就会陷入无限循环当中。可是符号连接不也可以引入循环吗？因为在linux系统中，每个文件(目录也是文件)都对应着一个inode结构，其中inode数据结构中包含了文件类型(目录，普通文件，符号连接文件等等)的信息，也就是说操作系统在遍历目录时可以判断出符号连接，既然可以判断出符号连接当然就可以采取一些措施来防范进入过大的循环了，系统在连续遇到8个符号连接后就停止遍历，这就是为什么对目录符号连接不会进入死循环的原因了。但是对于硬连接，由于操作系统中采用的数据结构和算法限制，目前是不能防范这种死循环的。<br>第二,文件的dentry结构主要包含了文件名,文件的inode号,指向父目录dentry结构的指针和其他一些指针,这里关键是那个指向父目录的指针;系统中所有的dentry结构都是按杂凑值存放在杂凑表中的，这里的杂凑算法很重要，它是取文件名和文件的父目录dentry结构的地址一起杂凑运算出杂凑值的。现在我们假设有两个目录 /a和/b，其中/b是我们通过<code>ln -d</code>命令建立起来的对/a的硬连接。这个时候内核空间中就会存在一个/a的dentry结构和一个/b的dentry结构，由上面的知识可知，/a和/b目录下面的每一个文件或目录都各自有对应的dentry结构(因为虽然/a目录下面的文件名没有改变，但是因为dentry结构有指向父目录dentry 的指针和计算杂凑值时考虑了父目录dentry结构的地址，这个时候dentry结构就分身乏术了),而且这种继承还会影响到所有子目录下面的文件，这样下来就会浪费很多系统空间了,特别是如果被硬连接的目录中存在大量文件和子目录的时候就更加明显了.</p>\n</li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux下处理json数据","Antuor":"AnSwEr(Weijie Yuan)","toc":true,"date":"2016-10-10T02:50:40.000Z","_content":"\n当我们在Linux下需要处理json数据时,第一反应是用脚本编写一个工具,这样即耗时又不通用. 本文将介绍专门的命令行json处理工具**jq**.\n<!--more-->\n\n## 安装\nUbuntu用户可以直接使用下列命令安装:\n```\n$ sudo apt-get install jq \n```\n也可以选择[源码](https://github.com/stedolan/jq)安装,当然最简单的方法是直接下载[可执行文件](https://stedolan.github.io/jq/),不过需要找到适配你系统的版本.\n\n详细的安装方法可以参考[这里](https://stedolan.github.io/jq/download/).\n\n## 使用\n首先构建一个基本的字符串作为示例 test.json:\n```\n{\n    \"name\": \"中国\",\n    \"province\": [{\n        \"name\": \"黑龙江\",\n        \"cities\": {\n            \"city\": [\"哈尔滨\", \"大庆\"]\n        }\n    }, {\n        \"name\": \"广东\",\n        \"cities\": {\n            \"city\": [\"广州\", \"深圳\", \"珠海\"]\n        }\n    }, {\n        \"name\": \"台湾\",\n        \"cities\": {\n            \"city\": [\"台北\", \"高雄\"]\n        }\n    }, {\n        \"name\": \"新疆\",\n        \"cities\": {\n            \"city\": [\"乌鲁木齐\"]\n        }\n    }]\n}\n```\n\n### 解析json对象\n```\n$ cat test.json | jq '.name'\n\"中国\"\n\n$ cat test.json | jq '.province[0].name'\n\"黑龙江\"\n\n$ cat test.json | jq '.province[].name'\n\"黑龙江\"\n\"广东\"\n\"台湾\"\n\"新疆\"\n```\n\n### 提取字段\n```\n$ cat test.json | jq '.province[0]'\n{\n  \"cities\": {\n    \"city\": [\n      \"哈尔滨\",\n      \"大庆\"\n    ]\n  },\n  \"name\": \"黑龙江\"\n}\n\n$ cat test.json | jq '.province[]'\n{\n  \"cities\": {\n    \"city\": [\n      \"哈尔滨\",\n      \"大庆\"\n    ]\n  },\n  \"name\": \"黑龙江\"\n}\n{\n  \"cities\": {\n    \"city\": [\n      \"广州\",\n      \"深圳\",\n      \"珠海\"\n    ]\n  },\n  \"name\": \"广东\"\n}\n{\n  \"cities\": {\n    \"city\": [\n      \"台北\",\n      \"高雄\"\n    ]\n  },\n  \"name\": \"台湾\"\n}\n{\n  \"cities\": {\n    \"city\": [\n      \"乌鲁木齐\"\n    ]\n  },\n  \"name\": \"新疆\"\n}\n\n\n$ cat test.json | jq '.province[0] | {name ,cities}'\n{\n  \"cities\": {\n    \"city\": [\n      \"哈尔滨\",\n      \"大庆\"\n    ]\n  },\n  \"name\": \"黑龙江\"\n}\n\n$ cat test.json | jq '.province[0] | {name}'\n{\n  \"name\": \"黑龙江\"\n}\n```\n\n## 内建函数\nkeys用来提取json中的key元素:\n```\n$ cat test.json | jq 'keys'\n[\n  \"name\",\n  \"province\"\n]\n\n$ cat test.json | jq '.|keys'\n[\n  \"name\",\n  \"province\"\n]\n\n$ cat test.json | jq '.province[0]|keys'\n[\n  \"cities\",\n  \"name\"\n]\n\n$ cat test.json | jq '.province[]|keys'\n[\n  \"cities\",\n  \"name\"\n]\n[\n  \"cities\",\n  \"name\"\n]\n[\n  \"cities\",\n  \"name\"\n]\n[\n  \"cities\",\n  \"name\"\n]\n```\n\nhas用来判断是否存在某个key:\n```\n$ cat test.json | jq 'has(\"name\")'\ntrue\n$ cat test.json | jq '.province[0] | has(\"name\")'\ntrue\n$ cat test.json | jq 'has(\"noname\")'\nfalse\n```\n\n### 验证json\n若json串格式错误的话,可以直接使用jq运行,会报出具体错误.\n\n## 总结\n有了这个工具.你就可以直接在命令行或者shell脚本对json数据进行操作了.\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/jq.md","raw":"---\ntitle: Linux下处理json数据\nAntuor: AnSwEr(Weijie Yuan)\ntoc: true\ndate: 2016-10-10 10:50:40\ncategories: 系统配置\ntags: json\n---\n\n当我们在Linux下需要处理json数据时,第一反应是用脚本编写一个工具,这样即耗时又不通用. 本文将介绍专门的命令行json处理工具**jq**.\n<!--more-->\n\n## 安装\nUbuntu用户可以直接使用下列命令安装:\n```\n$ sudo apt-get install jq \n```\n也可以选择[源码](https://github.com/stedolan/jq)安装,当然最简单的方法是直接下载[可执行文件](https://stedolan.github.io/jq/),不过需要找到适配你系统的版本.\n\n详细的安装方法可以参考[这里](https://stedolan.github.io/jq/download/).\n\n## 使用\n首先构建一个基本的字符串作为示例 test.json:\n```\n{\n    \"name\": \"中国\",\n    \"province\": [{\n        \"name\": \"黑龙江\",\n        \"cities\": {\n            \"city\": [\"哈尔滨\", \"大庆\"]\n        }\n    }, {\n        \"name\": \"广东\",\n        \"cities\": {\n            \"city\": [\"广州\", \"深圳\", \"珠海\"]\n        }\n    }, {\n        \"name\": \"台湾\",\n        \"cities\": {\n            \"city\": [\"台北\", \"高雄\"]\n        }\n    }, {\n        \"name\": \"新疆\",\n        \"cities\": {\n            \"city\": [\"乌鲁木齐\"]\n        }\n    }]\n}\n```\n\n### 解析json对象\n```\n$ cat test.json | jq '.name'\n\"中国\"\n\n$ cat test.json | jq '.province[0].name'\n\"黑龙江\"\n\n$ cat test.json | jq '.province[].name'\n\"黑龙江\"\n\"广东\"\n\"台湾\"\n\"新疆\"\n```\n\n### 提取字段\n```\n$ cat test.json | jq '.province[0]'\n{\n  \"cities\": {\n    \"city\": [\n      \"哈尔滨\",\n      \"大庆\"\n    ]\n  },\n  \"name\": \"黑龙江\"\n}\n\n$ cat test.json | jq '.province[]'\n{\n  \"cities\": {\n    \"city\": [\n      \"哈尔滨\",\n      \"大庆\"\n    ]\n  },\n  \"name\": \"黑龙江\"\n}\n{\n  \"cities\": {\n    \"city\": [\n      \"广州\",\n      \"深圳\",\n      \"珠海\"\n    ]\n  },\n  \"name\": \"广东\"\n}\n{\n  \"cities\": {\n    \"city\": [\n      \"台北\",\n      \"高雄\"\n    ]\n  },\n  \"name\": \"台湾\"\n}\n{\n  \"cities\": {\n    \"city\": [\n      \"乌鲁木齐\"\n    ]\n  },\n  \"name\": \"新疆\"\n}\n\n\n$ cat test.json | jq '.province[0] | {name ,cities}'\n{\n  \"cities\": {\n    \"city\": [\n      \"哈尔滨\",\n      \"大庆\"\n    ]\n  },\n  \"name\": \"黑龙江\"\n}\n\n$ cat test.json | jq '.province[0] | {name}'\n{\n  \"name\": \"黑龙江\"\n}\n```\n\n## 内建函数\nkeys用来提取json中的key元素:\n```\n$ cat test.json | jq 'keys'\n[\n  \"name\",\n  \"province\"\n]\n\n$ cat test.json | jq '.|keys'\n[\n  \"name\",\n  \"province\"\n]\n\n$ cat test.json | jq '.province[0]|keys'\n[\n  \"cities\",\n  \"name\"\n]\n\n$ cat test.json | jq '.province[]|keys'\n[\n  \"cities\",\n  \"name\"\n]\n[\n  \"cities\",\n  \"name\"\n]\n[\n  \"cities\",\n  \"name\"\n]\n[\n  \"cities\",\n  \"name\"\n]\n```\n\nhas用来判断是否存在某个key:\n```\n$ cat test.json | jq 'has(\"name\")'\ntrue\n$ cat test.json | jq '.province[0] | has(\"name\")'\ntrue\n$ cat test.json | jq 'has(\"noname\")'\nfalse\n```\n\n### 验证json\n若json串格式错误的话,可以直接使用jq运行,会报出具体错误.\n\n## 总结\n有了这个工具.你就可以直接在命令行或者shell脚本对json数据进行操作了.\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"jq","published":1,"updated":"2020-07-21T01:40:07.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklumqgf6002h79n5w9rtt3iz","content":"<p>当我们在Linux下需要处理json数据时,第一反应是用脚本编写一个工具,这样即耗时又不通用. 本文将介绍专门的命令行json处理工具<strong>jq</strong>.<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Ubuntu用户可以直接使用下列命令安装:<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"builtin-name\">get</span> install jq</span><br></pre></td></tr></table></figure></p>\n<p>也可以选择<a href=\"https://github.com/stedolan/jq\" target=\"_blank\" rel=\"noopener\">源码</a>安装,当然最简单的方法是直接下载<a href=\"https://stedolan.github.io/jq/\" target=\"_blank\" rel=\"noopener\">可执行文件</a>,不过需要找到适配你系统的版本.</p>\n<p>详细的安装方法可以参考<a href=\"https://stedolan.github.io/jq/download/\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先构建一个基本的字符串作为示例 test.json:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"中国\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"province\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"cities\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"city\"</span>: [<span class=\"string\">\"哈尔滨\"</span>, <span class=\"string\">\"大庆\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"广东\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"cities\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"city\"</span>: [<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"深圳\"</span>, <span class=\"string\">\"珠海\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"台湾\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"cities\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"city\"</span>: [<span class=\"string\">\"台北\"</span>, <span class=\"string\">\"高雄\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"新疆\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"cities\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"city\"</span>: [<span class=\"string\">\"乌鲁木齐\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解析json对象\"><a href=\"#解析json对象\" class=\"headerlink\" title=\"解析json对象\"></a>解析json对象</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>cat test.json | jq <span class=\"string\">'.name'</span></span><br><span class=\"line\"><span class=\"string\">\"中国\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>cat test.json | jq <span class=\"string\">'.province[0].name'</span></span><br><span class=\"line\"><span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>cat test.json | jq <span class=\"string\">'.province[].name'</span></span><br><span class=\"line\"><span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\"><span class=\"string\">\"广东\"</span></span><br><span class=\"line\"><span class=\"string\">\"台湾\"</span></span><br><span class=\"line\"><span class=\"string\">\"新疆\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"提取字段\"><a href=\"#提取字段\" class=\"headerlink\" title=\"提取字段\"></a>提取字段</h3><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[0]'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"哈尔滨\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"大庆\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[]'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"哈尔滨\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"大庆\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"广州\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"深圳\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"珠海\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"广东\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"台北\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"高雄\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"台湾\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"乌鲁木齐\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"新疆\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[0] | &#123;name ,cities&#125;'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"哈尔滨\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"大庆\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[0] | &#123;name&#125;'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内建函数\"><a href=\"#内建函数\" class=\"headerlink\" title=\"内建函数\"></a>内建函数</h2><p>keys用来提取json中的key元素:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.json | jq <span class=\"string\">'keys'</span></span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"province\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.|keys'</span></span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"province\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[0]|keys'</span></span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[]|keys'</span></span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br></pre></td></tr></table></figure></p>\n<p>has用来判断是否存在某个key:<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat <span class=\"keyword\">test</span>.json | jq 'has(<span class=\"string\">\"name\"</span>)'</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">$ cat <span class=\"keyword\">test</span>.json | jq '.province[<span class=\"number\">0</span>] | has(<span class=\"string\">\"name\"</span>)'</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">$ cat <span class=\"keyword\">test</span>.json | jq 'has(<span class=\"string\">\"noname\"</span>)'</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证json\"><a href=\"#验证json\" class=\"headerlink\" title=\"验证json\"></a>验证json</h3><p>若json串格式错误的话,可以直接使用jq运行,会报出具体错误.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>有了这个工具.你就可以直接在命令行或者shell脚本对json数据进行操作了.</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>当我们在Linux下需要处理json数据时,第一反应是用脚本编写一个工具,这样即耗时又不通用. 本文将介绍专门的命令行json处理工具<strong>jq</strong>.<br></p>","more":"<p></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Ubuntu用户可以直接使用下列命令安装:<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"builtin-name\">get</span> install jq</span><br></pre></td></tr></table></figure></p>\n<p>也可以选择<a href=\"https://github.com/stedolan/jq\" target=\"_blank\" rel=\"noopener\">源码</a>安装,当然最简单的方法是直接下载<a href=\"https://stedolan.github.io/jq/\" target=\"_blank\" rel=\"noopener\">可执行文件</a>,不过需要找到适配你系统的版本.</p>\n<p>详细的安装方法可以参考<a href=\"https://stedolan.github.io/jq/download/\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先构建一个基本的字符串作为示例 test.json:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"中国\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"province\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"cities\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"city\"</span>: [<span class=\"string\">\"哈尔滨\"</span>, <span class=\"string\">\"大庆\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"广东\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"cities\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"city\"</span>: [<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"深圳\"</span>, <span class=\"string\">\"珠海\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"台湾\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"cities\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"city\"</span>: [<span class=\"string\">\"台北\"</span>, <span class=\"string\">\"高雄\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"新疆\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"cities\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"city\"</span>: [<span class=\"string\">\"乌鲁木齐\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解析json对象\"><a href=\"#解析json对象\" class=\"headerlink\" title=\"解析json对象\"></a>解析json对象</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>cat test.json | jq <span class=\"string\">'.name'</span></span><br><span class=\"line\"><span class=\"string\">\"中国\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>cat test.json | jq <span class=\"string\">'.province[0].name'</span></span><br><span class=\"line\"><span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>cat test.json | jq <span class=\"string\">'.province[].name'</span></span><br><span class=\"line\"><span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\"><span class=\"string\">\"广东\"</span></span><br><span class=\"line\"><span class=\"string\">\"台湾\"</span></span><br><span class=\"line\"><span class=\"string\">\"新疆\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"提取字段\"><a href=\"#提取字段\" class=\"headerlink\" title=\"提取字段\"></a>提取字段</h3><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[0]'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"哈尔滨\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"大庆\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[]'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"哈尔滨\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"大庆\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"广州\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"深圳\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"珠海\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"广东\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"台北\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"高雄\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"台湾\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"乌鲁木齐\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"新疆\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[0] | &#123;name ,cities&#125;'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"cities\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"哈尔滨\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"大庆\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[0] | &#123;name&#125;'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"黑龙江\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内建函数\"><a href=\"#内建函数\" class=\"headerlink\" title=\"内建函数\"></a>内建函数</h2><p>keys用来提取json中的key元素:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.json | jq <span class=\"string\">'keys'</span></span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"province\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.|keys'</span></span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"province\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[0]|keys'</span></span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat test.json | jq <span class=\"string\">'.province[]|keys'</span></span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br><span class=\"line\">[<span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"cities\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"meta\"></span>]</span><br></pre></td></tr></table></figure></p>\n<p>has用来判断是否存在某个key:<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat <span class=\"keyword\">test</span>.json | jq 'has(<span class=\"string\">\"name\"</span>)'</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">$ cat <span class=\"keyword\">test</span>.json | jq '.province[<span class=\"number\">0</span>] | has(<span class=\"string\">\"name\"</span>)'</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">$ cat <span class=\"keyword\">test</span>.json | jq 'has(<span class=\"string\">\"noname\"</span>)'</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证json\"><a href=\"#验证json\" class=\"headerlink\" title=\"验证json\"></a>验证json</h3><p>若json串格式错误的话,可以直接使用jq运行,会报出具体错误.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>有了这个工具.你就可以直接在命令行或者shell脚本对json数据进行操作了.</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"UNIX网络编程-listen函数及其包裹函数介绍","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2017-02-23T09:14:17.000Z","_content":"本文将介绍UNIX网络编程中`listen`函数及其包裹函数。\n\n----------\n<!--more-->\n\n### 函数简介\n```\n#include<sys/socket.h>\n\nint listen(int sockfd,int backlog);\n                                返回：若成功则为0，若出错则为-1\n```\n目前``listen``函数仅为``TCP``服务器调用，主要完成两个任务：\n1. 将``socket``函数创建的还未建立连接的主动套接字转换为被动(监听)套接字，使内核接受指向该套接字的连接。\n2. 使用第二个参数规定了内核为相应套接字排队的最大连接个数。\n\n\n\n> tips：``socket``函数创建的套接字被默认为一个主动套接字，即该套接字为将调用``connect``函数发起连接的客户套接字。而``listen``函数导致该套接字从``CLOSED``状态转换为``LISTEN``状态。\n\n\n### 包裹函数([下载](https://github.com/AnSwErYWJ/UNP/blob/master/TCP/Listen.c))\n历史上总是将``backlog``设为5，但已无法满足现在服务器的需求了，所以需要指定一个较大的``backlog``才能满足繁忙的需求。一种方法是使用一个常值，可是每次增长都需要重新编译，比较麻烦；另一种方法是设定默认值，然后允许通过命令行或环境变量覆盖默认值：\n```\n#include<stdlib.h>\n#include<sys/socket.h>\n\nvoid Listen(int fd,int backlog)\n{\n    char *ptr;\n    if((ptr = getenv(\"LISTENQ\")) != NULL)\n        backlog = atoi(ptr);\n\n    if(listen(fd,backlog) == -1)\n        perror(\"Listen error\");\n}\n```\n这样就可以通过设置环境变量``LISTENQ``来动态配置``backlog``的大小。\n> tips：``backlog``为0不代表就不会有客户连接到你的机器。如果不想让客户连接，请直接关闭该套接字。\n\n### About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n","source":"_posts/listen-in-unix.md","raw":"---\ntitle: UNIX网络编程-listen函数及其包裹函数介绍\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - tcp\n  - listen\ndate: 2017-02-23 17:14:17\ncategories: C/C++\n---\n本文将介绍UNIX网络编程中`listen`函数及其包裹函数。\n\n----------\n<!--more-->\n\n### 函数简介\n```\n#include<sys/socket.h>\n\nint listen(int sockfd,int backlog);\n                                返回：若成功则为0，若出错则为-1\n```\n目前``listen``函数仅为``TCP``服务器调用，主要完成两个任务：\n1. 将``socket``函数创建的还未建立连接的主动套接字转换为被动(监听)套接字，使内核接受指向该套接字的连接。\n2. 使用第二个参数规定了内核为相应套接字排队的最大连接个数。\n\n\n\n> tips：``socket``函数创建的套接字被默认为一个主动套接字，即该套接字为将调用``connect``函数发起连接的客户套接字。而``listen``函数导致该套接字从``CLOSED``状态转换为``LISTEN``状态。\n\n\n### 包裹函数([下载](https://github.com/AnSwErYWJ/UNP/blob/master/TCP/Listen.c))\n历史上总是将``backlog``设为5，但已无法满足现在服务器的需求了，所以需要指定一个较大的``backlog``才能满足繁忙的需求。一种方法是使用一个常值，可是每次增长都需要重新编译，比较麻烦；另一种方法是设定默认值，然后允许通过命令行或环境变量覆盖默认值：\n```\n#include<stdlib.h>\n#include<sys/socket.h>\n\nvoid Listen(int fd,int backlog)\n{\n    char *ptr;\n    if((ptr = getenv(\"LISTENQ\")) != NULL)\n        backlog = atoi(ptr);\n\n    if(listen(fd,backlog) == -1)\n        perror(\"Listen error\");\n}\n```\n这样就可以通过设置环境变量``LISTENQ``来动态配置``backlog``的大小。\n> tips：``backlog``为0不代表就不会有客户连接到你的机器。如果不想让客户连接，请直接关闭该套接字。\n\n### About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n\n","slug":"listen-in-unix","published":1,"updated":"2020-07-21T01:40:07.213Z","layout":"post","photos":[],"link":"","_id":"cklumqgf7002k79n53c1l0s2h","content":"<p>本文将介绍UNIX网络编程中<code>listen</code>函数及其包裹函数。</p>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"函数简介\"><a href=\"#函数简介\" class=\"headerlink\" title=\"函数简介\"></a>函数简介</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">listen</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd,<span class=\"keyword\">int</span> backlog)</span></span>;</span><br><span class=\"line\">                                返回：若成功则为<span class=\"number\">0</span>，若出错则为<span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<p>目前<code>listen</code>函数仅为<code>TCP</code>服务器调用，主要完成两个任务：</p>\n<ol>\n<li>将<code>socket</code>函数创建的还未建立连接的主动套接字转换为被动(监听)套接字，使内核接受指向该套接字的连接。</li>\n<li>使用第二个参数规定了内核为相应套接字排队的最大连接个数。</li>\n</ol>\n<blockquote>\n<p>tips：<code>socket</code>函数创建的套接字被默认为一个主动套接字，即该套接字为将调用<code>connect</code>函数发起连接的客户套接字。而<code>listen</code>函数导致该套接字从<code>CLOSED</code>状态转换为<code>LISTEN</code>状态。</p>\n</blockquote>\n<h3 id=\"包裹函数-下载\"><a href=\"#包裹函数-下载\" class=\"headerlink\" title=\"包裹函数(下载)\"></a>包裹函数(<a href=\"https://github.com/AnSwErYWJ/UNP/blob/master/TCP/Listen.c\" target=\"_blank\" rel=\"noopener\">下载</a>)</h3><p>历史上总是将<code>backlog</code>设为5，但已无法满足现在服务器的需求了，所以需要指定一个较大的<code>backlog</code>才能满足繁忙的需求。一种方法是使用一个常值，可是每次增长都需要重新编译，比较麻烦；另一种方法是设定默认值，然后允许通过命令行或环境变量覆盖默认值：<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">void Listen(<span class=\"built_in\">int</span> fd,<span class=\"built_in\">int</span> backlog)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char *<span class=\"built_in\">ptr</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"built_in\">ptr</span> = getenv(<span class=\"string\">\"LISTENQ\"</span>)) != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        backlog = atoi(<span class=\"built_in\">ptr</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(listen(fd,backlog) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        perror(<span class=\"string\">\"Listen error\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以通过设置环境变量<code>LISTENQ</code>来动态配置<code>backlog</code>的大小。</p>\n<blockquote>\n<p>tips：<code>backlog</code>为0不代表就不会有客户连接到你的机器。如果不想让客户连接，请直接关闭该套接字。</p>\n</blockquote>\n<h3 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h3><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍UNIX网络编程中<code>listen</code>函数及其包裹函数。</p>\n<hr>","more":"<h3 id=\"函数简介\"><a href=\"#函数简介\" class=\"headerlink\" title=\"函数简介\"></a>函数简介</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">listen</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd,<span class=\"keyword\">int</span> backlog)</span></span>;</span><br><span class=\"line\">                                返回：若成功则为<span class=\"number\">0</span>，若出错则为<span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<p>目前<code>listen</code>函数仅为<code>TCP</code>服务器调用，主要完成两个任务：</p>\n<ol>\n<li>将<code>socket</code>函数创建的还未建立连接的主动套接字转换为被动(监听)套接字，使内核接受指向该套接字的连接。</li>\n<li>使用第二个参数规定了内核为相应套接字排队的最大连接个数。</li>\n</ol>\n<blockquote>\n<p>tips：<code>socket</code>函数创建的套接字被默认为一个主动套接字，即该套接字为将调用<code>connect</code>函数发起连接的客户套接字。而<code>listen</code>函数导致该套接字从<code>CLOSED</code>状态转换为<code>LISTEN</code>状态。</p>\n</blockquote>\n<h3 id=\"包裹函数-下载\"><a href=\"#包裹函数-下载\" class=\"headerlink\" title=\"包裹函数(下载)\"></a>包裹函数(<a href=\"https://github.com/AnSwErYWJ/UNP/blob/master/TCP/Listen.c\" target=\"_blank\" rel=\"noopener\">下载</a>)</h3><p>历史上总是将<code>backlog</code>设为5，但已无法满足现在服务器的需求了，所以需要指定一个较大的<code>backlog</code>才能满足繁忙的需求。一种方法是使用一个常值，可是每次增长都需要重新编译，比较麻烦；另一种方法是设定默认值，然后允许通过命令行或环境变量覆盖默认值：<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">void Listen(<span class=\"built_in\">int</span> fd,<span class=\"built_in\">int</span> backlog)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char *<span class=\"built_in\">ptr</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"built_in\">ptr</span> = getenv(<span class=\"string\">\"LISTENQ\"</span>)) != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        backlog = atoi(<span class=\"built_in\">ptr</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(listen(fd,backlog) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        perror(<span class=\"string\">\"Listen error\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以通过设置环境变量<code>LISTENQ</code>来动态配置<code>backlog</code>的大小。</p>\n<blockquote>\n<p>tips：<code>backlog</code>为0不代表就不会有客户连接到你的机器。如果不想让客户连接，请直接关闭该套接字。</p>\n</blockquote>\n<h3 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h3><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"UNIX编程安全读写函数","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T06:19:20.000Z","_content":"\n字节流套接字（TCP套接字）上的read和write函数所表现的行为不同于通常的文件I/O。字节流套接字调用read或write输入或输出的字节数可能比请求的数量少，然而这并不是出错的状态。**这是因为内核中用于套接字的缓冲区可能达到了极限。**通常这种情况出现在一次读多于4096个字节或write在非阻塞情况下返回不足字节数。为了不多次调用read或防止write返回不足字节数，我们用下面的两个函数来替代read和write。\n\n----------\n<!--more-->\n\n## readn\n```C\n#include<stdio.h>\n#include<unistd.h>\n#include<errno.h>\n\nssize_t safe_read(int fd,void *vptr,size_t n)\n{\n    size_t nleft;\n    ssize_t nread;\n    char *ptr;\n\n    ptr=vptr;\n    nleft=n;\n\n    while(nleft > 0)\n    {\n        if((nread = read(fd,ptr,nleft)) < 0)\n        {\n            if(errno == EINTR) //被信号中断，重读\n                nread = 0;\n            else //出错\n                return -1;\n        }\n        else if(nread == 0) //EOF\n\t        break;\n\n        nleft -= nread;\n        ptr += nread;\n    }\n    return (n-nleft);\n}\n```\n\n## writen\n```C\n#include<stdio.h>\n#include<unistd.h>\n#include<errno.h>\n\nssize_t\tsafe_write(int fd, const void *vptr, size_t n)\n{\n    size_t  nleft;\n    ssize_t nwritten;\n    const char *ptr;\n\n    ptr = vptr;\n    nleft = n;\n\n    while(nleft > 0)\n    {\n    \tif((nwritten = write(fd, ptr, nleft)) <= 0)\n        {\n            if(nwritten < 0 && errno == EINTR) //被信号中断，重写\n                nwritten = 0;\n            else //error\n                return -1;\n        }\n\t\tnleft -= nwritten;\n\t\tptr   += nwritten;\n     }\n\treturn(n);\n}\n```\n\n## 总结\n上面介绍了两个安全读写函数，但是并不意味着这两个函数在任何地方都完全适用，所以不要强迫自己使用。需要注意阻塞、效率等问题，当你只是读写少量字节时，就没必要使用了。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/safe-read-and-write.md","raw":"---\ntitle: UNIX编程安全读写函数\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - read\n  - write\ndate: 2016-07-14 14:19:20\ncategories: C/C++\n---\n\n字节流套接字（TCP套接字）上的read和write函数所表现的行为不同于通常的文件I/O。字节流套接字调用read或write输入或输出的字节数可能比请求的数量少，然而这并不是出错的状态。**这是因为内核中用于套接字的缓冲区可能达到了极限。**通常这种情况出现在一次读多于4096个字节或write在非阻塞情况下返回不足字节数。为了不多次调用read或防止write返回不足字节数，我们用下面的两个函数来替代read和write。\n\n----------\n<!--more-->\n\n## readn\n```C\n#include<stdio.h>\n#include<unistd.h>\n#include<errno.h>\n\nssize_t safe_read(int fd,void *vptr,size_t n)\n{\n    size_t nleft;\n    ssize_t nread;\n    char *ptr;\n\n    ptr=vptr;\n    nleft=n;\n\n    while(nleft > 0)\n    {\n        if((nread = read(fd,ptr,nleft)) < 0)\n        {\n            if(errno == EINTR) //被信号中断，重读\n                nread = 0;\n            else //出错\n                return -1;\n        }\n        else if(nread == 0) //EOF\n\t        break;\n\n        nleft -= nread;\n        ptr += nread;\n    }\n    return (n-nleft);\n}\n```\n\n## writen\n```C\n#include<stdio.h>\n#include<unistd.h>\n#include<errno.h>\n\nssize_t\tsafe_write(int fd, const void *vptr, size_t n)\n{\n    size_t  nleft;\n    ssize_t nwritten;\n    const char *ptr;\n\n    ptr = vptr;\n    nleft = n;\n\n    while(nleft > 0)\n    {\n    \tif((nwritten = write(fd, ptr, nleft)) <= 0)\n        {\n            if(nwritten < 0 && errno == EINTR) //被信号中断，重写\n                nwritten = 0;\n            else //error\n                return -1;\n        }\n\t\tnleft -= nwritten;\n\t\tptr   += nwritten;\n     }\n\treturn(n);\n}\n```\n\n## 总结\n上面介绍了两个安全读写函数，但是并不意味着这两个函数在任何地方都完全适用，所以不要强迫自己使用。需要注意阻塞、效率等问题，当你只是读写少量字节时，就没必要使用了。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"safe-read-and-write","published":1,"updated":"2020-07-21T01:40:07.213Z","layout":"post","photos":[],"link":"","_id":"cklumqgf9002o79n595o9qugd","content":"<p>字节流套接字（TCP套接字）上的read和write函数所表现的行为不同于通常的文件I/O。字节流套接字调用read或write输入或输出的字节数可能比请求的数量少，然而这并不是出错的状态。<strong>这是因为内核中用于套接字的缓冲区可能达到了极限。</strong>通常这种情况出现在一次读多于4096个字节或write在非阻塞情况下返回不足字节数。为了不多次调用read或防止write返回不足字节数，我们用下面的两个函数来替代read和write。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"readn\"><a href=\"#readn\" class=\"headerlink\" title=\"readn\"></a>readn</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ssize_t</span> safe_read(<span class=\"keyword\">int</span> fd,<span class=\"keyword\">void</span> *vptr,<span class=\"keyword\">size_t</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> nleft;</span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> nread;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr=vptr;</span><br><span class=\"line\">    nleft=n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nleft &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((nread = read(fd,ptr,nleft)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(errno == EINTR) <span class=\"comment\">//被信号中断，重读</span></span><br><span class=\"line\">                nread = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">//出错</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nread == <span class=\"number\">0</span>) <span class=\"comment\">//EOF</span></span><br><span class=\"line\">\t        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        nleft -= nread;</span><br><span class=\"line\">        ptr += nread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n-nleft);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"writen\"><a href=\"#writen\" class=\"headerlink\" title=\"writen\"></a>writen</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ssize_t</span>\tsafe_write(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *vptr, <span class=\"keyword\">size_t</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span>  nleft;</span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> nwritten;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr = vptr;</span><br><span class=\"line\">    nleft = n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nleft &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>((nwritten = write(fd, ptr, nleft)) &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nwritten &lt; <span class=\"number\">0</span> &amp;&amp; errno == EINTR) <span class=\"comment\">//被信号中断，重写</span></span><br><span class=\"line\">                nwritten = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">//error</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\tnleft -= nwritten;</span><br><span class=\"line\">\t\tptr   += nwritten;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面介绍了两个安全读写函数，但是并不意味着这两个函数在任何地方都完全适用，所以不要强迫自己使用。需要注意阻塞、效率等问题，当你只是读写少量字节时，就没必要使用了。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>字节流套接字（TCP套接字）上的read和write函数所表现的行为不同于通常的文件I/O。字节流套接字调用read或write输入或输出的字节数可能比请求的数量少，然而这并不是出错的状态。<strong>这是因为内核中用于套接字的缓冲区可能达到了极限。</strong>通常这种情况出现在一次读多于4096个字节或write在非阻塞情况下返回不足字节数。为了不多次调用read或防止write返回不足字节数，我们用下面的两个函数来替代read和write。</p>\n<hr>","more":"<h2 id=\"readn\"><a href=\"#readn\" class=\"headerlink\" title=\"readn\"></a>readn</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ssize_t</span> safe_read(<span class=\"keyword\">int</span> fd,<span class=\"keyword\">void</span> *vptr,<span class=\"keyword\">size_t</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> nleft;</span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> nread;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr=vptr;</span><br><span class=\"line\">    nleft=n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nleft &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((nread = read(fd,ptr,nleft)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(errno == EINTR) <span class=\"comment\">//被信号中断，重读</span></span><br><span class=\"line\">                nread = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">//出错</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nread == <span class=\"number\">0</span>) <span class=\"comment\">//EOF</span></span><br><span class=\"line\">\t        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        nleft -= nread;</span><br><span class=\"line\">        ptr += nread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n-nleft);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"writen\"><a href=\"#writen\" class=\"headerlink\" title=\"writen\"></a>writen</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ssize_t</span>\tsafe_write(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *vptr, <span class=\"keyword\">size_t</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span>  nleft;</span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> nwritten;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr = vptr;</span><br><span class=\"line\">    nleft = n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nleft &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>((nwritten = write(fd, ptr, nleft)) &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nwritten &lt; <span class=\"number\">0</span> &amp;&amp; errno == EINTR) <span class=\"comment\">//被信号中断，重写</span></span><br><span class=\"line\">                nwritten = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">//error</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\tnleft -= nwritten;</span><br><span class=\"line\">\t\tptr   += nwritten;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面介绍了两个安全读写函数，但是并不意味着这两个函数在任何地方都完全适用，所以不要强迫自己使用。需要注意阻塞、效率等问题，当你只是读写少量字节时，就没必要使用了。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux下脚本录制工具——script和scriptreplay","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T06:04:51.000Z","_content":"\n在Linux开发环境下，想要录制一段屏幕视屏不是特别方便。这里分享给大家一种方便而且快捷的方法。\n\n----------\n<!--more-->\n\n## 使用\nLinux下有script和scriptreplay这两个工具组合用于录制命令行。在新版本系统中，已经集成了这两个工具，所以直接使用即可：\n```\n$ script -t 2>timing.log -a >output.session\n$ <command>\n$ <command>\n$ exit\n$ scriptreplay timing.log output.session\n```\n\n说明：\n- 选项-t用于存储时序文件，这里导入到stderr，再重定向到timing.log。\n- 选项-a用于将命令输出信息，重定向到output.session文件。\n- 这两个文件很小，可以拷贝到需要播放的机器上进行播放。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/script-and-scriptreplay.md","raw":"---\ntitle: Linux下脚本录制工具——script和scriptreplay\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - script\n  - scriptreplay\ndate: 2016-07-14 14:04:51\ncategories: 系统配置\n---\n\n在Linux开发环境下，想要录制一段屏幕视屏不是特别方便。这里分享给大家一种方便而且快捷的方法。\n\n----------\n<!--more-->\n\n## 使用\nLinux下有script和scriptreplay这两个工具组合用于录制命令行。在新版本系统中，已经集成了这两个工具，所以直接使用即可：\n```\n$ script -t 2>timing.log -a >output.session\n$ <command>\n$ <command>\n$ exit\n$ scriptreplay timing.log output.session\n```\n\n说明：\n- 选项-t用于存储时序文件，这里导入到stderr，再重定向到timing.log。\n- 选项-a用于将命令输出信息，重定向到output.session文件。\n- 这两个文件很小，可以拷贝到需要播放的机器上进行播放。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"script-and-scriptreplay","published":1,"updated":"2020-07-21T01:40:07.213Z","layout":"post","photos":[],"link":"","_id":"cklumqgfa002r79n5u4uyvkmm","content":"<p>在Linux开发环境下，想要录制一段屏幕视屏不是特别方便。这里分享给大家一种方便而且快捷的方法。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>Linux下有script和scriptreplay这两个工具组合用于录制命令行。在新版本系统中，已经集成了这两个工具，所以直接使用即可：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ script -t <span class=\"number\">2</span>&gt;timing.log -a &gt;output.session</span><br><span class=\"line\">$ &lt;command&gt;</span><br><span class=\"line\">$ &lt;command&gt;</span><br><span class=\"line\">$ <span class=\"keyword\">exit</span></span><br><span class=\"line\">$ scriptreplay timing.log output.session</span><br></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<ul>\n<li>选项-t用于存储时序文件，这里导入到stderr，再重定向到timing.log。</li>\n<li>选项-a用于将命令输出信息，重定向到output.session文件。</li>\n<li>这两个文件很小，可以拷贝到需要播放的机器上进行播放。</li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>在Linux开发环境下，想要录制一段屏幕视屏不是特别方便。这里分享给大家一种方便而且快捷的方法。</p>\n<hr>","more":"<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>Linux下有script和scriptreplay这两个工具组合用于录制命令行。在新版本系统中，已经集成了这两个工具，所以直接使用即可：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ script -t <span class=\"number\">2</span>&gt;timing.log -a &gt;output.session</span><br><span class=\"line\">$ &lt;command&gt;</span><br><span class=\"line\">$ &lt;command&gt;</span><br><span class=\"line\">$ <span class=\"keyword\">exit</span></span><br><span class=\"line\">$ scriptreplay timing.log output.session</span><br></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<ul>\n<li>选项-t用于存储时序文件，这里导入到stderr，再重定向到timing.log。</li>\n<li>选项-a用于将命令输出信息，重定向到output.session文件。</li>\n<li>这两个文件很小，可以拷贝到需要播放的机器上进行播放。</li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"笔记 | OpenResty系列课程","Antuor":"AnSwEr(Weijie Yuan)","toc":true,"date":"2017-06-20T09:30:40.000Z","_content":"\n观看[OpenResty 系列课程](http://www.stuq.org/course/1015/study)的学习笔记\n<!--more-->\n\n## 用 OpenResty 快乐的搭建高性能服务端\n\n### 1.1 OpenResty简介\n高性能服务端的两个特点：\n- 缓存（内存>SSD>机械磁盘，本机>网络，进程内>进程外）\n- 异步非阻塞（事件驱动）\n\n### 1.2 hello world\n参考资料：\n- [官网](http://openresty.org/en/)\n- [文档](https://github.com/openresty/lua-nginx-module/blob/master/README.markdown)\n\n`OpenResty = Nginx + LuaJIT（LuaJIT虚拟机嵌在Nginx worker中）`\n\n\n[lua_code_cache](https://github.com/openresty/lua-nginx-module#lua_code_cache)：`lua`代码缓存，默认开启，支持`set_by_lua_file`和`content_by_lua_file`等指令和`lua`模块，关闭后方便开发（不用重启Nginx），生产环境建议开启（影响性能）\n\n[content_by_lua_file](https://github.com/openresty/lua-nginx-module#content_by_lua_file)：指定要执行的`lua`文件\n\n### 1.3 OpenResty入门\n书籍：[openresty最佳实践](https://moonbingbing.gitbooks.io/openresty-best-practices/content/index.html)\n\n运行时的错误日志保存在`logs/error.log`中\n\n`nginx.conf`示例片段：\n```\n  location = /api/random {\n  content_by_lua_file lua/random.lua;\n }\n```\n`random.lua`：\n```\nlocal args = ngx.req.get_uri_args() --max is 100，set 0 to unlimit\nlocal salt = args.salt\nif not salt then\n  ngx.exit(ngx.HTTP_BAD_REQUEST)\nend\n\nlocal string = ngx.md5(ngx.time() .. salt)\nngx.say(string)\n```\n\n### 1.4 ngx lua API介绍\n> Tips： 不要使用 `lua API`（阻塞），要用`ngx lua API`（非阻塞）\n\n\n### 1.5 连接数据库\n> Tips： 数据库操作的代码逻辑看上去是同步的，但是内部实现是异步的\n\n主要有[lua-resty-redis](https://github.com/openresty/lua-resty-redis)和[lua-resty-mysql](https://github.com/openresty/lua-resty-mysql)\n\n### 1.6 OpenResty缓存\n- [share_dict](https://github.com/openresty/lua-nginx-module#ngxshareddict)： 字典缓存，纯内存缓存，可以预设内存大小，多个`worker`共享，需要锁操作\n- [lua-resty-lrucache](https://github.com/openresty/lua-resty-lrucache)：可以预设`key`个数，单个`worker`使用，内存使用翻倍  \n\n缓存失效风暴：在缓存超时时间触发的瞬间，所有的并发请求都同时执行数据库查询操作，数据库压力瞬间变大，下次请求又全部进入缓存，压力瞬间变小，出现两个极值。可以使用[lua-resty-lock](https://github.com/openresty/lua-resty-lock)对数据库查询操作加锁，使数据库查询只进行一次\n\n### 1.7 FFI和第三方模块\n`FFI`：`LuaJIT`的一个库，可以在`LuaJIT`中调用`C`的数据结构和外部`C`函数。如[random.lua](https://github.com/openresty/lua-resty-string/blob/master/lib/resty/random.lua)\n第三方模块：放在`/openresty/lualib/resty`目录下。\n\n### 1.8 子查询\n`ngx.location.capture`和`ngx.location.capture_multi`：在一个`location`内部，对另一个`location`进行请求，因为这不是`http`请求，是`C`级别的调用，所以有开销小的优点; 同时可以降级服务（某一个非关键服务`down`掉，可以继续使用），开放给前端就一个`api`接口即可，在这个`api`接口内做多个子查询，不需要前端调用多个`api`进行查询，避免由于某一个`api`服务挂掉而导致阻塞\n```\n  location = /api/test_parallels {\n  content_by_lua_block {\n  local start_time = ngx.now()\n  local res1, res2 = ngx.location.capture_multi({\n\t\t\t\t  {\"/sum\",{args={a=3, b=8}}},\n\t\t\t\t  {\"/subduction\",{args={a=3, b=8}}},\n\t\t\t\t  })\n  ngx.say(\"status:\", res1.status, \"response:\", res1.body)\n  ngx.say(\"status:\", res2.status, \"response:\", res2.body)\n  ngx.say(\"time used:\", ngx.now()-start_time)\n  }\n  }\n```\n\n### 1.9 执行阶段\n这个是`Nginx`和`OpenResty`独有的概念，不同的阶段有不同的处理行为，可参考[执行阶段概念](https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/phase.html)\n\n## 常用命令\n更改conf后，检查conf文件是否正确：`nginx -t -c [conf]`\n重启：`nginx：nginx -s reload -p [path]`\n\n## Reference\n- [OpenResty 系列课程](http://www.stuq.org/course/1015/study)\n- [OpenResty官网](http://openresty.org/en/)\n- [OpenResty](https://github.com/openresty)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/note-of-openresty-study.md","raw":"---\ntitle: 笔记 | OpenResty系列课程\nAntuor: AnSwEr(Weijie Yuan)\ntoc: true\ndate: 2017-06-20 17:30:40\ncategories: Lua\ntags: OpenResty\n---\n\n观看[OpenResty 系列课程](http://www.stuq.org/course/1015/study)的学习笔记\n<!--more-->\n\n## 用 OpenResty 快乐的搭建高性能服务端\n\n### 1.1 OpenResty简介\n高性能服务端的两个特点：\n- 缓存（内存>SSD>机械磁盘，本机>网络，进程内>进程外）\n- 异步非阻塞（事件驱动）\n\n### 1.2 hello world\n参考资料：\n- [官网](http://openresty.org/en/)\n- [文档](https://github.com/openresty/lua-nginx-module/blob/master/README.markdown)\n\n`OpenResty = Nginx + LuaJIT（LuaJIT虚拟机嵌在Nginx worker中）`\n\n\n[lua_code_cache](https://github.com/openresty/lua-nginx-module#lua_code_cache)：`lua`代码缓存，默认开启，支持`set_by_lua_file`和`content_by_lua_file`等指令和`lua`模块，关闭后方便开发（不用重启Nginx），生产环境建议开启（影响性能）\n\n[content_by_lua_file](https://github.com/openresty/lua-nginx-module#content_by_lua_file)：指定要执行的`lua`文件\n\n### 1.3 OpenResty入门\n书籍：[openresty最佳实践](https://moonbingbing.gitbooks.io/openresty-best-practices/content/index.html)\n\n运行时的错误日志保存在`logs/error.log`中\n\n`nginx.conf`示例片段：\n```\n  location = /api/random {\n  content_by_lua_file lua/random.lua;\n }\n```\n`random.lua`：\n```\nlocal args = ngx.req.get_uri_args() --max is 100，set 0 to unlimit\nlocal salt = args.salt\nif not salt then\n  ngx.exit(ngx.HTTP_BAD_REQUEST)\nend\n\nlocal string = ngx.md5(ngx.time() .. salt)\nngx.say(string)\n```\n\n### 1.4 ngx lua API介绍\n> Tips： 不要使用 `lua API`（阻塞），要用`ngx lua API`（非阻塞）\n\n\n### 1.5 连接数据库\n> Tips： 数据库操作的代码逻辑看上去是同步的，但是内部实现是异步的\n\n主要有[lua-resty-redis](https://github.com/openresty/lua-resty-redis)和[lua-resty-mysql](https://github.com/openresty/lua-resty-mysql)\n\n### 1.6 OpenResty缓存\n- [share_dict](https://github.com/openresty/lua-nginx-module#ngxshareddict)： 字典缓存，纯内存缓存，可以预设内存大小，多个`worker`共享，需要锁操作\n- [lua-resty-lrucache](https://github.com/openresty/lua-resty-lrucache)：可以预设`key`个数，单个`worker`使用，内存使用翻倍  \n\n缓存失效风暴：在缓存超时时间触发的瞬间，所有的并发请求都同时执行数据库查询操作，数据库压力瞬间变大，下次请求又全部进入缓存，压力瞬间变小，出现两个极值。可以使用[lua-resty-lock](https://github.com/openresty/lua-resty-lock)对数据库查询操作加锁，使数据库查询只进行一次\n\n### 1.7 FFI和第三方模块\n`FFI`：`LuaJIT`的一个库，可以在`LuaJIT`中调用`C`的数据结构和外部`C`函数。如[random.lua](https://github.com/openresty/lua-resty-string/blob/master/lib/resty/random.lua)\n第三方模块：放在`/openresty/lualib/resty`目录下。\n\n### 1.8 子查询\n`ngx.location.capture`和`ngx.location.capture_multi`：在一个`location`内部，对另一个`location`进行请求，因为这不是`http`请求，是`C`级别的调用，所以有开销小的优点; 同时可以降级服务（某一个非关键服务`down`掉，可以继续使用），开放给前端就一个`api`接口即可，在这个`api`接口内做多个子查询，不需要前端调用多个`api`进行查询，避免由于某一个`api`服务挂掉而导致阻塞\n```\n  location = /api/test_parallels {\n  content_by_lua_block {\n  local start_time = ngx.now()\n  local res1, res2 = ngx.location.capture_multi({\n\t\t\t\t  {\"/sum\",{args={a=3, b=8}}},\n\t\t\t\t  {\"/subduction\",{args={a=3, b=8}}},\n\t\t\t\t  })\n  ngx.say(\"status:\", res1.status, \"response:\", res1.body)\n  ngx.say(\"status:\", res2.status, \"response:\", res2.body)\n  ngx.say(\"time used:\", ngx.now()-start_time)\n  }\n  }\n```\n\n### 1.9 执行阶段\n这个是`Nginx`和`OpenResty`独有的概念，不同的阶段有不同的处理行为，可参考[执行阶段概念](https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/phase.html)\n\n## 常用命令\n更改conf后，检查conf文件是否正确：`nginx -t -c [conf]`\n重启：`nginx：nginx -s reload -p [path]`\n\n## Reference\n- [OpenResty 系列课程](http://www.stuq.org/course/1015/study)\n- [OpenResty官网](http://openresty.org/en/)\n- [OpenResty](https://github.com/openresty)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"note-of-openresty-study","published":1,"updated":"2020-07-21T01:40:07.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklumqgfb002v79n5twvhtuwj","content":"<p>观看<a href=\"http://www.stuq.org/course/1015/study\" target=\"_blank\" rel=\"noopener\">OpenResty 系列课程</a>的学习笔记<br><a id=\"more\"></a></p>\n<h2 id=\"用-OpenResty-快乐的搭建高性能服务端\"><a href=\"#用-OpenResty-快乐的搭建高性能服务端\" class=\"headerlink\" title=\"用 OpenResty 快乐的搭建高性能服务端\"></a>用 OpenResty 快乐的搭建高性能服务端</h2><h3 id=\"1-1-OpenResty简介\"><a href=\"#1-1-OpenResty简介\" class=\"headerlink\" title=\"1.1 OpenResty简介\"></a>1.1 OpenResty简介</h3><p>高性能服务端的两个特点：</p>\n<ul>\n<li>缓存（内存&gt;SSD&gt;机械磁盘，本机&gt;网络，进程内&gt;进程外）</li>\n<li>异步非阻塞（事件驱动）</li>\n</ul>\n<h3 id=\"1-2-hello-world\"><a href=\"#1-2-hello-world\" class=\"headerlink\" title=\"1.2 hello world\"></a>1.2 hello world</h3><p>参考资料：</p>\n<ul>\n<li><a href=\"http://openresty.org/en/\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li><a href=\"https://github.com/openresty/lua-nginx-module/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">文档</a></li>\n</ul>\n<p><code>OpenResty = Nginx + LuaJIT（LuaJIT虚拟机嵌在Nginx worker中）</code></p>\n<p><a href=\"https://github.com/openresty/lua-nginx-module#lua_code_cache\" target=\"_blank\" rel=\"noopener\">lua_code_cache</a>：<code>lua</code>代码缓存，默认开启，支持<code>set_by_lua_file</code>和<code>content_by_lua_file</code>等指令和<code>lua</code>模块，关闭后方便开发（不用重启Nginx），生产环境建议开启（影响性能）</p>\n<p><a href=\"https://github.com/openresty/lua-nginx-module#content_by_lua_file\" target=\"_blank\" rel=\"noopener\">content_by_lua_file</a>：指定要执行的<code>lua</code>文件</p>\n<h3 id=\"1-3-OpenResty入门\"><a href=\"#1-3-OpenResty入门\" class=\"headerlink\" title=\"1.3 OpenResty入门\"></a>1.3 OpenResty入门</h3><p>书籍：<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/index.html\" target=\"_blank\" rel=\"noopener\">openresty最佳实践</a></p>\n<p>运行时的错误日志保存在<code>logs/error.log</code>中</p>\n<p><code>nginx.conf</code>示例片段：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">location</span> <span class=\"title\">= /api</span>/random &#123;</span><br><span class=\"line\"> content_by_lua_file lua/random.lua;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>random.lua</code>：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> args = ngx.req.get_uri_args() <span class=\"comment\">--max is 100，set 0 to unlimit</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> salt = args.salt</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> salt <span class=\"keyword\">then</span></span><br><span class=\"line\">  ngx.<span class=\"keyword\">exit</span>(ngx.HTTP_BAD_REQUEST)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">string</span> = ngx.md5(ngx.<span class=\"built_in\">time</span>() .. salt)</span><br><span class=\"line\">ngx.<span class=\"built_in\">say</span>(<span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-4-ngx-lua-API介绍\"><a href=\"#1-4-ngx-lua-API介绍\" class=\"headerlink\" title=\"1.4 ngx lua API介绍\"></a>1.4 ngx lua API介绍</h3><blockquote>\n<p>Tips： 不要使用 <code>lua API</code>（阻塞），要用<code>ngx lua API</code>（非阻塞）</p>\n</blockquote>\n<h3 id=\"1-5-连接数据库\"><a href=\"#1-5-连接数据库\" class=\"headerlink\" title=\"1.5 连接数据库\"></a>1.5 连接数据库</h3><blockquote>\n<p>Tips： 数据库操作的代码逻辑看上去是同步的，但是内部实现是异步的</p>\n</blockquote>\n<p>主要有<a href=\"https://github.com/openresty/lua-resty-redis\" target=\"_blank\" rel=\"noopener\">lua-resty-redis</a>和<a href=\"https://github.com/openresty/lua-resty-mysql\" target=\"_blank\" rel=\"noopener\">lua-resty-mysql</a></p>\n<h3 id=\"1-6-OpenResty缓存\"><a href=\"#1-6-OpenResty缓存\" class=\"headerlink\" title=\"1.6 OpenResty缓存\"></a>1.6 OpenResty缓存</h3><ul>\n<li><a href=\"https://github.com/openresty/lua-nginx-module#ngxshareddict\" target=\"_blank\" rel=\"noopener\">share_dict</a>： 字典缓存，纯内存缓存，可以预设内存大小，多个<code>worker</code>共享，需要锁操作</li>\n<li><a href=\"https://github.com/openresty/lua-resty-lrucache\" target=\"_blank\" rel=\"noopener\">lua-resty-lrucache</a>：可以预设<code>key</code>个数，单个<code>worker</code>使用，内存使用翻倍  </li>\n</ul>\n<p>缓存失效风暴：在缓存超时时间触发的瞬间，所有的并发请求都同时执行数据库查询操作，数据库压力瞬间变大，下次请求又全部进入缓存，压力瞬间变小，出现两个极值。可以使用<a href=\"https://github.com/openresty/lua-resty-lock\" target=\"_blank\" rel=\"noopener\">lua-resty-lock</a>对数据库查询操作加锁，使数据库查询只进行一次</p>\n<h3 id=\"1-7-FFI和第三方模块\"><a href=\"#1-7-FFI和第三方模块\" class=\"headerlink\" title=\"1.7 FFI和第三方模块\"></a>1.7 FFI和第三方模块</h3><p><code>FFI</code>：<code>LuaJIT</code>的一个库，可以在<code>LuaJIT</code>中调用<code>C</code>的数据结构和外部<code>C</code>函数。如<a href=\"https://github.com/openresty/lua-resty-string/blob/master/lib/resty/random.lua\" target=\"_blank\" rel=\"noopener\">random.lua</a><br>第三方模块：放在<code>/openresty/lualib/resty</code>目录下。</p>\n<h3 id=\"1-8-子查询\"><a href=\"#1-8-子查询\" class=\"headerlink\" title=\"1.8 子查询\"></a>1.8 子查询</h3><p><code>ngx.location.capture</code>和<code>ngx.location.capture_multi</code>：在一个<code>location</code>内部，对另一个<code>location</code>进行请求，因为这不是<code>http</code>请求，是<code>C</code>级别的调用，所以有开销小的优点; 同时可以降级服务（某一个非关键服务<code>down</code>掉，可以继续使用），开放给前端就一个<code>api</code>接口即可，在这个<code>api</code>接口内做多个子查询，不需要前端调用多个<code>api</code>进行查询，避免由于某一个<code>api</code>服务挂掉而导致阻塞<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = /api/test_parallels &#123;</span><br><span class=\"line\">content_by_lua_block &#123;</span><br><span class=\"line\">local start_time = ngx.now()</span><br><span class=\"line\">local res1, res2 = ngx.location.capture_multi(&#123;</span><br><span class=\"line\">\t\t  &#123;<span class=\"string\">\"/sum\"</span>,&#123;args=&#123;<span class=\"attribute\">a</span>=3, <span class=\"attribute\">b</span>=8&#125;&#125;&#125;,</span><br><span class=\"line\">\t\t  &#123;<span class=\"string\">\"/subduction\"</span>,&#123;args=&#123;<span class=\"attribute\">a</span>=3, <span class=\"attribute\">b</span>=8&#125;&#125;&#125;,</span><br><span class=\"line\">\t\t  &#125;)</span><br><span class=\"line\">ngx.say(<span class=\"string\">\"status:\"</span>, res1.status, <span class=\"string\">\"response:\"</span>, res1.body)</span><br><span class=\"line\">ngx.say(<span class=\"string\">\"status:\"</span>, res2.status, <span class=\"string\">\"response:\"</span>, res2.body)</span><br><span class=\"line\">ngx.say(<span class=\"string\">\"time used:\"</span>, ngx.now()-start_time)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-9-执行阶段\"><a href=\"#1-9-执行阶段\" class=\"headerlink\" title=\"1.9 执行阶段\"></a>1.9 执行阶段</h3><p>这个是<code>Nginx</code>和<code>OpenResty</code>独有的概念，不同的阶段有不同的处理行为，可参考<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/phase.html\" target=\"_blank\" rel=\"noopener\">执行阶段概念</a></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>更改conf后，检查conf文件是否正确：<code>nginx -t -c [conf]</code><br>重启：<code>nginx：nginx -s reload -p [path]</code></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.stuq.org/course/1015/study\" target=\"_blank\" rel=\"noopener\">OpenResty 系列课程</a></li>\n<li><a href=\"http://openresty.org/en/\" target=\"_blank\" rel=\"noopener\">OpenResty官网</a></li>\n<li><a href=\"https://github.com/openresty\" target=\"_blank\" rel=\"noopener\">OpenResty</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>观看<a href=\"http://www.stuq.org/course/1015/study\" target=\"_blank\" rel=\"noopener\">OpenResty 系列课程</a>的学习笔记<br></p>","more":"<p></p>\n<h2 id=\"用-OpenResty-快乐的搭建高性能服务端\"><a href=\"#用-OpenResty-快乐的搭建高性能服务端\" class=\"headerlink\" title=\"用 OpenResty 快乐的搭建高性能服务端\"></a>用 OpenResty 快乐的搭建高性能服务端</h2><h3 id=\"1-1-OpenResty简介\"><a href=\"#1-1-OpenResty简介\" class=\"headerlink\" title=\"1.1 OpenResty简介\"></a>1.1 OpenResty简介</h3><p>高性能服务端的两个特点：</p>\n<ul>\n<li>缓存（内存&gt;SSD&gt;机械磁盘，本机&gt;网络，进程内&gt;进程外）</li>\n<li>异步非阻塞（事件驱动）</li>\n</ul>\n<h3 id=\"1-2-hello-world\"><a href=\"#1-2-hello-world\" class=\"headerlink\" title=\"1.2 hello world\"></a>1.2 hello world</h3><p>参考资料：</p>\n<ul>\n<li><a href=\"http://openresty.org/en/\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li><a href=\"https://github.com/openresty/lua-nginx-module/blob/master/README.markdown\" target=\"_blank\" rel=\"noopener\">文档</a></li>\n</ul>\n<p><code>OpenResty = Nginx + LuaJIT（LuaJIT虚拟机嵌在Nginx worker中）</code></p>\n<p><a href=\"https://github.com/openresty/lua-nginx-module#lua_code_cache\" target=\"_blank\" rel=\"noopener\">lua_code_cache</a>：<code>lua</code>代码缓存，默认开启，支持<code>set_by_lua_file</code>和<code>content_by_lua_file</code>等指令和<code>lua</code>模块，关闭后方便开发（不用重启Nginx），生产环境建议开启（影响性能）</p>\n<p><a href=\"https://github.com/openresty/lua-nginx-module#content_by_lua_file\" target=\"_blank\" rel=\"noopener\">content_by_lua_file</a>：指定要执行的<code>lua</code>文件</p>\n<h3 id=\"1-3-OpenResty入门\"><a href=\"#1-3-OpenResty入门\" class=\"headerlink\" title=\"1.3 OpenResty入门\"></a>1.3 OpenResty入门</h3><p>书籍：<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/index.html\" target=\"_blank\" rel=\"noopener\">openresty最佳实践</a></p>\n<p>运行时的错误日志保存在<code>logs/error.log</code>中</p>\n<p><code>nginx.conf</code>示例片段：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">location</span> <span class=\"title\">= /api</span>/random &#123;</span><br><span class=\"line\"> content_by_lua_file lua/random.lua;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>random.lua</code>：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> args = ngx.req.get_uri_args() <span class=\"comment\">--max is 100，set 0 to unlimit</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> salt = args.salt</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> salt <span class=\"keyword\">then</span></span><br><span class=\"line\">  ngx.<span class=\"keyword\">exit</span>(ngx.HTTP_BAD_REQUEST)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">string</span> = ngx.md5(ngx.<span class=\"built_in\">time</span>() .. salt)</span><br><span class=\"line\">ngx.<span class=\"built_in\">say</span>(<span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-4-ngx-lua-API介绍\"><a href=\"#1-4-ngx-lua-API介绍\" class=\"headerlink\" title=\"1.4 ngx lua API介绍\"></a>1.4 ngx lua API介绍</h3><blockquote>\n<p>Tips： 不要使用 <code>lua API</code>（阻塞），要用<code>ngx lua API</code>（非阻塞）</p>\n</blockquote>\n<h3 id=\"1-5-连接数据库\"><a href=\"#1-5-连接数据库\" class=\"headerlink\" title=\"1.5 连接数据库\"></a>1.5 连接数据库</h3><blockquote>\n<p>Tips： 数据库操作的代码逻辑看上去是同步的，但是内部实现是异步的</p>\n</blockquote>\n<p>主要有<a href=\"https://github.com/openresty/lua-resty-redis\" target=\"_blank\" rel=\"noopener\">lua-resty-redis</a>和<a href=\"https://github.com/openresty/lua-resty-mysql\" target=\"_blank\" rel=\"noopener\">lua-resty-mysql</a></p>\n<h3 id=\"1-6-OpenResty缓存\"><a href=\"#1-6-OpenResty缓存\" class=\"headerlink\" title=\"1.6 OpenResty缓存\"></a>1.6 OpenResty缓存</h3><ul>\n<li><a href=\"https://github.com/openresty/lua-nginx-module#ngxshareddict\" target=\"_blank\" rel=\"noopener\">share_dict</a>： 字典缓存，纯内存缓存，可以预设内存大小，多个<code>worker</code>共享，需要锁操作</li>\n<li><a href=\"https://github.com/openresty/lua-resty-lrucache\" target=\"_blank\" rel=\"noopener\">lua-resty-lrucache</a>：可以预设<code>key</code>个数，单个<code>worker</code>使用，内存使用翻倍  </li>\n</ul>\n<p>缓存失效风暴：在缓存超时时间触发的瞬间，所有的并发请求都同时执行数据库查询操作，数据库压力瞬间变大，下次请求又全部进入缓存，压力瞬间变小，出现两个极值。可以使用<a href=\"https://github.com/openresty/lua-resty-lock\" target=\"_blank\" rel=\"noopener\">lua-resty-lock</a>对数据库查询操作加锁，使数据库查询只进行一次</p>\n<h3 id=\"1-7-FFI和第三方模块\"><a href=\"#1-7-FFI和第三方模块\" class=\"headerlink\" title=\"1.7 FFI和第三方模块\"></a>1.7 FFI和第三方模块</h3><p><code>FFI</code>：<code>LuaJIT</code>的一个库，可以在<code>LuaJIT</code>中调用<code>C</code>的数据结构和外部<code>C</code>函数。如<a href=\"https://github.com/openresty/lua-resty-string/blob/master/lib/resty/random.lua\" target=\"_blank\" rel=\"noopener\">random.lua</a><br>第三方模块：放在<code>/openresty/lualib/resty</code>目录下。</p>\n<h3 id=\"1-8-子查询\"><a href=\"#1-8-子查询\" class=\"headerlink\" title=\"1.8 子查询\"></a>1.8 子查询</h3><p><code>ngx.location.capture</code>和<code>ngx.location.capture_multi</code>：在一个<code>location</code>内部，对另一个<code>location</code>进行请求，因为这不是<code>http</code>请求，是<code>C</code>级别的调用，所以有开销小的优点; 同时可以降级服务（某一个非关键服务<code>down</code>掉，可以继续使用），开放给前端就一个<code>api</code>接口即可，在这个<code>api</code>接口内做多个子查询，不需要前端调用多个<code>api</code>进行查询，避免由于某一个<code>api</code>服务挂掉而导致阻塞<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = /api/test_parallels &#123;</span><br><span class=\"line\">content_by_lua_block &#123;</span><br><span class=\"line\">local start_time = ngx.now()</span><br><span class=\"line\">local res1, res2 = ngx.location.capture_multi(&#123;</span><br><span class=\"line\">\t\t  &#123;<span class=\"string\">\"/sum\"</span>,&#123;args=&#123;<span class=\"attribute\">a</span>=3, <span class=\"attribute\">b</span>=8&#125;&#125;&#125;,</span><br><span class=\"line\">\t\t  &#123;<span class=\"string\">\"/subduction\"</span>,&#123;args=&#123;<span class=\"attribute\">a</span>=3, <span class=\"attribute\">b</span>=8&#125;&#125;&#125;,</span><br><span class=\"line\">\t\t  &#125;)</span><br><span class=\"line\">ngx.say(<span class=\"string\">\"status:\"</span>, res1.status, <span class=\"string\">\"response:\"</span>, res1.body)</span><br><span class=\"line\">ngx.say(<span class=\"string\">\"status:\"</span>, res2.status, <span class=\"string\">\"response:\"</span>, res2.body)</span><br><span class=\"line\">ngx.say(<span class=\"string\">\"time used:\"</span>, ngx.now()-start_time)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-9-执行阶段\"><a href=\"#1-9-执行阶段\" class=\"headerlink\" title=\"1.9 执行阶段\"></a>1.9 执行阶段</h3><p>这个是<code>Nginx</code>和<code>OpenResty</code>独有的概念，不同的阶段有不同的处理行为，可参考<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/phase.html\" target=\"_blank\" rel=\"noopener\">执行阶段概念</a></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>更改conf后，检查conf文件是否正确：<code>nginx -t -c [conf]</code><br>重启：<code>nginx：nginx -s reload -p [path]</code></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.stuq.org/course/1015/study\" target=\"_blank\" rel=\"noopener\">OpenResty 系列课程</a></li>\n<li><a href=\"http://openresty.org/en/\" target=\"_blank\" rel=\"noopener\">OpenResty官网</a></li>\n<li><a href=\"https://github.com/openresty\" target=\"_blank\" rel=\"noopener\">OpenResty</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"科普|3.5mm耳机国标和美标","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-09-20T03:37:40.000Z","_content":"\n现在3.5mm规格的耳机已经普遍使用，但是用户会发现一些国外厂家的耳机并不适用国产手机，下面就为大家科普一下，解开这个迷题。\n\n<!--more-->\n\n## 区别\n\n- 美标也称为国际标准(CTIA)，从头开始分别是左声道/右声道/地线/MIC。目前在市场上最流行\n\n- 国标(OMTP)，从头开始分别是左声道/右声道/MIC/地线。\n\n![headset](headset.png)\n\n从上图可以发现美标和国标的差别就在于MIC和地线的位置不同，导致会出现在听音乐时只有伴奏没有人声，只有按住接听键才正常的现象。\n\n另外一个区别是，美标的中间三节隔离绝缘圈，一般是都是白色的。而国标为了有所分别，一般是都是黑色的，大部分耳机可以通过此方法来区别。\n\n\n## 适用范围\n\n- 美标耳机适用手机范围：苹果（全系列）、小米（全系列）、魅族（全系列）、索尼（全系列）、LG（全系列）、HTC官方产品、三星（咨询客服）、摩托罗拉部分机型（ME865）、联想W101、诺基亚Lumia和WP7系列、华为(C8812/U9200)、亿通T900等。\n\n- 国标耳机适用手机范围：诺基亚、索尼爱立信（全系列）、中兴（全系列）、步步高（全系列）、酷派（全系列）、HTC 非官方产品（A3380、A3360、T9188、A9188、Z510D）、三星旧产品（i8910、M3510C、M7500、F278、F700、F408、F490、G810、G818、G818E、i550W、8510、i560、S8000C、i8000、M2710C、i7500U、i9000、i6500U、F809、i8000、F859）、摩托罗拉XT531、联想A520/A750/P700、OPPO（全系列）等国产系列手机。\n\n> 若发现国标/美标不适配自己的手机，某宝上面有转接线可以买，可以通过转换国标/美标。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/standard-of-headphone.md","raw":"---\ntitle: 科普|3.5mm耳机国标和美标\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags: headset\ndate: 2016-09-20 11:37:40\ncategories: 科普\n---\n\n现在3.5mm规格的耳机已经普遍使用，但是用户会发现一些国外厂家的耳机并不适用国产手机，下面就为大家科普一下，解开这个迷题。\n\n<!--more-->\n\n## 区别\n\n- 美标也称为国际标准(CTIA)，从头开始分别是左声道/右声道/地线/MIC。目前在市场上最流行\n\n- 国标(OMTP)，从头开始分别是左声道/右声道/MIC/地线。\n\n![headset](headset.png)\n\n从上图可以发现美标和国标的差别就在于MIC和地线的位置不同，导致会出现在听音乐时只有伴奏没有人声，只有按住接听键才正常的现象。\n\n另外一个区别是，美标的中间三节隔离绝缘圈，一般是都是白色的。而国标为了有所分别，一般是都是黑色的，大部分耳机可以通过此方法来区别。\n\n\n## 适用范围\n\n- 美标耳机适用手机范围：苹果（全系列）、小米（全系列）、魅族（全系列）、索尼（全系列）、LG（全系列）、HTC官方产品、三星（咨询客服）、摩托罗拉部分机型（ME865）、联想W101、诺基亚Lumia和WP7系列、华为(C8812/U9200)、亿通T900等。\n\n- 国标耳机适用手机范围：诺基亚、索尼爱立信（全系列）、中兴（全系列）、步步高（全系列）、酷派（全系列）、HTC 非官方产品（A3380、A3360、T9188、A9188、Z510D）、三星旧产品（i8910、M3510C、M7500、F278、F700、F408、F490、G810、G818、G818E、i550W、8510、i560、S8000C、i8000、M2710C、i7500U、i9000、i6500U、F809、i8000、F859）、摩托罗拉XT531、联想A520/A750/P700、OPPO（全系列）等国产系列手机。\n\n> 若发现国标/美标不适配自己的手机，某宝上面有转接线可以买，可以通过转换国标/美标。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"standard-of-headphone","published":1,"updated":"2019-07-24T03:25:31.174Z","layout":"post","photos":[],"link":"","_id":"cklumqgfc002y79n5317kiczm","content":"<p>现在3.5mm规格的耳机已经普遍使用，但是用户会发现一些国外厂家的耳机并不适用国产手机，下面就为大家科普一下，解开这个迷题。</p>\n<a id=\"more\"></a>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ul>\n<li><p>美标也称为国际标准(CTIA)，从头开始分别是左声道/右声道/地线/MIC。目前在市场上最流行</p>\n</li>\n<li><p>国标(OMTP)，从头开始分别是左声道/右声道/MIC/地线。</p>\n</li>\n</ul>\n<p><img src=\"/2016/09/20/standard-of-headphone/headset.png\" alt=\"headset\"></p>\n<p>从上图可以发现美标和国标的差别就在于MIC和地线的位置不同，导致会出现在听音乐时只有伴奏没有人声，只有按住接听键才正常的现象。</p>\n<p>另外一个区别是，美标的中间三节隔离绝缘圈，一般是都是白色的。而国标为了有所分别，一般是都是黑色的，大部分耳机可以通过此方法来区别。</p>\n<h2 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h2><ul>\n<li><p>美标耳机适用手机范围：苹果（全系列）、小米（全系列）、魅族（全系列）、索尼（全系列）、LG（全系列）、HTC官方产品、三星（咨询客服）、摩托罗拉部分机型（ME865）、联想W101、诺基亚Lumia和WP7系列、华为(C8812/U9200)、亿通T900等。</p>\n</li>\n<li><p>国标耳机适用手机范围：诺基亚、索尼爱立信（全系列）、中兴（全系列）、步步高（全系列）、酷派（全系列）、HTC 非官方产品（A3380、A3360、T9188、A9188、Z510D）、三星旧产品（i8910、M3510C、M7500、F278、F700、F408、F490、G810、G818、G818E、i550W、8510、i560、S8000C、i8000、M2710C、i7500U、i9000、i6500U、F809、i8000、F859）、摩托罗拉XT531、联想A520/A750/P700、OPPO（全系列）等国产系列手机。</p>\n</li>\n</ul>\n<blockquote>\n<p>若发现国标/美标不适配自己的手机，某宝上面有转接线可以买，可以通过转换国标/美标。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>现在3.5mm规格的耳机已经普遍使用，但是用户会发现一些国外厂家的耳机并不适用国产手机，下面就为大家科普一下，解开这个迷题。</p>","more":"<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ul>\n<li><p>美标也称为国际标准(CTIA)，从头开始分别是左声道/右声道/地线/MIC。目前在市场上最流行</p>\n</li>\n<li><p>国标(OMTP)，从头开始分别是左声道/右声道/MIC/地线。</p>\n</li>\n</ul>\n<p><img src=\"/2016/09/20/standard-of-headphone/headset.png\" alt=\"headset\"></p>\n<p>从上图可以发现美标和国标的差别就在于MIC和地线的位置不同，导致会出现在听音乐时只有伴奏没有人声，只有按住接听键才正常的现象。</p>\n<p>另外一个区别是，美标的中间三节隔离绝缘圈，一般是都是白色的。而国标为了有所分别，一般是都是黑色的，大部分耳机可以通过此方法来区别。</p>\n<h2 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h2><ul>\n<li><p>美标耳机适用手机范围：苹果（全系列）、小米（全系列）、魅族（全系列）、索尼（全系列）、LG（全系列）、HTC官方产品、三星（咨询客服）、摩托罗拉部分机型（ME865）、联想W101、诺基亚Lumia和WP7系列、华为(C8812/U9200)、亿通T900等。</p>\n</li>\n<li><p>国标耳机适用手机范围：诺基亚、索尼爱立信（全系列）、中兴（全系列）、步步高（全系列）、酷派（全系列）、HTC 非官方产品（A3380、A3360、T9188、A9188、Z510D）、三星旧产品（i8910、M3510C、M7500、F278、F700、F408、F490、G810、G818、G818E、i550W、8510、i560、S8000C、i8000、M2710C、i7500U、i9000、i6500U、F809、i8000、F859）、摩托罗拉XT531、联想A520/A750/P700、OPPO（全系列）等国产系列手机。</p>\n</li>\n</ul>\n<blockquote>\n<p>若发现国标/美标不适配自己的手机，某宝上面有转接线可以买，可以通过转换国标/美标。</p>\n</blockquote>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"深究strtok系列函数","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2019-05-21T07:59:44.000Z","_content":"\n本文通过分析源码，深究`GLIBC`中`strtok`和`strtok_r`函数的实现原理和使用过程中的注意事项。\n\n-----\n\n<!--more-->\n\n## 函数说明\n```\n#include <string.h>\n\nchar *strtok(char *str, const char *delim);\nchar *strtok_r(char *str, const char *delim, char **saveptr);\n```\n\n### 说明\n- `strtok`以包含在`delim`中的字符为分割符，将`str`分割成一个个子串；若`str`为空值`NULL`，则函数内部保存的静态指针（指向上一次分割位置后一个字节）在下一次调用中将作为起始位置。\n- `strtok_r`功能同`strtok`，不过其将`strtok`函数内部保存的指针显示化，通过`saveptr`输入，以`saveptr`作为分割的起始位置。\n\n### 参数\n- `str`: 待分割的源字符串\n- `delim`: 分割符字符集合\n- `saveptr`: 一个指向`char *`的指针变量，保存分割时的上下文\n\n### 返回值\n- 若未提取到子串，返回值为指向源字符串首地址的指针，可以完整打印源字符串\n- 若提取到子串，返回值为提取出的子串的指针，这个指针指向的是子串在源字符串中的起始位置，因为子串末尾的下一个字符在提取前为分割符，提取后被修改成了`'/0’`，所以可以成功打印子串的内容\n- 若在成功提取到子串后，没有可以被分割的子串，返回NULL\n\n## 示例\n```\n#include <stdio.h>\n#include <string.h>\n\nint main(void) {\n  char str[12] = \"hello,world\\0\";\n  char *token = strtok(str, \",\");\n\n  while (token != NULL) {\n    printf(\"%s\\n\", token);\n    token = strtok(NULL, \",\");\n  }\n   \n  return 0;\n}\n```\n\n## 使用注意事项\n### 不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化\n```\nchar str[12] = \"hello,world\\0\";\nprintf(\"str before strtok: %s\\n\", str);\nchar *token = strtok(str, \",\");\nprintf(\"str after strtok: %s\\n\", str);\n```\n```\n$ str before strtok: hello,world\n$ str after strtok: hello\n```\n如上实验，`str`的值，在对其做`strtok`操作之后，发生了变化，分割符之后的内容不见了。事实上，`strtok`函数是根据输入的分割符（即`,`），找到其首次出现的位置（即`world`之前的`,`），将其修改为`'/0’`。\n\n### 第一个参数不可为字符串常量\n因为`strtok`函数会修改源字符串，所以第一个参数不可为字符串常量，不然程序会抛出异常。\n\n### 若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值`NULL`\n```\nchar str[12] = \"hello,world\\0\";\nchar *token = strtok(str, \",\");   \nwhile (token != NULL) {\n    printf(\"%s\\n\", token);\n    token = strtok(NULL, \",\");\n}\n```\n```\n$ hello\n$ world\n```\n在第一次提取子串时，`strtok`用一个指针指向了分割符的下一位，即'w’所在的位置，后续的提取给`strtok`的第一个参数传递了空值`NULL`，`strtok`会从上一次调用隐式保存的位置，继续分割字符串。\n\n### 第二个参数是分割符的集合，支持多个分割符\n```\nchar str[12] = \"hello,world\\0\";\nchar *token = strtok(str, \",l\");\nprintf(\"%s\\n\", token);\n```\n```\n$ he\n```\n由上可见，`strtok`函数在分割字符串时，不是完整匹配第二个参数传入的分割符，而是使用包含在分割符集合中的字符进行匹配。\n\n### 若首字符为分割符，则会被忽略\n```\nchar str[13] = \",hello,world\\0\";\nchar *token = strtok(str, \",\");\nprintf(\"%s\\n\", token);\n```\n```\n$ hello\n```\n如上所示，若首字符为分割符，`strtok`采用了比常规处理更快的方式，直接跳过了首字符。\n\n### `strtok`为不可重入函数，使用`strtok_r`更灵活和安全\n`strtok`函数在内部使用了静态变量，即用静态指针保存了下一次调用的起始位置，对调用者不可见；`strtok_r`则将`strtok`内部隐式保存的指针，以参数的形式由调用者进行传递、保存甚至是修改，使函数更具灵活性和安全性；此外，在`windows`也有分割字符串安全函数`strtok_s`。\n\n## 源码\nstrtok.c:\n```\n/* Copyright (C) 1991-2018 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <http://www.gnu.org/licenses/>.  */\n\n#include <string.h>\n\n\n/* Parse S into tokens separated by characters in DELIM.\n   If S is NULL, the last string strtok() was called with is\n   used.  For example:\n\tchar s[] = \"-abc-=-def\";\n\tx = strtok(s, \"-\");\t\t// x = \"abc\"\n\tx = strtok(NULL, \"-=\");\t\t// x = \"def\"\n\tx = strtok(NULL, \"=\");\t\t// x = NULL\n\t\t// s = \"abc\\0=-def\\0\"\n*/\nchar *\nstrtok (char *s, const char *delim)\n{\n  static char *olds;\n  return __strtok_r (s, delim, &olds);\n}\n```\n\nstrtok_r.c:\n```\n/* Reentrant string tokenizer.  Generic version.\n   Copyright (C) 1991-2018 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <http://www.gnu.org/licenses/>.  */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#include <string.h>\n\n#ifndef _LIBC\n/* Get specification.  */\n# include \"strtok_r.h\"\n# define __strtok_r strtok_r\n#endif\n\n/* Parse S into tokens separated by characters in DELIM.\n   If S is NULL, the saved pointer in SAVE_PTR is used as\n   the next starting point.  For example:\n\tchar s[] = \"-abc-=-def\";\n\tchar *sp;\n\tx = strtok_r(s, \"-\", &sp);\t// x = \"abc\", sp = \"=-def\"\n\tx = strtok_r(NULL, \"-=\", &sp);\t// x = \"def\", sp = NULL\n\tx = strtok_r(NULL, \"=\", &sp);\t// x = NULL\n\t\t// s = \"abc\\0-def\\0\"\n*/\nchar *\n__strtok_r (char *s, const char *delim, char **save_ptr)\n{\n  char *end;\n\n  if (s == NULL)\n    s = *save_ptr;\n\n  if (*s == '\\0')\n    {\n      *save_ptr = s;\n      return NULL;\n    }\n\n  /* Scan leading delimiters.  */\n  s += strspn (s, delim);\n  if (*s == '\\0')\n    {\n      *save_ptr = s;\n      return NULL;\n    }\n\n  /* Find the end of the token.  */\n  end = s + strcspn (s, delim);\n  if (*end == '\\0')\n    {\n      *save_ptr = end;\n      return s;\n    }\n\n  /* Terminate the token and make *SAVE_PTR point past it.  */\n  *end = '\\0';\n  *save_ptr = end + 1;\n  return s;\n}\n#ifdef weak_alias\nlibc_hidden_def (__strtok_r)\nweak_alias (__strtok_r, strtok_r)\n#endif\n```\n\n## Reference\n- [C语言线程安全:不可重入函数汇总](https://vimsky.com/article/3185.html)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/man-strtok.md","raw":"---\ntitle: 深究strtok系列函数\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - strtok\n  - strtok_r\ndate: 2019-05-21 15:59:44\ncategories: C/C++\n---\n\n本文通过分析源码，深究`GLIBC`中`strtok`和`strtok_r`函数的实现原理和使用过程中的注意事项。\n\n-----\n\n<!--more-->\n\n## 函数说明\n```\n#include <string.h>\n\nchar *strtok(char *str, const char *delim);\nchar *strtok_r(char *str, const char *delim, char **saveptr);\n```\n\n### 说明\n- `strtok`以包含在`delim`中的字符为分割符，将`str`分割成一个个子串；若`str`为空值`NULL`，则函数内部保存的静态指针（指向上一次分割位置后一个字节）在下一次调用中将作为起始位置。\n- `strtok_r`功能同`strtok`，不过其将`strtok`函数内部保存的指针显示化，通过`saveptr`输入，以`saveptr`作为分割的起始位置。\n\n### 参数\n- `str`: 待分割的源字符串\n- `delim`: 分割符字符集合\n- `saveptr`: 一个指向`char *`的指针变量，保存分割时的上下文\n\n### 返回值\n- 若未提取到子串，返回值为指向源字符串首地址的指针，可以完整打印源字符串\n- 若提取到子串，返回值为提取出的子串的指针，这个指针指向的是子串在源字符串中的起始位置，因为子串末尾的下一个字符在提取前为分割符，提取后被修改成了`'/0’`，所以可以成功打印子串的内容\n- 若在成功提取到子串后，没有可以被分割的子串，返回NULL\n\n## 示例\n```\n#include <stdio.h>\n#include <string.h>\n\nint main(void) {\n  char str[12] = \"hello,world\\0\";\n  char *token = strtok(str, \",\");\n\n  while (token != NULL) {\n    printf(\"%s\\n\", token);\n    token = strtok(NULL, \",\");\n  }\n   \n  return 0;\n}\n```\n\n## 使用注意事项\n### 不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化\n```\nchar str[12] = \"hello,world\\0\";\nprintf(\"str before strtok: %s\\n\", str);\nchar *token = strtok(str, \",\");\nprintf(\"str after strtok: %s\\n\", str);\n```\n```\n$ str before strtok: hello,world\n$ str after strtok: hello\n```\n如上实验，`str`的值，在对其做`strtok`操作之后，发生了变化，分割符之后的内容不见了。事实上，`strtok`函数是根据输入的分割符（即`,`），找到其首次出现的位置（即`world`之前的`,`），将其修改为`'/0’`。\n\n### 第一个参数不可为字符串常量\n因为`strtok`函数会修改源字符串，所以第一个参数不可为字符串常量，不然程序会抛出异常。\n\n### 若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值`NULL`\n```\nchar str[12] = \"hello,world\\0\";\nchar *token = strtok(str, \",\");   \nwhile (token != NULL) {\n    printf(\"%s\\n\", token);\n    token = strtok(NULL, \",\");\n}\n```\n```\n$ hello\n$ world\n```\n在第一次提取子串时，`strtok`用一个指针指向了分割符的下一位，即'w’所在的位置，后续的提取给`strtok`的第一个参数传递了空值`NULL`，`strtok`会从上一次调用隐式保存的位置，继续分割字符串。\n\n### 第二个参数是分割符的集合，支持多个分割符\n```\nchar str[12] = \"hello,world\\0\";\nchar *token = strtok(str, \",l\");\nprintf(\"%s\\n\", token);\n```\n```\n$ he\n```\n由上可见，`strtok`函数在分割字符串时，不是完整匹配第二个参数传入的分割符，而是使用包含在分割符集合中的字符进行匹配。\n\n### 若首字符为分割符，则会被忽略\n```\nchar str[13] = \",hello,world\\0\";\nchar *token = strtok(str, \",\");\nprintf(\"%s\\n\", token);\n```\n```\n$ hello\n```\n如上所示，若首字符为分割符，`strtok`采用了比常规处理更快的方式，直接跳过了首字符。\n\n### `strtok`为不可重入函数，使用`strtok_r`更灵活和安全\n`strtok`函数在内部使用了静态变量，即用静态指针保存了下一次调用的起始位置，对调用者不可见；`strtok_r`则将`strtok`内部隐式保存的指针，以参数的形式由调用者进行传递、保存甚至是修改，使函数更具灵活性和安全性；此外，在`windows`也有分割字符串安全函数`strtok_s`。\n\n## 源码\nstrtok.c:\n```\n/* Copyright (C) 1991-2018 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <http://www.gnu.org/licenses/>.  */\n\n#include <string.h>\n\n\n/* Parse S into tokens separated by characters in DELIM.\n   If S is NULL, the last string strtok() was called with is\n   used.  For example:\n\tchar s[] = \"-abc-=-def\";\n\tx = strtok(s, \"-\");\t\t// x = \"abc\"\n\tx = strtok(NULL, \"-=\");\t\t// x = \"def\"\n\tx = strtok(NULL, \"=\");\t\t// x = NULL\n\t\t// s = \"abc\\0=-def\\0\"\n*/\nchar *\nstrtok (char *s, const char *delim)\n{\n  static char *olds;\n  return __strtok_r (s, delim, &olds);\n}\n```\n\nstrtok_r.c:\n```\n/* Reentrant string tokenizer.  Generic version.\n   Copyright (C) 1991-2018 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <http://www.gnu.org/licenses/>.  */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#include <string.h>\n\n#ifndef _LIBC\n/* Get specification.  */\n# include \"strtok_r.h\"\n# define __strtok_r strtok_r\n#endif\n\n/* Parse S into tokens separated by characters in DELIM.\n   If S is NULL, the saved pointer in SAVE_PTR is used as\n   the next starting point.  For example:\n\tchar s[] = \"-abc-=-def\";\n\tchar *sp;\n\tx = strtok_r(s, \"-\", &sp);\t// x = \"abc\", sp = \"=-def\"\n\tx = strtok_r(NULL, \"-=\", &sp);\t// x = \"def\", sp = NULL\n\tx = strtok_r(NULL, \"=\", &sp);\t// x = NULL\n\t\t// s = \"abc\\0-def\\0\"\n*/\nchar *\n__strtok_r (char *s, const char *delim, char **save_ptr)\n{\n  char *end;\n\n  if (s == NULL)\n    s = *save_ptr;\n\n  if (*s == '\\0')\n    {\n      *save_ptr = s;\n      return NULL;\n    }\n\n  /* Scan leading delimiters.  */\n  s += strspn (s, delim);\n  if (*s == '\\0')\n    {\n      *save_ptr = s;\n      return NULL;\n    }\n\n  /* Find the end of the token.  */\n  end = s + strcspn (s, delim);\n  if (*end == '\\0')\n    {\n      *save_ptr = end;\n      return s;\n    }\n\n  /* Terminate the token and make *SAVE_PTR point past it.  */\n  *end = '\\0';\n  *save_ptr = end + 1;\n  return s;\n}\n#ifdef weak_alias\nlibc_hidden_def (__strtok_r)\nweak_alias (__strtok_r, strtok_r)\n#endif\n```\n\n## Reference\n- [C语言线程安全:不可重入函数汇总](https://vimsky.com/article/3185.html)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"man-strtok","published":1,"updated":"2019-07-24T03:24:24.354Z","layout":"post","photos":[],"link":"","_id":"cklumqgfd003279n5zlyufddn","content":"<p>本文通过分析源码，深究<code>GLIBC</code>中<code>strtok</code>和<code>strtok_r</code>函数的实现原理和使用过程中的注意事项。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">strtok</span><span class=\"params\">(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *delim)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">strtok_r</span><span class=\"params\">(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *delim, <span class=\"keyword\">char</span> **saveptr)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li><code>strtok</code>以包含在<code>delim</code>中的字符为分割符，将<code>str</code>分割成一个个子串；若<code>str</code>为空值<code>NULL</code>，则函数内部保存的静态指针（指向上一次分割位置后一个字节）在下一次调用中将作为起始位置。</li>\n<li><code>strtok_r</code>功能同<code>strtok</code>，不过其将<code>strtok</code>函数内部保存的指针显示化，通过<code>saveptr</code>输入，以<code>saveptr</code>作为分割的起始位置。</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><code>str</code>: 待分割的源字符串</li>\n<li><code>delim</code>: 分割符字符集合</li>\n<li><code>saveptr</code>: 一个指向<code>char *</code>的指针变量，保存分割时的上下文</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><ul>\n<li>若未提取到子串，返回值为指向源字符串首地址的指针，可以完整打印源字符串</li>\n<li>若提取到子串，返回值为提取出的子串的指针，这个指针指向的是子串在源字符串中的起始位置，因为子串末尾的下一个字符在提取前为分割符，提取后被修改成了<code>&#39;/0’</code>，所以可以成功打印子串的内容</li>\n<li>若在成功提取到子串后，没有可以被分割的子串，返回NULL</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> str[<span class=\"number\">12</span>] = <span class=\"string\">\"hello,world\\0\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *token = strtok(str, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, token);</span><br><span class=\"line\">    token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用注意事项\"><a href=\"#使用注意事项\" class=\"headerlink\" title=\"使用注意事项\"></a>使用注意事项</h2><h3 id=\"不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化\"><a href=\"#不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化\" class=\"headerlink\" title=\"不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化\"></a>不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"keyword\">str</span>[<span class=\"number\">12</span>] = <span class=\"string\">\"hello,world\\0\"</span>;</span><br><span class=\"line\">printf(<span class=\"string\">\"str before strtok: %s\\n\"</span>, <span class=\"keyword\">str</span>);</span><br><span class=\"line\"><span class=\"keyword\">char</span> *token = strtok(<span class=\"keyword\">str</span>, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">printf(<span class=\"string\">\"str after strtok: %s\\n\"</span>, <span class=\"keyword\">str</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">str </span><span class=\"keyword\">before </span><span class=\"keyword\">strtok: </span>hello,world</span><br><span class=\"line\">$ <span class=\"keyword\">str </span>after <span class=\"keyword\">strtok: </span>hello</span><br></pre></td></tr></table></figure>\n<p>如上实验，<code>str</code>的值，在对其做<code>strtok</code>操作之后，发生了变化，分割符之后的内容不见了。事实上，<code>strtok</code>函数是根据输入的分割符（即<code>,</code>），找到其首次出现的位置（即<code>world</code>之前的<code>,</code>），将其修改为<code>&#39;/0’</code>。</p>\n<h3 id=\"第一个参数不可为字符串常量\"><a href=\"#第一个参数不可为字符串常量\" class=\"headerlink\" title=\"第一个参数不可为字符串常量\"></a>第一个参数不可为字符串常量</h3><p>因为<code>strtok</code>函数会修改源字符串，所以第一个参数不可为字符串常量，不然程序会抛出异常。</p>\n<h3 id=\"若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值NULL\"><a href=\"#若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值NULL\" class=\"headerlink\" title=\"若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值NULL\"></a>若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值<code>NULL</code></h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[12] = <span class=\"string\">\"hello,world\\0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *<span class=\"keyword\">token</span> = strtok(str, <span class=\"string\">\",\"</span>);   </span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">token</span> != NULL) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"%s\\n\"</span>, <span class=\"keyword\">token</span>);</span><br><span class=\"line\">    <span class=\"keyword\">token</span> = strtok(NULL, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hello</span><br><span class=\"line\"><span class=\"variable\">$ </span>world</span><br></pre></td></tr></table></figure>\n<p>在第一次提取子串时，<code>strtok</code>用一个指针指向了分割符的下一位，即’w’所在的位置，后续的提取给<code>strtok</code>的第一个参数传递了空值<code>NULL</code>，<code>strtok</code>会从上一次调用隐式保存的位置，继续分割字符串。</p>\n<h3 id=\"第二个参数是分割符的集合，支持多个分割符\"><a href=\"#第二个参数是分割符的集合，支持多个分割符\" class=\"headerlink\" title=\"第二个参数是分割符的集合，支持多个分割符\"></a>第二个参数是分割符的集合，支持多个分割符</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"keyword\">str</span>[<span class=\"number\">12</span>] = <span class=\"string\">\"hello,world\\0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *token = strtok(<span class=\"keyword\">str</span>, <span class=\"string\">\",l\"</span>);</span><br><span class=\"line\">printf(<span class=\"string\">\"%s\\n\"</span>, token);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>he</span><br></pre></td></tr></table></figure>\n<p>由上可见，<code>strtok</code>函数在分割字符串时，不是完整匹配第二个参数传入的分割符，而是使用包含在分割符集合中的字符进行匹配。</p>\n<h3 id=\"若首字符为分割符，则会被忽略\"><a href=\"#若首字符为分割符，则会被忽略\" class=\"headerlink\" title=\"若首字符为分割符，则会被忽略\"></a>若首字符为分割符，则会被忽略</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"keyword\">str</span>[<span class=\"number\">13</span>] = <span class=\"string\">\",hello,world\\0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *token = strtok(<span class=\"keyword\">str</span>, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">printf(<span class=\"string\">\"%s\\n\"</span>, token);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hello</span><br></pre></td></tr></table></figure>\n<p>如上所示，若首字符为分割符，<code>strtok</code>采用了比常规处理更快的方式，直接跳过了首字符。</p>\n<h3 id=\"strtok为不可重入函数，使用strtok-r更灵活和安全\"><a href=\"#strtok为不可重入函数，使用strtok-r更灵活和安全\" class=\"headerlink\" title=\"strtok为不可重入函数，使用strtok_r更灵活和安全\"></a><code>strtok</code>为不可重入函数，使用<code>strtok_r</code>更灵活和安全</h3><p><code>strtok</code>函数在内部使用了静态变量，即用静态指针保存了下一次调用的起始位置，对调用者不可见；<code>strtok_r</code>则将<code>strtok</code>内部隐式保存的指针，以参数的形式由调用者进行传递、保存甚至是修改，使函数更具灵活性和安全性；此外，在<code>windows</code>也有分割字符串安全函数<code>strtok_s</code>。</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p>strtok.c:<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* <span class=\"type\">Copyright</span> (C) <span class=\"number\">1991</span>-<span class=\"number\">2018</span> <span class=\"type\">Free</span> <span class=\"type\">Software</span> <span class=\"type\">Foundation</span>, <span class=\"type\">Inc</span>.</span><br><span class=\"line\">   <span class=\"type\">This</span> file <span class=\"keyword\">is</span> part <span class=\"keyword\">of</span> the <span class=\"type\">GNU</span> C <span class=\"type\">Library</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">The</span> <span class=\"type\">GNU</span> C <span class=\"type\">Library</span> <span class=\"keyword\">is</span> free software; you can redistribute it <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span></span><br><span class=\"line\">   modify it under the terms <span class=\"keyword\">of</span> the <span class=\"type\">GNU</span> <span class=\"type\">Lesser</span> <span class=\"type\">General</span> <span class=\"type\">Public</span></span><br><span class=\"line\">   <span class=\"type\">License</span> <span class=\"keyword\">as</span> published by the <span class=\"type\">Free</span> <span class=\"type\">Software</span> <span class=\"type\">Foundation</span>; either</span><br><span class=\"line\">   version <span class=\"number\">2</span>.<span class=\"number\">1</span> <span class=\"keyword\">of</span> the <span class=\"type\">License</span>, <span class=\"keyword\">or</span> (at your option) <span class=\"built_in\">any</span> later version.</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">The</span> <span class=\"type\">GNU</span> C <span class=\"type\">Library</span> <span class=\"keyword\">is</span> distributed <span class=\"keyword\">in</span> the hope that it will be useful,</span><br><span class=\"line\">   but <span class=\"type\">WITHOUT</span> <span class=\"type\">ANY</span> <span class=\"type\">WARRANTY</span>; <span class=\"keyword\">without</span> even the implied warranty <span class=\"keyword\">of</span></span><br><span class=\"line\">   <span class=\"type\">MERCHANTABILITY</span> <span class=\"keyword\">or</span> <span class=\"type\">FITNESS</span> <span class=\"type\">FOR</span> A <span class=\"type\">PARTICULAR</span> <span class=\"type\">PURPOSE</span>.  <span class=\"type\">See</span> the <span class=\"type\">GNU</span></span><br><span class=\"line\">   <span class=\"type\">Lesser</span> <span class=\"type\">General</span> <span class=\"type\">Public</span> <span class=\"type\">License</span> <span class=\"keyword\">for</span> more details.</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">You</span> should have received a copy <span class=\"keyword\">of</span> the <span class=\"type\">GNU</span> <span class=\"type\">Lesser</span> <span class=\"type\">General</span> <span class=\"type\">Public</span></span><br><span class=\"line\">   <span class=\"type\">License</span> along <span class=\"keyword\">with</span> the <span class=\"type\">GNU</span> C <span class=\"type\">Library</span>; <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>, see</span><br><span class=\"line\">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* <span class=\"type\">Parse</span> S into tokens separated by characters <span class=\"keyword\">in</span> <span class=\"type\">DELIM</span>.</span><br><span class=\"line\">   <span class=\"type\">If</span> S <span class=\"keyword\">is</span> <span class=\"type\">NULL</span>, the last <span class=\"built_in\">string</span> strtok() was called <span class=\"keyword\">with</span> <span class=\"keyword\">is</span></span><br><span class=\"line\">   used.  <span class=\"type\">For</span> example:</span><br><span class=\"line\">\t<span class=\"built_in\">char</span> s[] = <span class=\"string\">\"-abc-=-def\"</span>;</span><br><span class=\"line\">\tx = strtok(s, <span class=\"string\">\"-\"</span>);\t\t// x = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">\tx = strtok(<span class=\"type\">NULL</span>, <span class=\"string\">\"-=\"</span>);\t\t// x = <span class=\"string\">\"def\"</span></span><br><span class=\"line\">\tx = strtok(<span class=\"type\">NULL</span>, <span class=\"string\">\"=\"</span>);\t\t// x = <span class=\"type\">NULL</span></span><br><span class=\"line\">\t\t// s = <span class=\"string\">\"abc\\0=-def\\0\"</span></span><br><span class=\"line\">*/</span><br><span class=\"line\"><span class=\"built_in\">char</span> *</span><br><span class=\"line\">strtok (<span class=\"built_in\">char</span> *s, <span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *delim)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">char</span> *olds;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __strtok_r (s, delim, &amp;olds);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>strtok_r.c:<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Reentrant string tokenizer.  Generic version.</span></span><br><span class=\"line\"><span class=\"comment\">   Copyright (C) 1991-2018 Free Software Foundation, Inc.</span></span><br><span class=\"line\"><span class=\"comment\">   This file is part of the GNU C Library.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   The GNU C Library is free software; you can redistribute it and/or</span></span><br><span class=\"line\"><span class=\"comment\">   modify it under the terms of the GNU Lesser General Public</span></span><br><span class=\"line\"><span class=\"comment\">   License as published by the Free Software Foundation; either</span></span><br><span class=\"line\"><span class=\"comment\">   version 2.1 of the License, or (at your option) any later version.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   The GNU C Library is distributed in the hope that it will be useful,</span></span><br><span class=\"line\"><span class=\"comment\">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class=\"line\"><span class=\"comment\">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></span><br><span class=\"line\"><span class=\"comment\">   Lesser General Public License for more details.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   You should have received a copy of the GNU Lesser General Public</span></span><br><span class=\"line\"><span class=\"comment\">   License along with the GNU C Library; if not, see</span></span><br><span class=\"line\"><span class=\"comment\">   &lt;http://www.gnu.org/licenses/&gt;.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_CONFIG_H</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;config.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _LIBC</span></span><br><span class=\"line\"><span class=\"comment\">/* Get specification.  */</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"strtok_r.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> __strtok_r strtok_r</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Parse S into tokens separated by characters in DELIM.</span></span><br><span class=\"line\"><span class=\"comment\">   If S is NULL, the saved pointer in SAVE_PTR is used as</span></span><br><span class=\"line\"><span class=\"comment\">   the next starting point.  For example:</span></span><br><span class=\"line\"><span class=\"comment\">\tchar s[] = \"-abc-=-def\";</span></span><br><span class=\"line\"><span class=\"comment\">\tchar *sp;</span></span><br><span class=\"line\"><span class=\"comment\">\tx = strtok_r(s, \"-\", &amp;sp);\t// x = \"abc\", sp = \"=-def\"</span></span><br><span class=\"line\"><span class=\"comment\">\tx = strtok_r(NULL, \"-=\", &amp;sp);\t// x = \"def\", sp = NULL</span></span><br><span class=\"line\"><span class=\"comment\">\tx = strtok_r(NULL, \"=\", &amp;sp);\t// x = NULL</span></span><br><span class=\"line\"><span class=\"comment\">\t\t// s = \"abc\\0-def\\0\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *</span><br><span class=\"line\">__strtok_r (<span class=\"keyword\">char</span> *s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *delim, <span class=\"keyword\">char</span> **save_ptr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *<span class=\"built_in\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">if</span> (s == NULL)</span><br><span class=\"line\">    s = *save_ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">if</span> (*s == <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *save_ptr = s;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Scan leading delimiters.  */</span></span><br><span class=\"line\">  s += strspn (s, delim);</span><br><span class=\"line\">  <span class=\"built_in\">if</span> (*s == <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *save_ptr = s;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Find the end of the token.  */</span></span><br><span class=\"line\">  <span class=\"built_in\">end</span> = s + strcspn (s, delim);</span><br><span class=\"line\">  <span class=\"built_in\">if</span> (*<span class=\"built_in\">end</span> == <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *save_ptr = <span class=\"built_in\">end</span>;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Terminate the token and make *SAVE_PTR point past it.  */</span></span><br><span class=\"line\">  *<span class=\"built_in\">end</span> = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">  *save_ptr = <span class=\"built_in\">end</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> weak_alias</span></span><br><span class=\"line\">libc_hidden_def (__strtok_r)</span><br><span class=\"line\">weak_alias (__strtok_r, strtok_r)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://vimsky.com/article/3185.html\" target=\"_blank\" rel=\"noopener\">C语言线程安全:不可重入函数汇总</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文通过分析源码，深究<code>GLIBC</code>中<code>strtok</code>和<code>strtok_r</code>函数的实现原理和使用过程中的注意事项。</p>\n<hr>","more":"<h2 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">strtok</span><span class=\"params\">(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *delim)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">strtok_r</span><span class=\"params\">(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *delim, <span class=\"keyword\">char</span> **saveptr)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li><code>strtok</code>以包含在<code>delim</code>中的字符为分割符，将<code>str</code>分割成一个个子串；若<code>str</code>为空值<code>NULL</code>，则函数内部保存的静态指针（指向上一次分割位置后一个字节）在下一次调用中将作为起始位置。</li>\n<li><code>strtok_r</code>功能同<code>strtok</code>，不过其将<code>strtok</code>函数内部保存的指针显示化，通过<code>saveptr</code>输入，以<code>saveptr</code>作为分割的起始位置。</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><code>str</code>: 待分割的源字符串</li>\n<li><code>delim</code>: 分割符字符集合</li>\n<li><code>saveptr</code>: 一个指向<code>char *</code>的指针变量，保存分割时的上下文</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><ul>\n<li>若未提取到子串，返回值为指向源字符串首地址的指针，可以完整打印源字符串</li>\n<li>若提取到子串，返回值为提取出的子串的指针，这个指针指向的是子串在源字符串中的起始位置，因为子串末尾的下一个字符在提取前为分割符，提取后被修改成了<code>&#39;/0’</code>，所以可以成功打印子串的内容</li>\n<li>若在成功提取到子串后，没有可以被分割的子串，返回NULL</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> str[<span class=\"number\">12</span>] = <span class=\"string\">\"hello,world\\0\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *token = strtok(str, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, token);</span><br><span class=\"line\">    token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用注意事项\"><a href=\"#使用注意事项\" class=\"headerlink\" title=\"使用注意事项\"></a>使用注意事项</h2><h3 id=\"不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化\"><a href=\"#不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化\" class=\"headerlink\" title=\"不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化\"></a>不会生成新的字符串，只是在源字符串上做了修改，源字符串会发生变化</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"keyword\">str</span>[<span class=\"number\">12</span>] = <span class=\"string\">\"hello,world\\0\"</span>;</span><br><span class=\"line\">printf(<span class=\"string\">\"str before strtok: %s\\n\"</span>, <span class=\"keyword\">str</span>);</span><br><span class=\"line\"><span class=\"keyword\">char</span> *token = strtok(<span class=\"keyword\">str</span>, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">printf(<span class=\"string\">\"str after strtok: %s\\n\"</span>, <span class=\"keyword\">str</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">str </span><span class=\"keyword\">before </span><span class=\"keyword\">strtok: </span>hello,world</span><br><span class=\"line\">$ <span class=\"keyword\">str </span>after <span class=\"keyword\">strtok: </span>hello</span><br></pre></td></tr></table></figure>\n<p>如上实验，<code>str</code>的值，在对其做<code>strtok</code>操作之后，发生了变化，分割符之后的内容不见了。事实上，<code>strtok</code>函数是根据输入的分割符（即<code>,</code>），找到其首次出现的位置（即<code>world</code>之前的<code>,</code>），将其修改为<code>&#39;/0’</code>。</p>\n<h3 id=\"第一个参数不可为字符串常量\"><a href=\"#第一个参数不可为字符串常量\" class=\"headerlink\" title=\"第一个参数不可为字符串常量\"></a>第一个参数不可为字符串常量</h3><p>因为<code>strtok</code>函数会修改源字符串，所以第一个参数不可为字符串常量，不然程序会抛出异常。</p>\n<h3 id=\"若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值NULL\"><a href=\"#若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值NULL\" class=\"headerlink\" title=\"若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值NULL\"></a>若在第一次提取子串后，继续对源字符串进行提取，应在其后的调用中将第一个参数置为空值<code>NULL</code></h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[12] = <span class=\"string\">\"hello,world\\0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *<span class=\"keyword\">token</span> = strtok(str, <span class=\"string\">\",\"</span>);   </span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">token</span> != NULL) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"%s\\n\"</span>, <span class=\"keyword\">token</span>);</span><br><span class=\"line\">    <span class=\"keyword\">token</span> = strtok(NULL, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hello</span><br><span class=\"line\"><span class=\"variable\">$ </span>world</span><br></pre></td></tr></table></figure>\n<p>在第一次提取子串时，<code>strtok</code>用一个指针指向了分割符的下一位，即’w’所在的位置，后续的提取给<code>strtok</code>的第一个参数传递了空值<code>NULL</code>，<code>strtok</code>会从上一次调用隐式保存的位置，继续分割字符串。</p>\n<h3 id=\"第二个参数是分割符的集合，支持多个分割符\"><a href=\"#第二个参数是分割符的集合，支持多个分割符\" class=\"headerlink\" title=\"第二个参数是分割符的集合，支持多个分割符\"></a>第二个参数是分割符的集合，支持多个分割符</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"keyword\">str</span>[<span class=\"number\">12</span>] = <span class=\"string\">\"hello,world\\0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *token = strtok(<span class=\"keyword\">str</span>, <span class=\"string\">\",l\"</span>);</span><br><span class=\"line\">printf(<span class=\"string\">\"%s\\n\"</span>, token);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>he</span><br></pre></td></tr></table></figure>\n<p>由上可见，<code>strtok</code>函数在分割字符串时，不是完整匹配第二个参数传入的分割符，而是使用包含在分割符集合中的字符进行匹配。</p>\n<h3 id=\"若首字符为分割符，则会被忽略\"><a href=\"#若首字符为分割符，则会被忽略\" class=\"headerlink\" title=\"若首字符为分割符，则会被忽略\"></a>若首字符为分割符，则会被忽略</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"keyword\">str</span>[<span class=\"number\">13</span>] = <span class=\"string\">\",hello,world\\0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *token = strtok(<span class=\"keyword\">str</span>, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">printf(<span class=\"string\">\"%s\\n\"</span>, token);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hello</span><br></pre></td></tr></table></figure>\n<p>如上所示，若首字符为分割符，<code>strtok</code>采用了比常规处理更快的方式，直接跳过了首字符。</p>\n<h3 id=\"strtok为不可重入函数，使用strtok-r更灵活和安全\"><a href=\"#strtok为不可重入函数，使用strtok-r更灵活和安全\" class=\"headerlink\" title=\"strtok为不可重入函数，使用strtok_r更灵活和安全\"></a><code>strtok</code>为不可重入函数，使用<code>strtok_r</code>更灵活和安全</h3><p><code>strtok</code>函数在内部使用了静态变量，即用静态指针保存了下一次调用的起始位置，对调用者不可见；<code>strtok_r</code>则将<code>strtok</code>内部隐式保存的指针，以参数的形式由调用者进行传递、保存甚至是修改，使函数更具灵活性和安全性；此外，在<code>windows</code>也有分割字符串安全函数<code>strtok_s</code>。</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p>strtok.c:<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* <span class=\"type\">Copyright</span> (C) <span class=\"number\">1991</span>-<span class=\"number\">2018</span> <span class=\"type\">Free</span> <span class=\"type\">Software</span> <span class=\"type\">Foundation</span>, <span class=\"type\">Inc</span>.</span><br><span class=\"line\">   <span class=\"type\">This</span> file <span class=\"keyword\">is</span> part <span class=\"keyword\">of</span> the <span class=\"type\">GNU</span> C <span class=\"type\">Library</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">The</span> <span class=\"type\">GNU</span> C <span class=\"type\">Library</span> <span class=\"keyword\">is</span> free software; you can redistribute it <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span></span><br><span class=\"line\">   modify it under the terms <span class=\"keyword\">of</span> the <span class=\"type\">GNU</span> <span class=\"type\">Lesser</span> <span class=\"type\">General</span> <span class=\"type\">Public</span></span><br><span class=\"line\">   <span class=\"type\">License</span> <span class=\"keyword\">as</span> published by the <span class=\"type\">Free</span> <span class=\"type\">Software</span> <span class=\"type\">Foundation</span>; either</span><br><span class=\"line\">   version <span class=\"number\">2</span>.<span class=\"number\">1</span> <span class=\"keyword\">of</span> the <span class=\"type\">License</span>, <span class=\"keyword\">or</span> (at your option) <span class=\"built_in\">any</span> later version.</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">The</span> <span class=\"type\">GNU</span> C <span class=\"type\">Library</span> <span class=\"keyword\">is</span> distributed <span class=\"keyword\">in</span> the hope that it will be useful,</span><br><span class=\"line\">   but <span class=\"type\">WITHOUT</span> <span class=\"type\">ANY</span> <span class=\"type\">WARRANTY</span>; <span class=\"keyword\">without</span> even the implied warranty <span class=\"keyword\">of</span></span><br><span class=\"line\">   <span class=\"type\">MERCHANTABILITY</span> <span class=\"keyword\">or</span> <span class=\"type\">FITNESS</span> <span class=\"type\">FOR</span> A <span class=\"type\">PARTICULAR</span> <span class=\"type\">PURPOSE</span>.  <span class=\"type\">See</span> the <span class=\"type\">GNU</span></span><br><span class=\"line\">   <span class=\"type\">Lesser</span> <span class=\"type\">General</span> <span class=\"type\">Public</span> <span class=\"type\">License</span> <span class=\"keyword\">for</span> more details.</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">You</span> should have received a copy <span class=\"keyword\">of</span> the <span class=\"type\">GNU</span> <span class=\"type\">Lesser</span> <span class=\"type\">General</span> <span class=\"type\">Public</span></span><br><span class=\"line\">   <span class=\"type\">License</span> along <span class=\"keyword\">with</span> the <span class=\"type\">GNU</span> C <span class=\"type\">Library</span>; <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>, see</span><br><span class=\"line\">   &lt;http://www.gnu.org/licenses/&gt;.  */</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* <span class=\"type\">Parse</span> S into tokens separated by characters <span class=\"keyword\">in</span> <span class=\"type\">DELIM</span>.</span><br><span class=\"line\">   <span class=\"type\">If</span> S <span class=\"keyword\">is</span> <span class=\"type\">NULL</span>, the last <span class=\"built_in\">string</span> strtok() was called <span class=\"keyword\">with</span> <span class=\"keyword\">is</span></span><br><span class=\"line\">   used.  <span class=\"type\">For</span> example:</span><br><span class=\"line\">\t<span class=\"built_in\">char</span> s[] = <span class=\"string\">\"-abc-=-def\"</span>;</span><br><span class=\"line\">\tx = strtok(s, <span class=\"string\">\"-\"</span>);\t\t// x = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">\tx = strtok(<span class=\"type\">NULL</span>, <span class=\"string\">\"-=\"</span>);\t\t// x = <span class=\"string\">\"def\"</span></span><br><span class=\"line\">\tx = strtok(<span class=\"type\">NULL</span>, <span class=\"string\">\"=\"</span>);\t\t// x = <span class=\"type\">NULL</span></span><br><span class=\"line\">\t\t// s = <span class=\"string\">\"abc\\0=-def\\0\"</span></span><br><span class=\"line\">*/</span><br><span class=\"line\"><span class=\"built_in\">char</span> *</span><br><span class=\"line\">strtok (<span class=\"built_in\">char</span> *s, <span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *delim)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">char</span> *olds;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __strtok_r (s, delim, &amp;olds);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>strtok_r.c:<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Reentrant string tokenizer.  Generic version.</span></span><br><span class=\"line\"><span class=\"comment\">   Copyright (C) 1991-2018 Free Software Foundation, Inc.</span></span><br><span class=\"line\"><span class=\"comment\">   This file is part of the GNU C Library.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   The GNU C Library is free software; you can redistribute it and/or</span></span><br><span class=\"line\"><span class=\"comment\">   modify it under the terms of the GNU Lesser General Public</span></span><br><span class=\"line\"><span class=\"comment\">   License as published by the Free Software Foundation; either</span></span><br><span class=\"line\"><span class=\"comment\">   version 2.1 of the License, or (at your option) any later version.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   The GNU C Library is distributed in the hope that it will be useful,</span></span><br><span class=\"line\"><span class=\"comment\">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class=\"line\"><span class=\"comment\">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></span><br><span class=\"line\"><span class=\"comment\">   Lesser General Public License for more details.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   You should have received a copy of the GNU Lesser General Public</span></span><br><span class=\"line\"><span class=\"comment\">   License along with the GNU C Library; if not, see</span></span><br><span class=\"line\"><span class=\"comment\">   &lt;http://www.gnu.org/licenses/&gt;.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_CONFIG_H</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;config.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _LIBC</span></span><br><span class=\"line\"><span class=\"comment\">/* Get specification.  */</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"strtok_r.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> __strtok_r strtok_r</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Parse S into tokens separated by characters in DELIM.</span></span><br><span class=\"line\"><span class=\"comment\">   If S is NULL, the saved pointer in SAVE_PTR is used as</span></span><br><span class=\"line\"><span class=\"comment\">   the next starting point.  For example:</span></span><br><span class=\"line\"><span class=\"comment\">\tchar s[] = \"-abc-=-def\";</span></span><br><span class=\"line\"><span class=\"comment\">\tchar *sp;</span></span><br><span class=\"line\"><span class=\"comment\">\tx = strtok_r(s, \"-\", &amp;sp);\t// x = \"abc\", sp = \"=-def\"</span></span><br><span class=\"line\"><span class=\"comment\">\tx = strtok_r(NULL, \"-=\", &amp;sp);\t// x = \"def\", sp = NULL</span></span><br><span class=\"line\"><span class=\"comment\">\tx = strtok_r(NULL, \"=\", &amp;sp);\t// x = NULL</span></span><br><span class=\"line\"><span class=\"comment\">\t\t// s = \"abc\\0-def\\0\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *</span><br><span class=\"line\">__strtok_r (<span class=\"keyword\">char</span> *s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *delim, <span class=\"keyword\">char</span> **save_ptr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *<span class=\"built_in\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">if</span> (s == NULL)</span><br><span class=\"line\">    s = *save_ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">if</span> (*s == <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *save_ptr = s;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Scan leading delimiters.  */</span></span><br><span class=\"line\">  s += strspn (s, delim);</span><br><span class=\"line\">  <span class=\"built_in\">if</span> (*s == <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *save_ptr = s;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Find the end of the token.  */</span></span><br><span class=\"line\">  <span class=\"built_in\">end</span> = s + strcspn (s, delim);</span><br><span class=\"line\">  <span class=\"built_in\">if</span> (*<span class=\"built_in\">end</span> == <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *save_ptr = <span class=\"built_in\">end</span>;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Terminate the token and make *SAVE_PTR point past it.  */</span></span><br><span class=\"line\">  *<span class=\"built_in\">end</span> = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">  *save_ptr = <span class=\"built_in\">end</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> weak_alias</span></span><br><span class=\"line\">libc_hidden_def (__strtok_r)</span><br><span class=\"line\">weak_alias (__strtok_r, strtok_r)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://vimsky.com/article/3185.html\" target=\"_blank\" rel=\"noopener\">C语言线程安全:不可重入函数汇总</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux下core文件使用","Antuor":"AnSwEr(Weijie Yuan)","toc":true,"date":"2018-03-07T08:16:15.000Z","_content":"有时候程序会异常退出而不带任何日志，此时就可以使用`code`文件进行分析，它会记录程序运行的内存，寄存器，堆栈指针等信息\n\n------\n<!--more-->\n\n## 什么是core文件\n通常在`Linux`下遇到程序异常退出或者中止，我们都会使用`core`文件进行分析，其中包含了程序运行时的内存，寄存器，堆栈指针等信息，格式为`ELF`，可以理解是程序工作当前状态转储成一个文件，通过工具分析这个文件，我们可以定位到程序异常退出或者终止时相应的堆栈调用等信息，为解决问题提供帮助。\n\n## 使用core文件调试\n### 生成方法\n1. 查看当前`core`文件的状态\n```\n$ ulimit -a\n...\n-c: core file size (blocks)         0  # 关闭状态\n...\n```\n\n2. 打开生成开关\n```\nulimit -c unlimited\nulimit -a\n...\n-c: core file size (blocks)         unlimited\n...\n```\n\n3. 对`core`文件的大小进行限制，单位为`blocks`，一般`1 block=512 bytes`，设置太小可能导致不会生成文件\n```\n$ ulimit -c 1024\n$ ulimit -a\n...\n-c: core file size (blocks)         1024\n...\n```\n\n4. 关闭生成开关\n```\nulimit -c 0\nulimit -a\n...\n-c: core file size (blocks)         0\n...\n```\n\n> 上面对`core`文件的操作仅对当前生效，若需要永久生效，则要将相应操作写入`/etc/profile`\n\n### 生成路径\n`core`文件默认生成在程序的工作目录，可以对生成路径进行设置，需要保证对对应目录有足够空间并具有写权限\n```\necho /MyCoreDumpDir/core.%e.%p > /proc/sys/kernel/core_pattern\n```\n其中命名使用的参数列表\n```\n%p - insert pid into filename  # 添加 pid \n%u - insert current uid into filename  # 添加当前 uid \n%g - insert current gid into filename  # 添加当前 gid \n%s - insert signal that caused the coredump into the filename  # 添加导致产生 core 的信号 \n%t - insert UNIX time that the coredump occurred into filename  # 添加 core 文件生成时的 unix 时间 \n%h - insert hostname where the coredump happened into filename  # 添加主机名 \n%e - insert coredumping executable name into filename  # 添加命令名\n```\n> `/proc/sys/kernel/core_uses_pid`这个文件的值若为１，则无论时候配置`%p`,最后生成的`core`文件都会添加`pid`\n\n### 调试方法\n可以使用`gdb`对`core`文件进行调试，编译是需要带上`-g`选项\n```\n$ gdb a.out\n...\n(gdb) core-file core\n...\n(gdb) bt \n...\n```\n\n如需要在`PC`上调试嵌入式设备产生的`core`文件，则需要选取相应平台的`gdb`工具，并在进入`gdb`后设置符号文件的位置\n```\n$ xxx-xxx-gdb a.out\n...\n(gdb) solib-search-path xxx.so:xxx.so\n...\n(gdb) core-file core\n...\n(gdb) bt\n...\n```\n\n## Reference\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/usage-of-core-in-linux.md","raw":"---\ntitle: Linux下core文件使用\nAntuor: AnSwEr(Weijie Yuan)\ntoc: true\ndate: 2018-03-07 16:16:15\ncategories: C/C++\ntags: core dump\n---\n有时候程序会异常退出而不带任何日志，此时就可以使用`code`文件进行分析，它会记录程序运行的内存，寄存器，堆栈指针等信息\n\n------\n<!--more-->\n\n## 什么是core文件\n通常在`Linux`下遇到程序异常退出或者中止，我们都会使用`core`文件进行分析，其中包含了程序运行时的内存，寄存器，堆栈指针等信息，格式为`ELF`，可以理解是程序工作当前状态转储成一个文件，通过工具分析这个文件，我们可以定位到程序异常退出或者终止时相应的堆栈调用等信息，为解决问题提供帮助。\n\n## 使用core文件调试\n### 生成方法\n1. 查看当前`core`文件的状态\n```\n$ ulimit -a\n...\n-c: core file size (blocks)         0  # 关闭状态\n...\n```\n\n2. 打开生成开关\n```\nulimit -c unlimited\nulimit -a\n...\n-c: core file size (blocks)         unlimited\n...\n```\n\n3. 对`core`文件的大小进行限制，单位为`blocks`，一般`1 block=512 bytes`，设置太小可能导致不会生成文件\n```\n$ ulimit -c 1024\n$ ulimit -a\n...\n-c: core file size (blocks)         1024\n...\n```\n\n4. 关闭生成开关\n```\nulimit -c 0\nulimit -a\n...\n-c: core file size (blocks)         0\n...\n```\n\n> 上面对`core`文件的操作仅对当前生效，若需要永久生效，则要将相应操作写入`/etc/profile`\n\n### 生成路径\n`core`文件默认生成在程序的工作目录，可以对生成路径进行设置，需要保证对对应目录有足够空间并具有写权限\n```\necho /MyCoreDumpDir/core.%e.%p > /proc/sys/kernel/core_pattern\n```\n其中命名使用的参数列表\n```\n%p - insert pid into filename  # 添加 pid \n%u - insert current uid into filename  # 添加当前 uid \n%g - insert current gid into filename  # 添加当前 gid \n%s - insert signal that caused the coredump into the filename  # 添加导致产生 core 的信号 \n%t - insert UNIX time that the coredump occurred into filename  # 添加 core 文件生成时的 unix 时间 \n%h - insert hostname where the coredump happened into filename  # 添加主机名 \n%e - insert coredumping executable name into filename  # 添加命令名\n```\n> `/proc/sys/kernel/core_uses_pid`这个文件的值若为１，则无论时候配置`%p`,最后生成的`core`文件都会添加`pid`\n\n### 调试方法\n可以使用`gdb`对`core`文件进行调试，编译是需要带上`-g`选项\n```\n$ gdb a.out\n...\n(gdb) core-file core\n...\n(gdb) bt \n...\n```\n\n如需要在`PC`上调试嵌入式设备产生的`core`文件，则需要选取相应平台的`gdb`工具，并在进入`gdb`后设置符号文件的位置\n```\n$ xxx-xxx-gdb a.out\n...\n(gdb) solib-search-path xxx.so:xxx.so\n...\n(gdb) core-file core\n...\n(gdb) bt\n...\n```\n\n## Reference\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"usage-of-core-in-linux","published":1,"updated":"2019-07-24T03:22:33.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklumqgfe003479n55m3u9lkl","content":"<p>有时候程序会异常退出而不带任何日志，此时就可以使用<code>code</code>文件进行分析，它会记录程序运行的内存，寄存器，堆栈指针等信息</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"什么是core文件\"><a href=\"#什么是core文件\" class=\"headerlink\" title=\"什么是core文件\"></a>什么是core文件</h2><p>通常在<code>Linux</code>下遇到程序异常退出或者中止，我们都会使用<code>core</code>文件进行分析，其中包含了程序运行时的内存，寄存器，堆栈指针等信息，格式为<code>ELF</code>，可以理解是程序工作当前状态转储成一个文件，通过工具分析这个文件，我们可以定位到程序异常退出或者终止时相应的堆栈调用等信息，为解决问题提供帮助。</p>\n<h2 id=\"使用core文件调试\"><a href=\"#使用core文件调试\" class=\"headerlink\" title=\"使用core文件调试\"></a>使用core文件调试</h2><h3 id=\"生成方法\"><a href=\"#生成方法\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h3><ol>\n<li><p>查看当前<code>core</code>文件的状态</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ulimit -a</span><br><span class=\"line\">...</span><br><span class=\"line\">-c: core file size <span class=\"params\">(blocks)</span>         0  # 关闭状态</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开生成开关</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -c unlimited</span><br><span class=\"line\">ulimit -a</span><br><span class=\"line\">...</span><br><span class=\"line\">-c: core file size <span class=\"params\">(blocks)</span>         unlimited</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对<code>core</code>文件的大小进行限制，单位为<code>blocks</code>，一般<code>1 block=512 bytes</code>，设置太小可能导致不会生成文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">ulimit</span> -c 1024</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">ulimit</span> -a</span></span><br><span class=\"line\">...</span><br><span class=\"line\">-c: core file size (blocks)         1024</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭生成开关</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -c <span class=\"number\">0</span></span><br><span class=\"line\">ulimit -a</span><br><span class=\"line\">...</span><br><span class=\"line\">-c: core file size <span class=\"params\">(blocks)</span>         0</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>上面对<code>core</code>文件的操作仅对当前生效，若需要永久生效，则要将相应操作写入<code>/etc/profile</code></p>\n</blockquote>\n<h3 id=\"生成路径\"><a href=\"#生成路径\" class=\"headerlink\" title=\"生成路径\"></a>生成路径</h3><p><code>core</code>文件默认生成在程序的工作目录，可以对生成路径进行设置，需要保证对对应目录有足够空间并具有写权限<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"regexp\">/MyCoreDumpDir/</span>core.%e.%p &gt; <span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/kernel/</span>core_pattern</span><br></pre></td></tr></table></figure></p>\n<p>其中命名使用的参数列表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%p - <span class=\"keyword\">insert</span> pid <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加 pid </span></span><br><span class=\"line\">%u - <span class=\"keyword\">insert</span> <span class=\"keyword\">current</span> uid <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加当前 uid </span></span><br><span class=\"line\">%g - <span class=\"keyword\">insert</span> <span class=\"keyword\">current</span> gid <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加当前 gid </span></span><br><span class=\"line\">%s - <span class=\"keyword\">insert</span> signal that caused the coredump <span class=\"keyword\">into</span> the filename  <span class=\"comment\"># 添加导致产生 core 的信号 </span></span><br><span class=\"line\">%t - <span class=\"keyword\">insert</span> UNIX <span class=\"built_in\">time</span> that the coredump occurred <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加 core 文件生成时的 unix 时间 </span></span><br><span class=\"line\">%h - <span class=\"keyword\">insert</span> hostname <span class=\"keyword\">where</span> the coredump happened <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加主机名 </span></span><br><span class=\"line\">%e - <span class=\"keyword\">insert</span> coredumping executable <span class=\"keyword\">name</span> <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加命令名</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>/proc/sys/kernel/core_uses_pid</code>这个文件的值若为１，则无论时候配置<code>%p</code>,最后生成的<code>core</code>文件都会添加<code>pid</code></p>\n</blockquote>\n<h3 id=\"调试方法\"><a href=\"#调试方法\" class=\"headerlink\" title=\"调试方法\"></a>调试方法</h3><p>可以使用<code>gdb</code>对<code>core</code>文件进行调试，编译是需要带上<code>-g</code>选项<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gdb <span class=\"selector-tag\">a</span>.out</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) core-file core</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) bt </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>如需要在<code>PC</code>上调试嵌入式设备产生的<code>core</code>文件，则需要选取相应平台的<code>gdb</code>工具，并在进入<code>gdb</code>后设置符号文件的位置<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xxx-xxx-gdb <span class=\"selector-tag\">a</span>.out</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) solib-search-path xxx<span class=\"selector-class\">.so</span>:xxx.so</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) core-file core</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) bt</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>有时候程序会异常退出而不带任何日志，此时就可以使用<code>code</code>文件进行分析，它会记录程序运行的内存，寄存器，堆栈指针等信息</p>\n<hr>","more":"<h2 id=\"什么是core文件\"><a href=\"#什么是core文件\" class=\"headerlink\" title=\"什么是core文件\"></a>什么是core文件</h2><p>通常在<code>Linux</code>下遇到程序异常退出或者中止，我们都会使用<code>core</code>文件进行分析，其中包含了程序运行时的内存，寄存器，堆栈指针等信息，格式为<code>ELF</code>，可以理解是程序工作当前状态转储成一个文件，通过工具分析这个文件，我们可以定位到程序异常退出或者终止时相应的堆栈调用等信息，为解决问题提供帮助。</p>\n<h2 id=\"使用core文件调试\"><a href=\"#使用core文件调试\" class=\"headerlink\" title=\"使用core文件调试\"></a>使用core文件调试</h2><h3 id=\"生成方法\"><a href=\"#生成方法\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h3><ol>\n<li><p>查看当前<code>core</code>文件的状态</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ulimit -a</span><br><span class=\"line\">...</span><br><span class=\"line\">-c: core file size <span class=\"params\">(blocks)</span>         0  # 关闭状态</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开生成开关</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -c unlimited</span><br><span class=\"line\">ulimit -a</span><br><span class=\"line\">...</span><br><span class=\"line\">-c: core file size <span class=\"params\">(blocks)</span>         unlimited</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对<code>core</code>文件的大小进行限制，单位为<code>blocks</code>，一般<code>1 block=512 bytes</code>，设置太小可能导致不会生成文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">ulimit</span> -c 1024</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">ulimit</span> -a</span></span><br><span class=\"line\">...</span><br><span class=\"line\">-c: core file size (blocks)         1024</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭生成开关</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -c <span class=\"number\">0</span></span><br><span class=\"line\">ulimit -a</span><br><span class=\"line\">...</span><br><span class=\"line\">-c: core file size <span class=\"params\">(blocks)</span>         0</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>上面对<code>core</code>文件的操作仅对当前生效，若需要永久生效，则要将相应操作写入<code>/etc/profile</code></p>\n</blockquote>\n<h3 id=\"生成路径\"><a href=\"#生成路径\" class=\"headerlink\" title=\"生成路径\"></a>生成路径</h3><p><code>core</code>文件默认生成在程序的工作目录，可以对生成路径进行设置，需要保证对对应目录有足够空间并具有写权限<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"regexp\">/MyCoreDumpDir/</span>core.%e.%p &gt; <span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/kernel/</span>core_pattern</span><br></pre></td></tr></table></figure></p>\n<p>其中命名使用的参数列表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%p - <span class=\"keyword\">insert</span> pid <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加 pid </span></span><br><span class=\"line\">%u - <span class=\"keyword\">insert</span> <span class=\"keyword\">current</span> uid <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加当前 uid </span></span><br><span class=\"line\">%g - <span class=\"keyword\">insert</span> <span class=\"keyword\">current</span> gid <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加当前 gid </span></span><br><span class=\"line\">%s - <span class=\"keyword\">insert</span> signal that caused the coredump <span class=\"keyword\">into</span> the filename  <span class=\"comment\"># 添加导致产生 core 的信号 </span></span><br><span class=\"line\">%t - <span class=\"keyword\">insert</span> UNIX <span class=\"built_in\">time</span> that the coredump occurred <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加 core 文件生成时的 unix 时间 </span></span><br><span class=\"line\">%h - <span class=\"keyword\">insert</span> hostname <span class=\"keyword\">where</span> the coredump happened <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加主机名 </span></span><br><span class=\"line\">%e - <span class=\"keyword\">insert</span> coredumping executable <span class=\"keyword\">name</span> <span class=\"keyword\">into</span> filename  <span class=\"comment\"># 添加命令名</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>/proc/sys/kernel/core_uses_pid</code>这个文件的值若为１，则无论时候配置<code>%p</code>,最后生成的<code>core</code>文件都会添加<code>pid</code></p>\n</blockquote>\n<h3 id=\"调试方法\"><a href=\"#调试方法\" class=\"headerlink\" title=\"调试方法\"></a>调试方法</h3><p>可以使用<code>gdb</code>对<code>core</code>文件进行调试，编译是需要带上<code>-g</code>选项<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gdb <span class=\"selector-tag\">a</span>.out</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) core-file core</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) bt </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>如需要在<code>PC</code>上调试嵌入式设备产生的<code>core</code>文件，则需要选取相应平台的<code>gdb</code>工具，并在进入<code>gdb</code>后设置符号文件的位置<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xxx-xxx-gdb <span class=\"selector-tag\">a</span>.out</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) solib-search-path xxx<span class=\"selector-class\">.so</span>:xxx.so</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) core-file core</span><br><span class=\"line\">...</span><br><span class=\"line\">(gdb) bt</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Speex介绍","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2017-12-29T07:49:34.000Z","_content":"\n本文将对*Speex*相关的概念进行介绍\n\n------\n<!--more-->\n\n[TOC]\n\n\n*Speex*编解码器是一款开源且免费的语音编解码器，遵循*BSD*协议，为分封网络（*packet network*）和网络电话（*VoIP*）而设计，支持文件的压缩\n> 为网络电话而不是移动电话而设计，意味着*Speex*对数据丢失具有鲁棒性，但是对数据包损坏不鲁棒，在*VoIP*中的数据包要么完整到达，要么不能到达\n\n*Speex*选用CELP（码激励线性预测编码）编码技术，在高比特率和低比特率都稳定可靠，复杂性适度并且占用内存较少\n\n## 相关概念\n### 采样率\n采样率是每秒钟采集到的信号样本数，单位是*Hertz*（*Hz*），*Speex*为三种不同的采样率而设计：*8kHz*（窄带），*16kHz*（宽带）和*32kHz*（超宽带）\n\n### 比特率\n在对语音信号编码时，比特率定义为单位时间内的比特数，单位是比特每秒（*bps*）或通常的千比特每秒（*kbps*）\n > 注意千比特每秒（*kbps*）和千字节每秒（*kBps*）的区别。\n\n### 质量（可变）\n*Speex*是有损的编解码器，意味着压缩率以输入语音信号的保真度为代价，质量越高，压缩后的比特率越大，音质也越好\n*Speex*可以控制质量和比特率之间的折中，大多数时间由一个范围在*0*到*10*之间的质量参数控制\n> 在不变比特率（*CBR*）中，质量参数是一个整数； 在可变比特率（*VBR*）中，质量参数是一个浮点数。\n\n### 复杂度（可变）\n*Speex*允许编码器拥有可变的复杂度，通过一个范围在*1*到*10*之间的整数控制搜索的执行来实现，复杂度越高，压缩率越高，CPU使用率越高，音质越好，类似于*gzip*和*bzip2*压缩工具的-1到*-9*选项\n正常使用情况下，复杂度为*1*的噪声等级比复杂度为*10*的噪声等级高*1*到*2*个*dB*，但复杂度为*10*的*CPU*要求比复杂度为1的高*5*倍。\n> 实际应用中，最好的折中是复杂度*2*到*4*，但在编码非语音声音如*DTMF*声调时更高的复杂度经常被用到\n\n### 可变比特率（*VBR*）\n可变比特率（*VBR*）允许编解码器自适应的根据待编码音频的“难度”动态地改变比特率，如元音和高能瞬态变化的声音需要高比特率以获得好的质量； 但是摩擦音（如*s，f*）用低比特率就能充分编码\n+ 优点：*VBR*在相同的质量下能获得更低的比特率，或在不变比特率下获得更好的质量\n+ 缺点：在指定质量情况下，无法保证最终的平均比特率；在一些如网络电话（*VoIP*）这样的实时应用中，依赖于最大比特率，这在通信信道中必须足够低。\n\n### 平均比特率（*ABR*）\n平均比特率解决了*VBR*中的一个问题，它动态地调整*VBR*质量以获得指定的比特率，因为质量和比特率是实时调整的，*ABR*的全局质量比正好达到目标平均比特率的*VBR*编码质量稍微差些。\n\n### 声音活动检测（*VAD*）\n*VAD*检测待编码的音频是语音还是无声/背景噪声，*VBR*编码中默认激活\n> *Speex*检测出非语言段并仅使用足够复现背景噪声的比特率进行编码，这叫“柔化噪音生成”（*CNG*）。\n\n### 断续传输（DTX）\n断续传输是*VAD/VBR*的附加操作，当背景噪声平稳时会完全停止传输\n\n### 知觉增强\n知觉增强是解码器的一部分，当被启用时，能减少编解码过程中产生的噪声或失真的知觉\n > 在大多数情况下，知觉增强会带来声音客观上的偏离（如仅考虑*SNR*），但最后仍听起来更好（主管增强）\n\n### 等待时间和算法延时\n每一个语音编解码器在传输中都会引入延时，对于*Speex*，延时等于帧长加上处理每一帧需要前几帧的数量\n> 在窄带操作中延时为*30ms*，在宽带操作中延时为*34ms*，这不包括编解码帧时的*CPU*时间\n\n## 相关组件\n### 编解码器\n*Speex*编解码器有以下特性\n1. 免费软件/开源，免专利费和版税\n2. 利用嵌入比特流集成了窄带和宽带\n3. 大范围可用比特率（从*2.15kbps*到*44kbps*）\n4. 动态比特率转换（*AMR*）和可变比特率操作（*VBR*）\n5. 声音活动检测（*VAD*，与*VBR*集成）和断续传输（*DTX*）\n6. 可变复杂度\n7. 嵌入宽带结构（可伸缩采样率）\n8. *32kHz*超宽带采样率\n9. 强度立体声编码选项\n10. 定点实现\n\n### 预处理器\n预处理器在对音频编码前对音频进行预处理，有三个主要功能\n1. 噪声抑制\n先降噪再进行编解码是有好处的，因为*Speex*编解码器通常会对噪声输入同样进行编解码，这将会扩大噪声，而降噪能大大减少这一影响\n2. 自动增益控制（*AGC*）\n自动增益控制（*AGC*）是为了处理录音音量在不同设置里有很大差别这一问题，*AGC*将会调整信号音量到参考音量大小\n3. 声音活动检测（*VAD*）\n预处理器提供的声音活动检测（*VAD*）比编解码器中直接提供的*VAD*更先进\n\n### 自适应抖动缓冲器\n当通过*UDP*（*User Datagram Protocal*，用户数据报协议）或*RTP*（*Real Time Protocal*，实时传输协议）传输声音（或其他任何内容）时，数据包可能丢失，不同延时到达，甚至乱序，抖动缓冲器的作用是对数据包进行重排序并保存在足够长的buffer（但有一定限度）里，然后将数据包发送去解码\n\n### 声学回声消除器\n在任何免提式通信系统中（下图），远端的语音在本地扬声器播放时，经过在房间里传播后又会被麦克风录音，如果将麦克风录音直接又发送到远端，则远端的用户将会听到他自己的回声\n![aec](aec.png)\n声学回声消除器就是为了在将录音发送到远端前消除声学回声，提高了远端接收的语音质量\n\n### 重采样器\n重采样指转换音频的采样率，在任意采样率间进行转换（采样率必须是有理数），能控制质量和复杂度的折中，可用于能混合不同采样率流，支持声卡不支持的采样率，能转码等\n\n## Reference\n- [http://blog.csdn.net/YJJat1989/article/category/1879965](http://blog.csdn.net/YJJat1989/article/category/1879965)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","source":"_posts/speex.md","raw":"---\ntitle: Speex介绍\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags: Speex\ndate: 2017-12-29 15:49:34\ncategories: 语音\n---\n\n本文将对*Speex*相关的概念进行介绍\n\n------\n<!--more-->\n\n[TOC]\n\n\n*Speex*编解码器是一款开源且免费的语音编解码器，遵循*BSD*协议，为分封网络（*packet network*）和网络电话（*VoIP*）而设计，支持文件的压缩\n> 为网络电话而不是移动电话而设计，意味着*Speex*对数据丢失具有鲁棒性，但是对数据包损坏不鲁棒，在*VoIP*中的数据包要么完整到达，要么不能到达\n\n*Speex*选用CELP（码激励线性预测编码）编码技术，在高比特率和低比特率都稳定可靠，复杂性适度并且占用内存较少\n\n## 相关概念\n### 采样率\n采样率是每秒钟采集到的信号样本数，单位是*Hertz*（*Hz*），*Speex*为三种不同的采样率而设计：*8kHz*（窄带），*16kHz*（宽带）和*32kHz*（超宽带）\n\n### 比特率\n在对语音信号编码时，比特率定义为单位时间内的比特数，单位是比特每秒（*bps*）或通常的千比特每秒（*kbps*）\n > 注意千比特每秒（*kbps*）和千字节每秒（*kBps*）的区别。\n\n### 质量（可变）\n*Speex*是有损的编解码器，意味着压缩率以输入语音信号的保真度为代价，质量越高，压缩后的比特率越大，音质也越好\n*Speex*可以控制质量和比特率之间的折中，大多数时间由一个范围在*0*到*10*之间的质量参数控制\n> 在不变比特率（*CBR*）中，质量参数是一个整数； 在可变比特率（*VBR*）中，质量参数是一个浮点数。\n\n### 复杂度（可变）\n*Speex*允许编码器拥有可变的复杂度，通过一个范围在*1*到*10*之间的整数控制搜索的执行来实现，复杂度越高，压缩率越高，CPU使用率越高，音质越好，类似于*gzip*和*bzip2*压缩工具的-1到*-9*选项\n正常使用情况下，复杂度为*1*的噪声等级比复杂度为*10*的噪声等级高*1*到*2*个*dB*，但复杂度为*10*的*CPU*要求比复杂度为1的高*5*倍。\n> 实际应用中，最好的折中是复杂度*2*到*4*，但在编码非语音声音如*DTMF*声调时更高的复杂度经常被用到\n\n### 可变比特率（*VBR*）\n可变比特率（*VBR*）允许编解码器自适应的根据待编码音频的“难度”动态地改变比特率，如元音和高能瞬态变化的声音需要高比特率以获得好的质量； 但是摩擦音（如*s，f*）用低比特率就能充分编码\n+ 优点：*VBR*在相同的质量下能获得更低的比特率，或在不变比特率下获得更好的质量\n+ 缺点：在指定质量情况下，无法保证最终的平均比特率；在一些如网络电话（*VoIP*）这样的实时应用中，依赖于最大比特率，这在通信信道中必须足够低。\n\n### 平均比特率（*ABR*）\n平均比特率解决了*VBR*中的一个问题，它动态地调整*VBR*质量以获得指定的比特率，因为质量和比特率是实时调整的，*ABR*的全局质量比正好达到目标平均比特率的*VBR*编码质量稍微差些。\n\n### 声音活动检测（*VAD*）\n*VAD*检测待编码的音频是语音还是无声/背景噪声，*VBR*编码中默认激活\n> *Speex*检测出非语言段并仅使用足够复现背景噪声的比特率进行编码，这叫“柔化噪音生成”（*CNG*）。\n\n### 断续传输（DTX）\n断续传输是*VAD/VBR*的附加操作，当背景噪声平稳时会完全停止传输\n\n### 知觉增强\n知觉增强是解码器的一部分，当被启用时，能减少编解码过程中产生的噪声或失真的知觉\n > 在大多数情况下，知觉增强会带来声音客观上的偏离（如仅考虑*SNR*），但最后仍听起来更好（主管增强）\n\n### 等待时间和算法延时\n每一个语音编解码器在传输中都会引入延时，对于*Speex*，延时等于帧长加上处理每一帧需要前几帧的数量\n> 在窄带操作中延时为*30ms*，在宽带操作中延时为*34ms*，这不包括编解码帧时的*CPU*时间\n\n## 相关组件\n### 编解码器\n*Speex*编解码器有以下特性\n1. 免费软件/开源，免专利费和版税\n2. 利用嵌入比特流集成了窄带和宽带\n3. 大范围可用比特率（从*2.15kbps*到*44kbps*）\n4. 动态比特率转换（*AMR*）和可变比特率操作（*VBR*）\n5. 声音活动检测（*VAD*，与*VBR*集成）和断续传输（*DTX*）\n6. 可变复杂度\n7. 嵌入宽带结构（可伸缩采样率）\n8. *32kHz*超宽带采样率\n9. 强度立体声编码选项\n10. 定点实现\n\n### 预处理器\n预处理器在对音频编码前对音频进行预处理，有三个主要功能\n1. 噪声抑制\n先降噪再进行编解码是有好处的，因为*Speex*编解码器通常会对噪声输入同样进行编解码，这将会扩大噪声，而降噪能大大减少这一影响\n2. 自动增益控制（*AGC*）\n自动增益控制（*AGC*）是为了处理录音音量在不同设置里有很大差别这一问题，*AGC*将会调整信号音量到参考音量大小\n3. 声音活动检测（*VAD*）\n预处理器提供的声音活动检测（*VAD*）比编解码器中直接提供的*VAD*更先进\n\n### 自适应抖动缓冲器\n当通过*UDP*（*User Datagram Protocal*，用户数据报协议）或*RTP*（*Real Time Protocal*，实时传输协议）传输声音（或其他任何内容）时，数据包可能丢失，不同延时到达，甚至乱序，抖动缓冲器的作用是对数据包进行重排序并保存在足够长的buffer（但有一定限度）里，然后将数据包发送去解码\n\n### 声学回声消除器\n在任何免提式通信系统中（下图），远端的语音在本地扬声器播放时，经过在房间里传播后又会被麦克风录音，如果将麦克风录音直接又发送到远端，则远端的用户将会听到他自己的回声\n![aec](aec.png)\n声学回声消除器就是为了在将录音发送到远端前消除声学回声，提高了远端接收的语音质量\n\n### 重采样器\n重采样指转换音频的采样率，在任意采样率间进行转换（采样率必须是有理数），能控制质量和复杂度的折中，可用于能混合不同采样率流，支持声卡不支持的采样率，能转码等\n\n## Reference\n- [http://blog.csdn.net/YJJat1989/article/category/1879965](http://blog.csdn.net/YJJat1989/article/category/1879965)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","slug":"speex","published":1,"updated":"2020-07-21T01:40:07.213Z","layout":"post","photos":[],"link":"","_id":"cklumqgfg003979n5jhc2w9bg","content":"<p>本文将对<em>Speex</em>相关的概念进行介绍</p>\n<hr>\n<a id=\"more\"></a>\n<p>[TOC]</p>\n<p><em>Speex</em>编解码器是一款开源且免费的语音编解码器，遵循<em>BSD</em>协议，为分封网络（<em>packet network</em>）和网络电话（<em>VoIP</em>）而设计，支持文件的压缩</p>\n<blockquote>\n<p>为网络电话而不是移动电话而设计，意味着<em>Speex</em>对数据丢失具有鲁棒性，但是对数据包损坏不鲁棒，在<em>VoIP</em>中的数据包要么完整到达，要么不能到达</p>\n</blockquote>\n<p><em>Speex</em>选用CELP（码激励线性预测编码）编码技术，在高比特率和低比特率都稳定可靠，复杂性适度并且占用内存较少</p>\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><h3 id=\"采样率\"><a href=\"#采样率\" class=\"headerlink\" title=\"采样率\"></a>采样率</h3><p>采样率是每秒钟采集到的信号样本数，单位是<em>Hertz</em>（<em>Hz</em>），<em>Speex</em>为三种不同的采样率而设计：<em>8kHz</em>（窄带），<em>16kHz</em>（宽带）和<em>32kHz</em>（超宽带）</p>\n<h3 id=\"比特率\"><a href=\"#比特率\" class=\"headerlink\" title=\"比特率\"></a>比特率</h3><p>在对语音信号编码时，比特率定义为单位时间内的比特数，单位是比特每秒（<em>bps</em>）或通常的千比特每秒（<em>kbps</em>）</p>\n<blockquote>\n<p>注意千比特每秒（<em>kbps</em>）和千字节每秒（<em>kBps</em>）的区别。</p>\n</blockquote>\n<h3 id=\"质量（可变）\"><a href=\"#质量（可变）\" class=\"headerlink\" title=\"质量（可变）\"></a>质量（可变）</h3><p><em>Speex</em>是有损的编解码器，意味着压缩率以输入语音信号的保真度为代价，质量越高，压缩后的比特率越大，音质也越好<br><em>Speex</em>可以控制质量和比特率之间的折中，大多数时间由一个范围在<em>0</em>到<em>10</em>之间的质量参数控制</p>\n<blockquote>\n<p>在不变比特率（<em>CBR</em>）中，质量参数是一个整数； 在可变比特率（<em>VBR</em>）中，质量参数是一个浮点数。</p>\n</blockquote>\n<h3 id=\"复杂度（可变）\"><a href=\"#复杂度（可变）\" class=\"headerlink\" title=\"复杂度（可变）\"></a>复杂度（可变）</h3><p><em>Speex</em>允许编码器拥有可变的复杂度，通过一个范围在<em>1</em>到<em>10</em>之间的整数控制搜索的执行来实现，复杂度越高，压缩率越高，CPU使用率越高，音质越好，类似于<em>gzip</em>和<em>bzip2</em>压缩工具的-1到<em>-9</em>选项<br>正常使用情况下，复杂度为<em>1</em>的噪声等级比复杂度为<em>10</em>的噪声等级高<em>1</em>到<em>2</em>个<em>dB</em>，但复杂度为<em>10</em>的<em>CPU</em>要求比复杂度为1的高<em>5</em>倍。</p>\n<blockquote>\n<p>实际应用中，最好的折中是复杂度<em>2</em>到<em>4</em>，但在编码非语音声音如<em>DTMF</em>声调时更高的复杂度经常被用到</p>\n</blockquote>\n<h3 id=\"可变比特率（VBR）\"><a href=\"#可变比特率（VBR）\" class=\"headerlink\" title=\"可变比特率（VBR）\"></a>可变比特率（<em>VBR</em>）</h3><p>可变比特率（<em>VBR</em>）允许编解码器自适应的根据待编码音频的“难度”动态地改变比特率，如元音和高能瞬态变化的声音需要高比特率以获得好的质量； 但是摩擦音（如<em>s，f</em>）用低比特率就能充分编码</p>\n<ul>\n<li>优点：<em>VBR</em>在相同的质量下能获得更低的比特率，或在不变比特率下获得更好的质量</li>\n<li>缺点：在指定质量情况下，无法保证最终的平均比特率；在一些如网络电话（<em>VoIP</em>）这样的实时应用中，依赖于最大比特率，这在通信信道中必须足够低。</li>\n</ul>\n<h3 id=\"平均比特率（ABR）\"><a href=\"#平均比特率（ABR）\" class=\"headerlink\" title=\"平均比特率（ABR）\"></a>平均比特率（<em>ABR</em>）</h3><p>平均比特率解决了<em>VBR</em>中的一个问题，它动态地调整<em>VBR</em>质量以获得指定的比特率，因为质量和比特率是实时调整的，<em>ABR</em>的全局质量比正好达到目标平均比特率的<em>VBR</em>编码质量稍微差些。</p>\n<h3 id=\"声音活动检测（VAD）\"><a href=\"#声音活动检测（VAD）\" class=\"headerlink\" title=\"声音活动检测（VAD）\"></a>声音活动检测（<em>VAD</em>）</h3><p><em>VAD</em>检测待编码的音频是语音还是无声/背景噪声，<em>VBR</em>编码中默认激活</p>\n<blockquote>\n<p><em>Speex</em>检测出非语言段并仅使用足够复现背景噪声的比特率进行编码，这叫“柔化噪音生成”（<em>CNG</em>）。</p>\n</blockquote>\n<h3 id=\"断续传输（DTX）\"><a href=\"#断续传输（DTX）\" class=\"headerlink\" title=\"断续传输（DTX）\"></a>断续传输（DTX）</h3><p>断续传输是<em>VAD/VBR</em>的附加操作，当背景噪声平稳时会完全停止传输</p>\n<h3 id=\"知觉增强\"><a href=\"#知觉增强\" class=\"headerlink\" title=\"知觉增强\"></a>知觉增强</h3><p>知觉增强是解码器的一部分，当被启用时，能减少编解码过程中产生的噪声或失真的知觉</p>\n<blockquote>\n<p>在大多数情况下，知觉增强会带来声音客观上的偏离（如仅考虑<em>SNR</em>），但最后仍听起来更好（主管增强）</p>\n</blockquote>\n<h3 id=\"等待时间和算法延时\"><a href=\"#等待时间和算法延时\" class=\"headerlink\" title=\"等待时间和算法延时\"></a>等待时间和算法延时</h3><p>每一个语音编解码器在传输中都会引入延时，对于<em>Speex</em>，延时等于帧长加上处理每一帧需要前几帧的数量</p>\n<blockquote>\n<p>在窄带操作中延时为<em>30ms</em>，在宽带操作中延时为<em>34ms</em>，这不包括编解码帧时的<em>CPU</em>时间</p>\n</blockquote>\n<h2 id=\"相关组件\"><a href=\"#相关组件\" class=\"headerlink\" title=\"相关组件\"></a>相关组件</h2><h3 id=\"编解码器\"><a href=\"#编解码器\" class=\"headerlink\" title=\"编解码器\"></a>编解码器</h3><p><em>Speex</em>编解码器有以下特性</p>\n<ol>\n<li>免费软件/开源，免专利费和版税</li>\n<li>利用嵌入比特流集成了窄带和宽带</li>\n<li>大范围可用比特率（从<em>2.15kbps</em>到<em>44kbps</em>）</li>\n<li>动态比特率转换（<em>AMR</em>）和可变比特率操作（<em>VBR</em>）</li>\n<li>声音活动检测（<em>VAD</em>，与<em>VBR</em>集成）和断续传输（<em>DTX</em>）</li>\n<li>可变复杂度</li>\n<li>嵌入宽带结构（可伸缩采样率）</li>\n<li><em>32kHz</em>超宽带采样率</li>\n<li>强度立体声编码选项</li>\n<li>定点实现</li>\n</ol>\n<h3 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h3><p>预处理器在对音频编码前对音频进行预处理，有三个主要功能</p>\n<ol>\n<li>噪声抑制<br>先降噪再进行编解码是有好处的，因为<em>Speex</em>编解码器通常会对噪声输入同样进行编解码，这将会扩大噪声，而降噪能大大减少这一影响</li>\n<li>自动增益控制（<em>AGC</em>）<br>自动增益控制（<em>AGC</em>）是为了处理录音音量在不同设置里有很大差别这一问题，<em>AGC</em>将会调整信号音量到参考音量大小</li>\n<li>声音活动检测（<em>VAD</em>）<br>预处理器提供的声音活动检测（<em>VAD</em>）比编解码器中直接提供的<em>VAD</em>更先进</li>\n</ol>\n<h3 id=\"自适应抖动缓冲器\"><a href=\"#自适应抖动缓冲器\" class=\"headerlink\" title=\"自适应抖动缓冲器\"></a>自适应抖动缓冲器</h3><p>当通过<em>UDP</em>（<em>User Datagram Protocal</em>，用户数据报协议）或<em>RTP</em>（<em>Real Time Protocal</em>，实时传输协议）传输声音（或其他任何内容）时，数据包可能丢失，不同延时到达，甚至乱序，抖动缓冲器的作用是对数据包进行重排序并保存在足够长的buffer（但有一定限度）里，然后将数据包发送去解码</p>\n<h3 id=\"声学回声消除器\"><a href=\"#声学回声消除器\" class=\"headerlink\" title=\"声学回声消除器\"></a>声学回声消除器</h3><p>在任何免提式通信系统中（下图），远端的语音在本地扬声器播放时，经过在房间里传播后又会被麦克风录音，如果将麦克风录音直接又发送到远端，则远端的用户将会听到他自己的回声<br><img src=\"/2017/12/29/speex/aec.png\" alt=\"aec\"><br>声学回声消除器就是为了在将录音发送到远端前消除声学回声，提高了远端接收的语音质量</p>\n<h3 id=\"重采样器\"><a href=\"#重采样器\" class=\"headerlink\" title=\"重采样器\"></a>重采样器</h3><p>重采样指转换音频的采样率，在任意采样率间进行转换（采样率必须是有理数），能控制质量和复杂度的折中，可用于能混合不同采样率流，支持声卡不支持的采样率，能转码等</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://blog.csdn.net/YJJat1989/article/category/1879965\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/YJJat1989/article/category/1879965</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将对<em>Speex</em>相关的概念进行介绍</p>\n<hr>","more":"<p>[TOC]</p>\n<p><em>Speex</em>编解码器是一款开源且免费的语音编解码器，遵循<em>BSD</em>协议，为分封网络（<em>packet network</em>）和网络电话（<em>VoIP</em>）而设计，支持文件的压缩</p>\n<blockquote>\n<p>为网络电话而不是移动电话而设计，意味着<em>Speex</em>对数据丢失具有鲁棒性，但是对数据包损坏不鲁棒，在<em>VoIP</em>中的数据包要么完整到达，要么不能到达</p>\n</blockquote>\n<p><em>Speex</em>选用CELP（码激励线性预测编码）编码技术，在高比特率和低比特率都稳定可靠，复杂性适度并且占用内存较少</p>\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><h3 id=\"采样率\"><a href=\"#采样率\" class=\"headerlink\" title=\"采样率\"></a>采样率</h3><p>采样率是每秒钟采集到的信号样本数，单位是<em>Hertz</em>（<em>Hz</em>），<em>Speex</em>为三种不同的采样率而设计：<em>8kHz</em>（窄带），<em>16kHz</em>（宽带）和<em>32kHz</em>（超宽带）</p>\n<h3 id=\"比特率\"><a href=\"#比特率\" class=\"headerlink\" title=\"比特率\"></a>比特率</h3><p>在对语音信号编码时，比特率定义为单位时间内的比特数，单位是比特每秒（<em>bps</em>）或通常的千比特每秒（<em>kbps</em>）</p>\n<blockquote>\n<p>注意千比特每秒（<em>kbps</em>）和千字节每秒（<em>kBps</em>）的区别。</p>\n</blockquote>\n<h3 id=\"质量（可变）\"><a href=\"#质量（可变）\" class=\"headerlink\" title=\"质量（可变）\"></a>质量（可变）</h3><p><em>Speex</em>是有损的编解码器，意味着压缩率以输入语音信号的保真度为代价，质量越高，压缩后的比特率越大，音质也越好<br><em>Speex</em>可以控制质量和比特率之间的折中，大多数时间由一个范围在<em>0</em>到<em>10</em>之间的质量参数控制</p>\n<blockquote>\n<p>在不变比特率（<em>CBR</em>）中，质量参数是一个整数； 在可变比特率（<em>VBR</em>）中，质量参数是一个浮点数。</p>\n</blockquote>\n<h3 id=\"复杂度（可变）\"><a href=\"#复杂度（可变）\" class=\"headerlink\" title=\"复杂度（可变）\"></a>复杂度（可变）</h3><p><em>Speex</em>允许编码器拥有可变的复杂度，通过一个范围在<em>1</em>到<em>10</em>之间的整数控制搜索的执行来实现，复杂度越高，压缩率越高，CPU使用率越高，音质越好，类似于<em>gzip</em>和<em>bzip2</em>压缩工具的-1到<em>-9</em>选项<br>正常使用情况下，复杂度为<em>1</em>的噪声等级比复杂度为<em>10</em>的噪声等级高<em>1</em>到<em>2</em>个<em>dB</em>，但复杂度为<em>10</em>的<em>CPU</em>要求比复杂度为1的高<em>5</em>倍。</p>\n<blockquote>\n<p>实际应用中，最好的折中是复杂度<em>2</em>到<em>4</em>，但在编码非语音声音如<em>DTMF</em>声调时更高的复杂度经常被用到</p>\n</blockquote>\n<h3 id=\"可变比特率（VBR）\"><a href=\"#可变比特率（VBR）\" class=\"headerlink\" title=\"可变比特率（VBR）\"></a>可变比特率（<em>VBR</em>）</h3><p>可变比特率（<em>VBR</em>）允许编解码器自适应的根据待编码音频的“难度”动态地改变比特率，如元音和高能瞬态变化的声音需要高比特率以获得好的质量； 但是摩擦音（如<em>s，f</em>）用低比特率就能充分编码</p>\n<ul>\n<li>优点：<em>VBR</em>在相同的质量下能获得更低的比特率，或在不变比特率下获得更好的质量</li>\n<li>缺点：在指定质量情况下，无法保证最终的平均比特率；在一些如网络电话（<em>VoIP</em>）这样的实时应用中，依赖于最大比特率，这在通信信道中必须足够低。</li>\n</ul>\n<h3 id=\"平均比特率（ABR）\"><a href=\"#平均比特率（ABR）\" class=\"headerlink\" title=\"平均比特率（ABR）\"></a>平均比特率（<em>ABR</em>）</h3><p>平均比特率解决了<em>VBR</em>中的一个问题，它动态地调整<em>VBR</em>质量以获得指定的比特率，因为质量和比特率是实时调整的，<em>ABR</em>的全局质量比正好达到目标平均比特率的<em>VBR</em>编码质量稍微差些。</p>\n<h3 id=\"声音活动检测（VAD）\"><a href=\"#声音活动检测（VAD）\" class=\"headerlink\" title=\"声音活动检测（VAD）\"></a>声音活动检测（<em>VAD</em>）</h3><p><em>VAD</em>检测待编码的音频是语音还是无声/背景噪声，<em>VBR</em>编码中默认激活</p>\n<blockquote>\n<p><em>Speex</em>检测出非语言段并仅使用足够复现背景噪声的比特率进行编码，这叫“柔化噪音生成”（<em>CNG</em>）。</p>\n</blockquote>\n<h3 id=\"断续传输（DTX）\"><a href=\"#断续传输（DTX）\" class=\"headerlink\" title=\"断续传输（DTX）\"></a>断续传输（DTX）</h3><p>断续传输是<em>VAD/VBR</em>的附加操作，当背景噪声平稳时会完全停止传输</p>\n<h3 id=\"知觉增强\"><a href=\"#知觉增强\" class=\"headerlink\" title=\"知觉增强\"></a>知觉增强</h3><p>知觉增强是解码器的一部分，当被启用时，能减少编解码过程中产生的噪声或失真的知觉</p>\n<blockquote>\n<p>在大多数情况下，知觉增强会带来声音客观上的偏离（如仅考虑<em>SNR</em>），但最后仍听起来更好（主管增强）</p>\n</blockquote>\n<h3 id=\"等待时间和算法延时\"><a href=\"#等待时间和算法延时\" class=\"headerlink\" title=\"等待时间和算法延时\"></a>等待时间和算法延时</h3><p>每一个语音编解码器在传输中都会引入延时，对于<em>Speex</em>，延时等于帧长加上处理每一帧需要前几帧的数量</p>\n<blockquote>\n<p>在窄带操作中延时为<em>30ms</em>，在宽带操作中延时为<em>34ms</em>，这不包括编解码帧时的<em>CPU</em>时间</p>\n</blockquote>\n<h2 id=\"相关组件\"><a href=\"#相关组件\" class=\"headerlink\" title=\"相关组件\"></a>相关组件</h2><h3 id=\"编解码器\"><a href=\"#编解码器\" class=\"headerlink\" title=\"编解码器\"></a>编解码器</h3><p><em>Speex</em>编解码器有以下特性</p>\n<ol>\n<li>免费软件/开源，免专利费和版税</li>\n<li>利用嵌入比特流集成了窄带和宽带</li>\n<li>大范围可用比特率（从<em>2.15kbps</em>到<em>44kbps</em>）</li>\n<li>动态比特率转换（<em>AMR</em>）和可变比特率操作（<em>VBR</em>）</li>\n<li>声音活动检测（<em>VAD</em>，与<em>VBR</em>集成）和断续传输（<em>DTX</em>）</li>\n<li>可变复杂度</li>\n<li>嵌入宽带结构（可伸缩采样率）</li>\n<li><em>32kHz</em>超宽带采样率</li>\n<li>强度立体声编码选项</li>\n<li>定点实现</li>\n</ol>\n<h3 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h3><p>预处理器在对音频编码前对音频进行预处理，有三个主要功能</p>\n<ol>\n<li>噪声抑制<br>先降噪再进行编解码是有好处的，因为<em>Speex</em>编解码器通常会对噪声输入同样进行编解码，这将会扩大噪声，而降噪能大大减少这一影响</li>\n<li>自动增益控制（<em>AGC</em>）<br>自动增益控制（<em>AGC</em>）是为了处理录音音量在不同设置里有很大差别这一问题，<em>AGC</em>将会调整信号音量到参考音量大小</li>\n<li>声音活动检测（<em>VAD</em>）<br>预处理器提供的声音活动检测（<em>VAD</em>）比编解码器中直接提供的<em>VAD</em>更先进</li>\n</ol>\n<h3 id=\"自适应抖动缓冲器\"><a href=\"#自适应抖动缓冲器\" class=\"headerlink\" title=\"自适应抖动缓冲器\"></a>自适应抖动缓冲器</h3><p>当通过<em>UDP</em>（<em>User Datagram Protocal</em>，用户数据报协议）或<em>RTP</em>（<em>Real Time Protocal</em>，实时传输协议）传输声音（或其他任何内容）时，数据包可能丢失，不同延时到达，甚至乱序，抖动缓冲器的作用是对数据包进行重排序并保存在足够长的buffer（但有一定限度）里，然后将数据包发送去解码</p>\n<h3 id=\"声学回声消除器\"><a href=\"#声学回声消除器\" class=\"headerlink\" title=\"声学回声消除器\"></a>声学回声消除器</h3><p>在任何免提式通信系统中（下图），远端的语音在本地扬声器播放时，经过在房间里传播后又会被麦克风录音，如果将麦克风录音直接又发送到远端，则远端的用户将会听到他自己的回声<br><img src=\"/2017/12/29/speex/aec.png\" alt=\"aec\"><br>声学回声消除器就是为了在将录音发送到远端前消除声学回声，提高了远端接收的语音质量</p>\n<h3 id=\"重采样器\"><a href=\"#重采样器\" class=\"headerlink\" title=\"重采样器\"></a>重采样器</h3><p>重采样指转换音频的采样率，在任意采样率间进行转换（采样率必须是有理数），能控制质量和复杂度的折中，可用于能混合不同采样率流，支持声卡不支持的采样率，能转码等</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://blog.csdn.net/YJJat1989/article/category/1879965\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/YJJat1989/article/category/1879965</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"wav文件解析","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2019-06-03T07:06:22.000Z","_content":"\n本文将解析`wav`音频文件格式，并实现一套用于读写`wav`文件的`API`。\n\n----------\n<!--more-->\n\n## wav文件解析\n### wav文件简介\n`wav/wave`文件格式是由微软开发的用于音频数字存储的标准，它采用`RIFF`（`Resource Interchange File Format`，资源交换文件标准）文件规范，文件扩展名为`.wav`，采用小端存储。  \n\n### wav文件头\n`wav`文件分成两部分：  \n- 文件头：主要包含标准的44字节文件头或经过了一些软件处理的58字节文件头，文件头中包含`RIFF`数据块，一个`fmt`数据块和一个`data`数据块  \n- 数据块：用于存储数据，数据本身的格式为`PCM`或压缩型\n\n> 本文所介绍的`wav`文件头是标准的44字节文件头。\n\n### wav文件格式\n`wav`文件格式如下:\n![wav_header](wav_header.png)\n\n通过`wav`文件头信息，我们可以计算出音频时长:\n```\n音频时长 = Subchunk2Size/ByteRate\n```\n\n#### 编码类型\n`wav`文件几乎支持所有`ACM`规范的编码格式，其信息存储在文件头`21`、`22`两个字节中，有如下编码格式：\n![audio_code](audio_code.png)\n\n\n### wav文件读写API\n这里提供了一套用于[`wav`文件读写的`API`](https://github.com/AudioTools/wavfile)，欢迎大家来添砖加瓦。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/wav.md","raw":"---\ntitle: wav文件解析\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - wav\ndate: 2019-06-03 15:06:22\ncategories: 语音\n---\n\n本文将解析`wav`音频文件格式，并实现一套用于读写`wav`文件的`API`。\n\n----------\n<!--more-->\n\n## wav文件解析\n### wav文件简介\n`wav/wave`文件格式是由微软开发的用于音频数字存储的标准，它采用`RIFF`（`Resource Interchange File Format`，资源交换文件标准）文件规范，文件扩展名为`.wav`，采用小端存储。  \n\n### wav文件头\n`wav`文件分成两部分：  \n- 文件头：主要包含标准的44字节文件头或经过了一些软件处理的58字节文件头，文件头中包含`RIFF`数据块，一个`fmt`数据块和一个`data`数据块  \n- 数据块：用于存储数据，数据本身的格式为`PCM`或压缩型\n\n> 本文所介绍的`wav`文件头是标准的44字节文件头。\n\n### wav文件格式\n`wav`文件格式如下:\n![wav_header](wav_header.png)\n\n通过`wav`文件头信息，我们可以计算出音频时长:\n```\n音频时长 = Subchunk2Size/ByteRate\n```\n\n#### 编码类型\n`wav`文件几乎支持所有`ACM`规范的编码格式，其信息存储在文件头`21`、`22`两个字节中，有如下编码格式：\n![audio_code](audio_code.png)\n\n\n### wav文件读写API\n这里提供了一套用于[`wav`文件读写的`API`](https://github.com/AudioTools/wavfile)，欢迎大家来添砖加瓦。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"wav","published":1,"updated":"2020-07-21T01:40:07.281Z","layout":"post","photos":[],"link":"","_id":"cklumqgfh003b79n529cnmexx","content":"<p>本文将解析<code>wav</code>音频文件格式，并实现一套用于读写<code>wav</code>文件的<code>API</code>。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"wav文件解析\"><a href=\"#wav文件解析\" class=\"headerlink\" title=\"wav文件解析\"></a>wav文件解析</h2><h3 id=\"wav文件简介\"><a href=\"#wav文件简介\" class=\"headerlink\" title=\"wav文件简介\"></a>wav文件简介</h3><p><code>wav/wave</code>文件格式是由微软开发的用于音频数字存储的标准，它采用<code>RIFF</code>（<code>Resource Interchange File Format</code>，资源交换文件标准）文件规范，文件扩展名为<code>.wav</code>，采用小端存储。  </p>\n<h3 id=\"wav文件头\"><a href=\"#wav文件头\" class=\"headerlink\" title=\"wav文件头\"></a>wav文件头</h3><p><code>wav</code>文件分成两部分：  </p>\n<ul>\n<li>文件头：主要包含标准的44字节文件头或经过了一些软件处理的58字节文件头，文件头中包含<code>RIFF</code>数据块，一个<code>fmt</code>数据块和一个<code>data</code>数据块  </li>\n<li>数据块：用于存储数据，数据本身的格式为<code>PCM</code>或压缩型</li>\n</ul>\n<blockquote>\n<p>本文所介绍的<code>wav</code>文件头是标准的44字节文件头。</p>\n</blockquote>\n<h3 id=\"wav文件格式\"><a href=\"#wav文件格式\" class=\"headerlink\" title=\"wav文件格式\"></a>wav文件格式</h3><p><code>wav</code>文件格式如下:<br><img src=\"/2019/06/03/wav/wav_header.png\" alt=\"wav_header\"></p>\n<p>通过<code>wav</code>文件头信息，我们可以计算出音频时长:<br><figure class=\"highlight fix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">音频时长 </span>=<span class=\"string\"> Subchunk2Size/ByteRate</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"编码类型\"><a href=\"#编码类型\" class=\"headerlink\" title=\"编码类型\"></a>编码类型</h4><p><code>wav</code>文件几乎支持所有<code>ACM</code>规范的编码格式，其信息存储在文件头<code>21</code>、<code>22</code>两个字节中，有如下编码格式：<br><img src=\"/2019/06/03/wav/audio_code.png\" alt=\"audio_code\"></p>\n<h3 id=\"wav文件读写API\"><a href=\"#wav文件读写API\" class=\"headerlink\" title=\"wav文件读写API\"></a>wav文件读写API</h3><p>这里提供了一套用于<a href=\"https://github.com/AudioTools/wavfile\" target=\"_blank\" rel=\"noopener\"><code>wav</code>文件读写的<code>API</code></a>，欢迎大家来添砖加瓦。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文将解析<code>wav</code>音频文件格式，并实现一套用于读写<code>wav</code>文件的<code>API</code>。</p>\n<hr>","more":"<h2 id=\"wav文件解析\"><a href=\"#wav文件解析\" class=\"headerlink\" title=\"wav文件解析\"></a>wav文件解析</h2><h3 id=\"wav文件简介\"><a href=\"#wav文件简介\" class=\"headerlink\" title=\"wav文件简介\"></a>wav文件简介</h3><p><code>wav/wave</code>文件格式是由微软开发的用于音频数字存储的标准，它采用<code>RIFF</code>（<code>Resource Interchange File Format</code>，资源交换文件标准）文件规范，文件扩展名为<code>.wav</code>，采用小端存储。  </p>\n<h3 id=\"wav文件头\"><a href=\"#wav文件头\" class=\"headerlink\" title=\"wav文件头\"></a>wav文件头</h3><p><code>wav</code>文件分成两部分：  </p>\n<ul>\n<li>文件头：主要包含标准的44字节文件头或经过了一些软件处理的58字节文件头，文件头中包含<code>RIFF</code>数据块，一个<code>fmt</code>数据块和一个<code>data</code>数据块  </li>\n<li>数据块：用于存储数据，数据本身的格式为<code>PCM</code>或压缩型</li>\n</ul>\n<blockquote>\n<p>本文所介绍的<code>wav</code>文件头是标准的44字节文件头。</p>\n</blockquote>\n<h3 id=\"wav文件格式\"><a href=\"#wav文件格式\" class=\"headerlink\" title=\"wav文件格式\"></a>wav文件格式</h3><p><code>wav</code>文件格式如下:<br><img src=\"/2019/06/03/wav/wav_header.png\" alt=\"wav_header\"></p>\n<p>通过<code>wav</code>文件头信息，我们可以计算出音频时长:<br><figure class=\"highlight fix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">音频时长 </span>=<span class=\"string\"> Subchunk2Size/ByteRate</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"编码类型\"><a href=\"#编码类型\" class=\"headerlink\" title=\"编码类型\"></a>编码类型</h4><p><code>wav</code>文件几乎支持所有<code>ACM</code>规范的编码格式，其信息存储在文件头<code>21</code>、<code>22</code>两个字节中，有如下编码格式：<br><img src=\"/2019/06/03/wav/audio_code.png\" alt=\"audio_code\"></p>\n<h3 id=\"wav文件读写API\"><a href=\"#wav文件读写API\" class=\"headerlink\" title=\"wav文件读写API\"></a>wav文件读写API</h3><p>这里提供了一套用于<a href=\"https://github.com/AudioTools/wavfile\" target=\"_blank\" rel=\"noopener\"><code>wav</code>文件读写的<code>API</code></a>，欢迎大家来添砖加瓦。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"记一次踩坑|空table应该编码为数组还是对象","Antuor":"AnSwEr(Weijie Yuan)","toc":true,"date":"2017-06-16T07:58:40.000Z","_content":"\n`Json`有两种比较常用的数据类型：被`{}`包裹的对象（`object`），被`[]`包裹的数组（`array`）\n\n<!--more-->\n\n## 问题描述\n从第三方`API`返回的`json`数据，存在一个`key`的值为空数组，可是经过`decode`和`encode`这两步操作后，这个`key`的值就变为空对象了：\n```lua\nlocal cjson = require('cjson')\n\nlocal raw = {}\nraw.name = 'answer'\nraw.list = {}\nlocal str = cjson.encode(raw)\nprint('after cjson encode:', str)\n```\n\n输出：\n```\nafter cjson encode:\t{\"name\":\"answer\",\"list\":{}}\n```\n`cjson`对于空的`table`，会默认处理为`object`，对于`Lua`本身，是无法区分空数组和空字典的（数组和字典融合到一起了），但是对于强类型语言(`C/C++, Java`等)，这时候就会出现问题，必须作容错处理\n\n## 解决方法\n### 使用`encode_empty_table_as_object`方法\n```lua\nlocal cjson = require('cjson')\n\nlocal raw = {}\nraw.name = 'answer'\nraw.list = {}\ncjson.encode_empty_table_as_object(false)\nlocal str = cjson.encode(raw)\nprint('after cjson encode:', str)\n```\n输出：\n```\nafter cjson encode:\t{\"name\":\"answer\",\"list\":[]}\n```\n\n### 更换`dkjson`库\n```lua\nlocal dkjson = require('dkjson')\n\nlocal raw = {}\nraw.name = 'answer'\nraw.list = {}\nlocal str = dkjson.encode(raw)\nprint('after cjson encode:', str)\n```\n输出：\n```\nafter cjson encode:\t{\"name\":\"answer\",\"list\":[]}\n```\n\n### 使用`metatable`将`table`标记为`array`\n```lua\nlocal cjson = require('cjson')\n\nlocal raw = {}\nraw.name = 'answer'\nraw.list = {}\nsetmetatable(raw.list, cjson.empty_array_mt)\nlocal str = cjson.encode(raw)\nprint('after cjson encode:', str)\n```\n\n输出：\n```\nafter cjson encode:\t{\"name\":\"answer\",\"list\":[]}\n```\n\n## Reference\n- [编码为 array 还是 object](https://moonbingbing.gitbooks.io/openresty-best-practices/content/json/array_or_object.html)\n- [使用lua CJSON库如何将空table编码成数组](http://blog.csdn.net/ljfrocky/article/details/53034932?_t=t)\n- [openresty/lua-cjson](https://github.com/openresty/lua-cjson)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/table-encode-as-array-or-object.md","raw":"---\ntitle: 记一次踩坑|空table应该编码为数组还是对象\nAntuor: AnSwEr(Weijie Yuan)\ntoc: true\ndate: 2017-06-16 15:58:40\ncategories: Lua\ntags: lua-cjson\n---\n\n`Json`有两种比较常用的数据类型：被`{}`包裹的对象（`object`），被`[]`包裹的数组（`array`）\n\n<!--more-->\n\n## 问题描述\n从第三方`API`返回的`json`数据，存在一个`key`的值为空数组，可是经过`decode`和`encode`这两步操作后，这个`key`的值就变为空对象了：\n```lua\nlocal cjson = require('cjson')\n\nlocal raw = {}\nraw.name = 'answer'\nraw.list = {}\nlocal str = cjson.encode(raw)\nprint('after cjson encode:', str)\n```\n\n输出：\n```\nafter cjson encode:\t{\"name\":\"answer\",\"list\":{}}\n```\n`cjson`对于空的`table`，会默认处理为`object`，对于`Lua`本身，是无法区分空数组和空字典的（数组和字典融合到一起了），但是对于强类型语言(`C/C++, Java`等)，这时候就会出现问题，必须作容错处理\n\n## 解决方法\n### 使用`encode_empty_table_as_object`方法\n```lua\nlocal cjson = require('cjson')\n\nlocal raw = {}\nraw.name = 'answer'\nraw.list = {}\ncjson.encode_empty_table_as_object(false)\nlocal str = cjson.encode(raw)\nprint('after cjson encode:', str)\n```\n输出：\n```\nafter cjson encode:\t{\"name\":\"answer\",\"list\":[]}\n```\n\n### 更换`dkjson`库\n```lua\nlocal dkjson = require('dkjson')\n\nlocal raw = {}\nraw.name = 'answer'\nraw.list = {}\nlocal str = dkjson.encode(raw)\nprint('after cjson encode:', str)\n```\n输出：\n```\nafter cjson encode:\t{\"name\":\"answer\",\"list\":[]}\n```\n\n### 使用`metatable`将`table`标记为`array`\n```lua\nlocal cjson = require('cjson')\n\nlocal raw = {}\nraw.name = 'answer'\nraw.list = {}\nsetmetatable(raw.list, cjson.empty_array_mt)\nlocal str = cjson.encode(raw)\nprint('after cjson encode:', str)\n```\n\n输出：\n```\nafter cjson encode:\t{\"name\":\"answer\",\"list\":[]}\n```\n\n## Reference\n- [编码为 array 还是 object](https://moonbingbing.gitbooks.io/openresty-best-practices/content/json/array_or_object.html)\n- [使用lua CJSON库如何将空table编码成数组](http://blog.csdn.net/ljfrocky/article/details/53034932?_t=t)\n- [openresty/lua-cjson](https://github.com/openresty/lua-cjson)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"table-encode-as-array-or-object","published":1,"updated":"2019-04-22T08:44:09.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklumqgfj003f79n5gykput91","content":"<p><code>Json</code>有两种比较常用的数据类型：被<code>{}</code>包裹的对象（<code>object</code>），被<code>[]</code>包裹的数组（<code>array</code>）</p>\n<a id=\"more\"></a>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>从第三方<code>API</code>返回的<code>json</code>数据，存在一个<code>key</code>的值为空数组，可是经过<code>decode</code>和<code>encode</code>这两步操作后，这个<code>key</code>的值就变为空对象了：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjson = <span class=\"built_in\">require</span>(<span class=\"string\">'cjson'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> raw = &#123;&#125;</span><br><span class=\"line\">raw.name = <span class=\"string\">'answer'</span></span><br><span class=\"line\">raw.list = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">local</span> str = cjson.encode(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'after cjson encode:'</span>, str)</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">after</span> cjson encode:\t&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"answer\"</span>,<span class=\"string\">\"list\"</span>:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>cjson</code>对于空的<code>table</code>，会默认处理为<code>object</code>，对于<code>Lua</code>本身，是无法区分空数组和空字典的（数组和字典融合到一起了），但是对于强类型语言(<code>C/C++, Java</code>等)，这时候就会出现问题，必须作容错处理</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"使用encode-empty-table-as-object方法\"><a href=\"#使用encode-empty-table-as-object方法\" class=\"headerlink\" title=\"使用encode_empty_table_as_object方法\"></a>使用<code>encode_empty_table_as_object</code>方法</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjson = <span class=\"built_in\">require</span>(<span class=\"string\">'cjson'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> raw = &#123;&#125;</span><br><span class=\"line\">raw.name = <span class=\"string\">'answer'</span></span><br><span class=\"line\">raw.list = &#123;&#125;</span><br><span class=\"line\">cjson.encode_empty_table_as_object(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> str = cjson.encode(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'after cjson encode:'</span>, str)</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after cjson encode:\t&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"answer\"</span>,<span class=\"string\">\"list\"</span>:<span class=\"string\">[]</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更换dkjson库\"><a href=\"#更换dkjson库\" class=\"headerlink\" title=\"更换dkjson库\"></a>更换<code>dkjson</code>库</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> dkjson = <span class=\"built_in\">require</span>(<span class=\"string\">'dkjson'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> raw = &#123;&#125;</span><br><span class=\"line\">raw.name = <span class=\"string\">'answer'</span></span><br><span class=\"line\">raw.list = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">local</span> str = dkjson.encode(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'after cjson encode:'</span>, str)</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after cjson encode:\t&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"answer\"</span>,<span class=\"string\">\"list\"</span>:<span class=\"string\">[]</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用metatable将table标记为array\"><a href=\"#使用metatable将table标记为array\" class=\"headerlink\" title=\"使用metatable将table标记为array\"></a>使用<code>metatable</code>将<code>table</code>标记为<code>array</code></h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjson = <span class=\"built_in\">require</span>(<span class=\"string\">'cjson'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> raw = &#123;&#125;</span><br><span class=\"line\">raw.name = <span class=\"string\">'answer'</span></span><br><span class=\"line\">raw.list = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">setmetatable</span>(raw.list, cjson.empty_array_mt)</span><br><span class=\"line\"><span class=\"keyword\">local</span> str = cjson.encode(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'after cjson encode:'</span>, str)</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after cjson encode:\t&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"answer\"</span>,<span class=\"string\">\"list\"</span>:<span class=\"string\">[]</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/json/array_or_object.html\" target=\"_blank\" rel=\"noopener\">编码为 array 还是 object</a></li>\n<li><a href=\"http://blog.csdn.net/ljfrocky/article/details/53034932?_t=t\" target=\"_blank\" rel=\"noopener\">使用lua CJSON库如何将空table编码成数组</a></li>\n<li><a href=\"https://github.com/openresty/lua-cjson\" target=\"_blank\" rel=\"noopener\">openresty/lua-cjson</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p><code>Json</code>有两种比较常用的数据类型：被<code>{}</code>包裹的对象（<code>object</code>），被<code>[]</code>包裹的数组（<code>array</code>）</p>","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>从第三方<code>API</code>返回的<code>json</code>数据，存在一个<code>key</code>的值为空数组，可是经过<code>decode</code>和<code>encode</code>这两步操作后，这个<code>key</code>的值就变为空对象了：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjson = <span class=\"built_in\">require</span>(<span class=\"string\">'cjson'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> raw = &#123;&#125;</span><br><span class=\"line\">raw.name = <span class=\"string\">'answer'</span></span><br><span class=\"line\">raw.list = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">local</span> str = cjson.encode(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'after cjson encode:'</span>, str)</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">after</span> cjson encode:\t&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"answer\"</span>,<span class=\"string\">\"list\"</span>:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>cjson</code>对于空的<code>table</code>，会默认处理为<code>object</code>，对于<code>Lua</code>本身，是无法区分空数组和空字典的（数组和字典融合到一起了），但是对于强类型语言(<code>C/C++, Java</code>等)，这时候就会出现问题，必须作容错处理</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"使用encode-empty-table-as-object方法\"><a href=\"#使用encode-empty-table-as-object方法\" class=\"headerlink\" title=\"使用encode_empty_table_as_object方法\"></a>使用<code>encode_empty_table_as_object</code>方法</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjson = <span class=\"built_in\">require</span>(<span class=\"string\">'cjson'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> raw = &#123;&#125;</span><br><span class=\"line\">raw.name = <span class=\"string\">'answer'</span></span><br><span class=\"line\">raw.list = &#123;&#125;</span><br><span class=\"line\">cjson.encode_empty_table_as_object(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> str = cjson.encode(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'after cjson encode:'</span>, str)</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after cjson encode:\t&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"answer\"</span>,<span class=\"string\">\"list\"</span>:<span class=\"string\">[]</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更换dkjson库\"><a href=\"#更换dkjson库\" class=\"headerlink\" title=\"更换dkjson库\"></a>更换<code>dkjson</code>库</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> dkjson = <span class=\"built_in\">require</span>(<span class=\"string\">'dkjson'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> raw = &#123;&#125;</span><br><span class=\"line\">raw.name = <span class=\"string\">'answer'</span></span><br><span class=\"line\">raw.list = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">local</span> str = dkjson.encode(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'after cjson encode:'</span>, str)</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after cjson encode:\t&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"answer\"</span>,<span class=\"string\">\"list\"</span>:<span class=\"string\">[]</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用metatable将table标记为array\"><a href=\"#使用metatable将table标记为array\" class=\"headerlink\" title=\"使用metatable将table标记为array\"></a>使用<code>metatable</code>将<code>table</code>标记为<code>array</code></h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjson = <span class=\"built_in\">require</span>(<span class=\"string\">'cjson'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> raw = &#123;&#125;</span><br><span class=\"line\">raw.name = <span class=\"string\">'answer'</span></span><br><span class=\"line\">raw.list = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">setmetatable</span>(raw.list, cjson.empty_array_mt)</span><br><span class=\"line\"><span class=\"keyword\">local</span> str = cjson.encode(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'after cjson encode:'</span>, str)</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after cjson encode:\t&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"answer\"</span>,<span class=\"string\">\"list\"</span>:<span class=\"string\">[]</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/json/array_or_object.html\" target=\"_blank\" rel=\"noopener\">编码为 array 还是 object</a></li>\n<li><a href=\"http://blog.csdn.net/ljfrocky/article/details/53034932?_t=t\" target=\"_blank\" rel=\"noopener\">使用lua CJSON库如何将空table编码成数组</a></li>\n<li><a href=\"https://github.com/openresty/lua-cjson\" target=\"_blank\" rel=\"noopener\">openresty/lua-cjson</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"sysroot为何物?","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2019-04-26T09:59:57.000Z","_content":"\n本文介绍链接过程中`sysroot`的作用。\n\n-----\n\n<!--more-->\n\n## sysroot为何物\n做过交叉编译的同学们，一定对下面这个错误十分熟悉吧：\n```\n/cross-compiling/ld: cannot find crt1.o: No such file or directory\n/cross-compiling/ld: cannot find crti.o: No such file or directory\n```\n在我们的`pc`上，这两个文件一般在`/usr/lib`或者`/usr/lib32`中，通过`gcc -print-search-dirs`可以看到这两个路径默认就在库的搜索路径中，所以在`pc`上编译程序时不存在链接器找不到`crt1.o`和`crti.o`的问题。\n> `crt1.o`负责应用程序的启动，其中包含了程序的入口函数`_start`以及两个未定义的符号`__libc_start_main`和`main`，由`_start`负责调用`__libc_start_main`初始化`libc`，然后调用我们源代码中定义的`main`函数，`crti.o`负责辅助启动这些代码。\n\n下面我们使用交叉编译工具链来查看库的搜索路径`/cross-compiling/gcc -print-search-dirs`，发现`crt1.o`和`crti.o`的所在目录并不在库的搜索路径中，所以会出现上述的问题。\n\n下面就需要`sysroot`出场了。\n`sysroot`被称为逻辑根目录，只在链接过程中起作用，作为交叉编译工具链搜索库文件的根路径，如配置`--sysroot=dir`，则`dir`作为逻辑根目录，链接器将在`dir/usr/lib`中搜索库文件。\n\n> 只有链接器开启了--with-sysroot选项，--sysroot=director才生效\n\n\n## Reference\n- [crti.o file missing](https://stackoverflow.com/questions/91576/crti-o-file-missing)\n- [crt1.o, crti.o, crtbegin.o, crtend.o, crtn.o](https://blog.csdn.net/farmwang/article/details/73195951)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","source":"_posts/what-is-sysroot.md","raw":"---\ntitle: sysroot为何物?\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - ld\n  - sysroot\ndate: 2019-04-26 17:59:57\ncategories: 编译链接\n---\n\n本文介绍链接过程中`sysroot`的作用。\n\n-----\n\n<!--more-->\n\n## sysroot为何物\n做过交叉编译的同学们，一定对下面这个错误十分熟悉吧：\n```\n/cross-compiling/ld: cannot find crt1.o: No such file or directory\n/cross-compiling/ld: cannot find crti.o: No such file or directory\n```\n在我们的`pc`上，这两个文件一般在`/usr/lib`或者`/usr/lib32`中，通过`gcc -print-search-dirs`可以看到这两个路径默认就在库的搜索路径中，所以在`pc`上编译程序时不存在链接器找不到`crt1.o`和`crti.o`的问题。\n> `crt1.o`负责应用程序的启动，其中包含了程序的入口函数`_start`以及两个未定义的符号`__libc_start_main`和`main`，由`_start`负责调用`__libc_start_main`初始化`libc`，然后调用我们源代码中定义的`main`函数，`crti.o`负责辅助启动这些代码。\n\n下面我们使用交叉编译工具链来查看库的搜索路径`/cross-compiling/gcc -print-search-dirs`，发现`crt1.o`和`crti.o`的所在目录并不在库的搜索路径中，所以会出现上述的问题。\n\n下面就需要`sysroot`出场了。\n`sysroot`被称为逻辑根目录，只在链接过程中起作用，作为交叉编译工具链搜索库文件的根路径，如配置`--sysroot=dir`，则`dir`作为逻辑根目录，链接器将在`dir/usr/lib`中搜索库文件。\n\n> 只有链接器开启了--with-sysroot选项，--sysroot=director才生效\n\n\n## Reference\n- [crti.o file missing](https://stackoverflow.com/questions/91576/crti-o-file-missing)\n- [crt1.o, crti.o, crtbegin.o, crtend.o, crtn.o](https://blog.csdn.net/farmwang/article/details/73195951)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。","slug":"what-is-sysroot","published":1,"updated":"2020-07-21T01:40:07.281Z","layout":"post","photos":[],"link":"","_id":"cklumqgfk003h79n57l37ftb7","content":"<p>本文介绍链接过程中<code>sysroot</code>的作用。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"sysroot为何物\"><a href=\"#sysroot为何物\" class=\"headerlink\" title=\"sysroot为何物\"></a>sysroot为何物</h2><p>做过交叉编译的同学们，一定对下面这个错误十分熟悉吧：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/cross-compiling/ld: cannot <span class=\"builtin-name\">find</span> crt1.o: <span class=\"literal\">No</span> such file <span class=\"keyword\">or</span> directory</span><br><span class=\"line\">/cross-compiling/ld: cannot <span class=\"builtin-name\">find</span> crti.o: <span class=\"literal\">No</span> such file <span class=\"keyword\">or</span> directory</span><br></pre></td></tr></table></figure></p>\n<p>在我们的<code>pc</code>上，这两个文件一般在<code>/usr/lib</code>或者<code>/usr/lib32</code>中，通过<code>gcc -print-search-dirs</code>可以看到这两个路径默认就在库的搜索路径中，所以在<code>pc</code>上编译程序时不存在链接器找不到<code>crt1.o</code>和<code>crti.o</code>的问题。</p>\n<blockquote>\n<p><code>crt1.o</code>负责应用程序的启动，其中包含了程序的入口函数<code>_start</code>以及两个未定义的符号<code>__libc_start_main</code>和<code>main</code>，由<code>_start</code>负责调用<code>__libc_start_main</code>初始化<code>libc</code>，然后调用我们源代码中定义的<code>main</code>函数，<code>crti.o</code>负责辅助启动这些代码。</p>\n</blockquote>\n<p>下面我们使用交叉编译工具链来查看库的搜索路径<code>/cross-compiling/gcc -print-search-dirs</code>，发现<code>crt1.o</code>和<code>crti.o</code>的所在目录并不在库的搜索路径中，所以会出现上述的问题。</p>\n<p>下面就需要<code>sysroot</code>出场了。<br><code>sysroot</code>被称为逻辑根目录，只在链接过程中起作用，作为交叉编译工具链搜索库文件的根路径，如配置<code>--sysroot=dir</code>，则<code>dir</code>作为逻辑根目录，链接器将在<code>dir/usr/lib</code>中搜索库文件。</p>\n<blockquote>\n<p>只有链接器开启了–with-sysroot选项，–sysroot=director才生效</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/91576/crti-o-file-missing\" target=\"_blank\" rel=\"noopener\">crti.o file missing</a></li>\n<li><a href=\"https://blog.csdn.net/farmwang/article/details/73195951\" target=\"_blank\" rel=\"noopener\">crt1.o, crti.o, crtbegin.o, crtend.o, crtn.o</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文介绍链接过程中<code>sysroot</code>的作用。</p>\n<hr>","more":"<h2 id=\"sysroot为何物\"><a href=\"#sysroot为何物\" class=\"headerlink\" title=\"sysroot为何物\"></a>sysroot为何物</h2><p>做过交叉编译的同学们，一定对下面这个错误十分熟悉吧：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/cross-compiling/ld: cannot <span class=\"builtin-name\">find</span> crt1.o: <span class=\"literal\">No</span> such file <span class=\"keyword\">or</span> directory</span><br><span class=\"line\">/cross-compiling/ld: cannot <span class=\"builtin-name\">find</span> crti.o: <span class=\"literal\">No</span> such file <span class=\"keyword\">or</span> directory</span><br></pre></td></tr></table></figure></p>\n<p>在我们的<code>pc</code>上，这两个文件一般在<code>/usr/lib</code>或者<code>/usr/lib32</code>中，通过<code>gcc -print-search-dirs</code>可以看到这两个路径默认就在库的搜索路径中，所以在<code>pc</code>上编译程序时不存在链接器找不到<code>crt1.o</code>和<code>crti.o</code>的问题。</p>\n<blockquote>\n<p><code>crt1.o</code>负责应用程序的启动，其中包含了程序的入口函数<code>_start</code>以及两个未定义的符号<code>__libc_start_main</code>和<code>main</code>，由<code>_start</code>负责调用<code>__libc_start_main</code>初始化<code>libc</code>，然后调用我们源代码中定义的<code>main</code>函数，<code>crti.o</code>负责辅助启动这些代码。</p>\n</blockquote>\n<p>下面我们使用交叉编译工具链来查看库的搜索路径<code>/cross-compiling/gcc -print-search-dirs</code>，发现<code>crt1.o</code>和<code>crti.o</code>的所在目录并不在库的搜索路径中，所以会出现上述的问题。</p>\n<p>下面就需要<code>sysroot</code>出场了。<br><code>sysroot</code>被称为逻辑根目录，只在链接过程中起作用，作为交叉编译工具链搜索库文件的根路径，如配置<code>--sysroot=dir</code>，则<code>dir</code>作为逻辑根目录，链接器将在<code>dir/usr/lib</code>中搜索库文件。</p>\n<blockquote>\n<p>只有链接器开启了–with-sysroot选项，–sysroot=director才生效</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/91576/crti-o-file-missing\" target=\"_blank\" rel=\"noopener\">crti.o file missing</a></li>\n<li><a href=\"https://blog.csdn.net/farmwang/article/details/73195951\" target=\"_blank\" rel=\"noopener\">crt1.o, crti.o, crtbegin.o, crtend.o, crtn.o</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux下C调用静态库和动态库","Antuor":"AnSwEr(Weijie Yuan)","toc":true,"date":"2016-10-10T02:50:40.000Z","_content":"\n本文主要介绍Linux下C调用静态库和动态库,使用的样例文件请点击[这里](https://github.com/AnSwErYWJ/DogFood/tree/master/C/aso).\n<!--more-->\n\n## 样例文件\nwelcome.c:\n```\n#include<stdio.h>\n#include\"welcome.h\"\n\nvoid welcome()\n{\n    printf(\"welcome to my code world!\\n\");\n}\n```\n> 这是一个样例程序,打印一句话.\n\nwelcome.h:\n```\n#ifndef _WELCOME_H\n#define _WELCOME_H\n\nvoid welcome();\n\n#endif\n```\n> 为上一个文件的声明.\n\n## 概念\n动态库和静态库二者的不同点在于代码被载入的时刻不同。\n\n静态库的代码在编译过程中已经被载入可执行程序,因此体积比较大。动态库(共享库)的代码在可执行程序运行时才载入内存，在编译过程中仅简单的引用，因此代码体积比较小。\n\n静态情况下,把库直接加载到程序中,而动态库链接的时候,它只是保留接口,将动态库与程序代码独立,这样就可以提高代码的可复用度，和降低程序的耦合度。\n\n静态库在程序编译时会被连接到目标代码中，程序运行时将不再需要该静态库。动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入，因此在程序运行时还需要动态库存在.\n\n## 静态库\n生成静态库文件:\n```\n$ gcc -Wall -O2 -fPIC -I./  -c -o welcome.o welcome.c\n$ ar crv libwelcome.a welcome.o\n```\nar命令的参数如下:\n```\n参数        意义\n-r      将objfile文件插入静态库尾或者替换静态库中同名文件\n-x      从静态库文件中抽取文件objfile\n-t      打印静态库的成员文件列表\n-d      从静态库中删除文件objfile\n-s      重置静态库文件索引\n-v      创建文件冗余信息\n-c      创建静态库文件\n```\n\ntest-sta.c:\n```\n#include<stdio.h>\n\nint main(void)\n{\n    welcome();\n    \n    return 0;\n}\n```\n\n编译:\n```\n$ gcc test-sta.c -o test-sta ./libwelcome.a\n```\n运行:\n```\n$ ./test-sta \n$ welcome to my code world!\n```\n\n\n## 动态库\n生成动态库文件: \n```\n$ gcc -o2 -fPIC -shared welcome.c -o libwelcome.so\nor\n$ gcc -o2 -fPIC -c welcome.c \n$ gcc -shared -o libwelcome.so welcome.o \n```\n其中:\n-\tfPIC : 产生与位置无关代码,全部使用相对地址.\n-\tshared : 生成动态库.\n\n\n### 编译时加载(隐式)\ntest-implicit.c:\n```\n#include<stdio.h>\n\nint main()\n{\n    welcome();\n\n    return 0;\n}\n```\n\n> 和静态库一样,测试代码不需要包含导出函数的头文件.\n\n编译:\n```\n$ gcc -o2 -Wall -L. -lwelcome test-implicit.c -o test-implicit\n```\n\n查看`test-implicit`动态段信息,发现已经依赖`libwelcome.so`:\n```\n$ ldd test-implicit \n\tlinux-vdso.so.1 =>  (0x00007f0902951000)\n\tlibwelcome.so => ./libwelcome.so (0x00007f090274f000)\n\tlibstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x0000003548600000)\n\tlibm.so.6 => /lib64/libm.so.6 (0x000000353de00000)\n\tlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x0000003548200000)\n\tlibc.so.6 => /lib64/libc.so.6 (0x000000353da00000)\n\t/lib64/ld-linux-x86-64.so.2 (0x000000353d600000)\n```\n\n若此时直接运行,会提示找不到动态库:\n```\n$ ./test-implicit\n$ ./test-implicit: error while loading shared libraries: libwelcome.so: cannot open shared object file: No such file or directory\n```\n可以通过下列三种方法解决:\n```\n# 方法一 修改环境变量\n$ export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH\n\n# 方法二 将库文件链接到系统目录下\n$ ln -s ./libwelcome.so /usr/lib\n\n# 方法三 修改/etc/ld.so.conf\n$ sudo echo $(pwd) >> /etc/ld.so.conf\n$ sudo ldconfig\n```\n再次运行:\n```\n$ ./test-implicit\n$ welcome to my code world!\n```\n\n### 运行时链接(显式)\ntest-explicit.c:\n```\n#include<stdio.h>\n#include<dlfcn.h>\n\n#define LIB \"./libwelcome.so\"\n\nint main(void)\n{\n    /*\n     * RTLD_NOW：将共享库中的所有函数加载到内存 \n     * RTLD_LAZY：会推后共享库中的函数的加载操作，直到调用dlsym()时方加载某函数\n     */\n\n    void *dl = dlopen(LIB,RTLD_LAZY); //打开动态库\n\n    if (dl == NULL)\n        fprintf(stderr,\"Error:failed to load libary.\\n\");\n\n    char *error = dlerror(); //检测错误\n    if (error != NULL)\n    {\n        fprintf(stderr,\"%s\\n\",error);\n        return -1;\n    }\n\n    void (*func)() = dlsym(dl,\"welcome\"); // 获取函数地址\n    error = dlerror(); //检测错误\n    if (error != NULL)\n    {\n        fprintf(stderr,\"%s\\n\",error);\n        return -1;\n    }\n\n    func(); //调用动态库中的函数\n\n    dlclose(dl); //关闭动态库\n    error = dlerror(); //检测错误\n    if (error != NULL)\n    {\n        fprintf(stderr,\"%s\\n\",error);\n        return -1;\n    }\n   \n    return 0;\n}\n```\n编译:\n``` \n$ gcc  -ldl test-explicit.c -o test-explicit\n```\n\n查看`test-explicit`动态段信息,没有发现依赖`libwelcome.so`:\n```\n$ ldd test-explicit\n\tlinux-vdso.so.1 =>  (0x00007ffed89e5000)\n\tlibdl.so.2 => /lib64/libdl.so.2 (0x000000353e600000)\n\tlibstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x0000003548600000)\n\tlibm.so.6 => /lib64/libm.so.6 (0x000000353de00000)\n\tlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x0000003548200000)\n\tlibc.so.6 => /lib64/libc.so.6 (0x000000353da00000)\n\t/lib64/ld-linux-x86-64.so.2 (0x000000353d600000)\n```\n\n运行:\n```\n$ ./test-explicit\n$ welcome to my code world!\n```\n\n\n>  区别: 隐式调用在编译可执行程序时需要指定库文件的搜索路径，而显式调用编译可执行程序时不用加上.\n\n## Reference\n- [Linux下静态、动态库（隐式、显式调用）的创建和使用及区别](http://blog.csdn.net/star_xiong/article/details/17301191)\n- [Linux下编译链接动态库](http://hbprotoss.github.io/posts/linuxxia-bian-yi-lian-jie-dong-tai-ku.html)\n- [Linux下动态库(.so)和静态库(.a)](http://blog.csdn.net/felixit0120/article/details/7652907)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","source":"_posts/use-dynamic-and-static-library.md","raw":"---\ntitle: Linux下C调用静态库和动态库\nAntuor: AnSwEr(Weijie Yuan)\ntoc: true\ndate: 2016-10-10 10:50:40\ncategories: 编译链接\ntags: lib\n---\n\n本文主要介绍Linux下C调用静态库和动态库,使用的样例文件请点击[这里](https://github.com/AnSwErYWJ/DogFood/tree/master/C/aso).\n<!--more-->\n\n## 样例文件\nwelcome.c:\n```\n#include<stdio.h>\n#include\"welcome.h\"\n\nvoid welcome()\n{\n    printf(\"welcome to my code world!\\n\");\n}\n```\n> 这是一个样例程序,打印一句话.\n\nwelcome.h:\n```\n#ifndef _WELCOME_H\n#define _WELCOME_H\n\nvoid welcome();\n\n#endif\n```\n> 为上一个文件的声明.\n\n## 概念\n动态库和静态库二者的不同点在于代码被载入的时刻不同。\n\n静态库的代码在编译过程中已经被载入可执行程序,因此体积比较大。动态库(共享库)的代码在可执行程序运行时才载入内存，在编译过程中仅简单的引用，因此代码体积比较小。\n\n静态情况下,把库直接加载到程序中,而动态库链接的时候,它只是保留接口,将动态库与程序代码独立,这样就可以提高代码的可复用度，和降低程序的耦合度。\n\n静态库在程序编译时会被连接到目标代码中，程序运行时将不再需要该静态库。动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入，因此在程序运行时还需要动态库存在.\n\n## 静态库\n生成静态库文件:\n```\n$ gcc -Wall -O2 -fPIC -I./  -c -o welcome.o welcome.c\n$ ar crv libwelcome.a welcome.o\n```\nar命令的参数如下:\n```\n参数        意义\n-r      将objfile文件插入静态库尾或者替换静态库中同名文件\n-x      从静态库文件中抽取文件objfile\n-t      打印静态库的成员文件列表\n-d      从静态库中删除文件objfile\n-s      重置静态库文件索引\n-v      创建文件冗余信息\n-c      创建静态库文件\n```\n\ntest-sta.c:\n```\n#include<stdio.h>\n\nint main(void)\n{\n    welcome();\n    \n    return 0;\n}\n```\n\n编译:\n```\n$ gcc test-sta.c -o test-sta ./libwelcome.a\n```\n运行:\n```\n$ ./test-sta \n$ welcome to my code world!\n```\n\n\n## 动态库\n生成动态库文件: \n```\n$ gcc -o2 -fPIC -shared welcome.c -o libwelcome.so\nor\n$ gcc -o2 -fPIC -c welcome.c \n$ gcc -shared -o libwelcome.so welcome.o \n```\n其中:\n-\tfPIC : 产生与位置无关代码,全部使用相对地址.\n-\tshared : 生成动态库.\n\n\n### 编译时加载(隐式)\ntest-implicit.c:\n```\n#include<stdio.h>\n\nint main()\n{\n    welcome();\n\n    return 0;\n}\n```\n\n> 和静态库一样,测试代码不需要包含导出函数的头文件.\n\n编译:\n```\n$ gcc -o2 -Wall -L. -lwelcome test-implicit.c -o test-implicit\n```\n\n查看`test-implicit`动态段信息,发现已经依赖`libwelcome.so`:\n```\n$ ldd test-implicit \n\tlinux-vdso.so.1 =>  (0x00007f0902951000)\n\tlibwelcome.so => ./libwelcome.so (0x00007f090274f000)\n\tlibstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x0000003548600000)\n\tlibm.so.6 => /lib64/libm.so.6 (0x000000353de00000)\n\tlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x0000003548200000)\n\tlibc.so.6 => /lib64/libc.so.6 (0x000000353da00000)\n\t/lib64/ld-linux-x86-64.so.2 (0x000000353d600000)\n```\n\n若此时直接运行,会提示找不到动态库:\n```\n$ ./test-implicit\n$ ./test-implicit: error while loading shared libraries: libwelcome.so: cannot open shared object file: No such file or directory\n```\n可以通过下列三种方法解决:\n```\n# 方法一 修改环境变量\n$ export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH\n\n# 方法二 将库文件链接到系统目录下\n$ ln -s ./libwelcome.so /usr/lib\n\n# 方法三 修改/etc/ld.so.conf\n$ sudo echo $(pwd) >> /etc/ld.so.conf\n$ sudo ldconfig\n```\n再次运行:\n```\n$ ./test-implicit\n$ welcome to my code world!\n```\n\n### 运行时链接(显式)\ntest-explicit.c:\n```\n#include<stdio.h>\n#include<dlfcn.h>\n\n#define LIB \"./libwelcome.so\"\n\nint main(void)\n{\n    /*\n     * RTLD_NOW：将共享库中的所有函数加载到内存 \n     * RTLD_LAZY：会推后共享库中的函数的加载操作，直到调用dlsym()时方加载某函数\n     */\n\n    void *dl = dlopen(LIB,RTLD_LAZY); //打开动态库\n\n    if (dl == NULL)\n        fprintf(stderr,\"Error:failed to load libary.\\n\");\n\n    char *error = dlerror(); //检测错误\n    if (error != NULL)\n    {\n        fprintf(stderr,\"%s\\n\",error);\n        return -1;\n    }\n\n    void (*func)() = dlsym(dl,\"welcome\"); // 获取函数地址\n    error = dlerror(); //检测错误\n    if (error != NULL)\n    {\n        fprintf(stderr,\"%s\\n\",error);\n        return -1;\n    }\n\n    func(); //调用动态库中的函数\n\n    dlclose(dl); //关闭动态库\n    error = dlerror(); //检测错误\n    if (error != NULL)\n    {\n        fprintf(stderr,\"%s\\n\",error);\n        return -1;\n    }\n   \n    return 0;\n}\n```\n编译:\n``` \n$ gcc  -ldl test-explicit.c -o test-explicit\n```\n\n查看`test-explicit`动态段信息,没有发现依赖`libwelcome.so`:\n```\n$ ldd test-explicit\n\tlinux-vdso.so.1 =>  (0x00007ffed89e5000)\n\tlibdl.so.2 => /lib64/libdl.so.2 (0x000000353e600000)\n\tlibstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x0000003548600000)\n\tlibm.so.6 => /lib64/libm.so.6 (0x000000353de00000)\n\tlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x0000003548200000)\n\tlibc.so.6 => /lib64/libc.so.6 (0x000000353da00000)\n\t/lib64/ld-linux-x86-64.so.2 (0x000000353d600000)\n```\n\n运行:\n```\n$ ./test-explicit\n$ welcome to my code world!\n```\n\n\n>  区别: 隐式调用在编译可执行程序时需要指定库文件的搜索路径，而显式调用编译可执行程序时不用加上.\n\n## Reference\n- [Linux下静态、动态库（隐式、显式调用）的创建和使用及区别](http://blog.csdn.net/star_xiong/article/details/17301191)\n- [Linux下编译链接动态库](http://hbprotoss.github.io/posts/linuxxia-bian-yi-lian-jie-dong-tai-ku.html)\n- [Linux下动态库(.so)和静态库(.a)](http://blog.csdn.net/felixit0120/article/details/7652907)\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.  \n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n","slug":"use-dynamic-and-static-library","published":1,"updated":"2020-07-21T01:40:07.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklumqgfm003l79n5zof467a2","content":"<p>本文主要介绍Linux下C调用静态库和动态库,使用的样例文件请点击<a href=\"https://github.com/AnSwErYWJ/DogFood/tree/master/C/aso\" target=\"_blank\" rel=\"noopener\">这里</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"样例文件\"><a href=\"#样例文件\" class=\"headerlink\" title=\"样例文件\"></a>样例文件</h2><p>welcome.c:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"welcome.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">welcome</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"welcome to my code world!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这是一个样例程序,打印一句话.</p>\n</blockquote>\n<p>welcome.h:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _WELCOME_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _WELCOME_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">welcome</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>为上一个文件的声明.</p>\n</blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>动态库和静态库二者的不同点在于代码被载入的时刻不同。</p>\n<p>静态库的代码在编译过程中已经被载入可执行程序,因此体积比较大。动态库(共享库)的代码在可执行程序运行时才载入内存，在编译过程中仅简单的引用，因此代码体积比较小。</p>\n<p>静态情况下,把库直接加载到程序中,而动态库链接的时候,它只是保留接口,将动态库与程序代码独立,这样就可以提高代码的可复用度，和降低程序的耦合度。</p>\n<p>静态库在程序编译时会被连接到目标代码中，程序运行时将不再需要该静态库。动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入，因此在程序运行时还需要动态库存在.</p>\n<h2 id=\"静态库\"><a href=\"#静态库\" class=\"headerlink\" title=\"静态库\"></a>静态库</h2><p>生成静态库文件:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -Wall -O2 -fPIC -I./  -c -o welcome<span class=\"selector-class\">.o</span> welcome.c</span><br><span class=\"line\">$ ar crv libwelcome<span class=\"selector-class\">.a</span> welcome.o</span><br></pre></td></tr></table></figure></p>\n<p>ar命令的参数如下:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数        意义</span><br><span class=\"line\"><span class=\"deletion\">-r      将objfile文件插入静态库尾或者替换静态库中同名文件</span></span><br><span class=\"line\"><span class=\"deletion\">-x      从静态库文件中抽取文件objfile</span></span><br><span class=\"line\"><span class=\"deletion\">-t      打印静态库的成员文件列表</span></span><br><span class=\"line\"><span class=\"deletion\">-d      从静态库中删除文件objfile</span></span><br><span class=\"line\"><span class=\"deletion\">-s      重置静态库文件索引</span></span><br><span class=\"line\"><span class=\"deletion\">-v      创建文件冗余信息</span></span><br><span class=\"line\"><span class=\"deletion\">-c      创建静态库文件</span></span><br></pre></td></tr></table></figure></p>\n<p>test-sta.c:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    welcome();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gcc <span class=\"built_in\">test</span>-sta.c -o <span class=\"built_in\">test</span>-sta ./libwelcome.a</span></span><br></pre></td></tr></table></figure></p>\n<p>运行:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./<span class=\"built_in\">test</span>-sta </span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> welcome to my code world!</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动态库\"><a href=\"#动态库\" class=\"headerlink\" title=\"动态库\"></a>动态库</h2><p>生成动态库文件:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o2 -fPIC -shared welcome<span class=\"selector-class\">.c</span> -o libwelcome.so</span><br><span class=\"line\">or</span><br><span class=\"line\">$ gcc -o2 -fPIC -c welcome<span class=\"selector-class\">.c</span> </span><br><span class=\"line\">$ gcc -shared -o libwelcome<span class=\"selector-class\">.so</span> welcome.o</span><br></pre></td></tr></table></figure></p>\n<p>其中:</p>\n<ul>\n<li>fPIC : 产生与位置无关代码,全部使用相对地址.</li>\n<li>shared : 生成动态库.</li>\n</ul>\n<h3 id=\"编译时加载-隐式\"><a href=\"#编译时加载-隐式\" class=\"headerlink\" title=\"编译时加载(隐式)\"></a>编译时加载(隐式)</h3><p>test-implicit.c:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    welcome();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>和静态库一样,测试代码不需要包含导出函数的头文件.</p>\n</blockquote>\n<p>编译:<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o2 -Wall -L. -lwelcome test-<span class=\"keyword\">implicit</span>.c -o test-<span class=\"keyword\">implicit</span></span><br></pre></td></tr></table></figure></p>\n<p>查看<code>test-implicit</code>动态段信息,发现已经依赖<code>libwelcome.so</code>:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldd test-implicit </span><br><span class=\"line\">\tlinux-vdso<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> =&gt;  (<span class=\"number\">0</span>x00007f0902951000)</span><br><span class=\"line\">\tlibwelcome<span class=\"selector-class\">.so</span> =&gt; ./libwelcome<span class=\"selector-class\">.so</span> (<span class=\"number\">0</span>x00007f090274f000)</span><br><span class=\"line\">\tlibstdc++<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /usr/lib64/libstdc++<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x0000003548600000)</span><br><span class=\"line\">\tlibm<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /lib64/libm<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x000000353de00000)</span><br><span class=\"line\">\tlibgcc_s<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> =&gt; /lib64/libgcc_s<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> (<span class=\"number\">0</span>x0000003548200000)</span><br><span class=\"line\">\tlibc<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /lib64/libc<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x000000353da00000)</span><br><span class=\"line\">\t/lib64/ld-linux-x86-<span class=\"number\">64</span><span class=\"selector-class\">.so</span>.<span class=\"number\">2</span> (<span class=\"number\">0</span>x000000353d600000)</span><br></pre></td></tr></table></figure></p>\n<p>若此时直接运行,会提示找不到动态库:<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./test-<span class=\"keyword\">implicit</span></span><br><span class=\"line\">$ ./test-<span class=\"keyword\">implicit</span>: error <span class=\"keyword\">while</span> loading shared libraries: libwelcome.so: cannot open shared object <span class=\"keyword\">file</span>: No such <span class=\"keyword\">file</span> or directory</span><br></pre></td></tr></table></figure></p>\n<p>可以通过下列三种方法解决:<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法一 修改环境变量</span></span><br><span class=\"line\">$ export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法二 将库文件链接到系统目录下</span></span><br><span class=\"line\">$ ln -s ./libwelcome.so /usr/<span class=\"class\"><span class=\"keyword\">lib</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法三 修改/etc/ld.so.conf</span></span><br><span class=\"line\">$ sudo echo $(pwd) &gt;&gt; <span class=\"regexp\">/etc/ld</span>.so.conf</span><br><span class=\"line\">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p>\n<p>再次运行:<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./test-<span class=\"keyword\">implicit</span></span><br><span class=\"line\">$ welcome to my code world<span class=\"comment\">!</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行时链接-显式\"><a href=\"#运行时链接-显式\" class=\"headerlink\" title=\"运行时链接(显式)\"></a>运行时链接(显式)</h3><p>test-explicit.c:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;dlfcn.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LIB <span class=\"meta-string\">\"./libwelcome.so\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * RTLD_NOW：将共享库中的所有函数加载到内存 </span></span><br><span class=\"line\"><span class=\"comment\">     * RTLD_LAZY：会推后共享库中的函数的加载操作，直到调用dlsym()时方加载某函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *dl = dlopen(LIB,RTLD_LAZY); <span class=\"comment\">//打开动态库</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dl == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"Error:failed to load libary.\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *error = dlerror(); <span class=\"comment\">//检测错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"%s\\n\"</span>,error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*func)() = dlsym(dl,<span class=\"string\">\"welcome\"</span>); <span class=\"comment\">// 获取函数地址</span></span><br><span class=\"line\">    error = dlerror(); <span class=\"comment\">//检测错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"%s\\n\"</span>,error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    func(); <span class=\"comment\">//调用动态库中的函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dlclose(dl); <span class=\"comment\">//关闭动态库</span></span><br><span class=\"line\">    error = dlerror(); <span class=\"comment\">//检测错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"%s\\n\"</span>,error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gcc  -ldl <span class=\"built_in\">test</span>-explicit.c -o <span class=\"built_in\">test</span>-explicit</span></span><br></pre></td></tr></table></figure></p>\n<p>查看<code>test-explicit</code>动态段信息,没有发现依赖<code>libwelcome.so</code>:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldd test-explicit</span><br><span class=\"line\">\tlinux-vdso<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> =&gt;  (<span class=\"number\">0</span>x00007ffed89e5000)</span><br><span class=\"line\">\tlibdl<span class=\"selector-class\">.so</span>.<span class=\"number\">2</span> =&gt; /lib64/libdl<span class=\"selector-class\">.so</span>.<span class=\"number\">2</span> (<span class=\"number\">0</span>x000000353e600000)</span><br><span class=\"line\">\tlibstdc++<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /usr/lib64/libstdc++<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x0000003548600000)</span><br><span class=\"line\">\tlibm<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /lib64/libm<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x000000353de00000)</span><br><span class=\"line\">\tlibgcc_s<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> =&gt; /lib64/libgcc_s<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> (<span class=\"number\">0</span>x0000003548200000)</span><br><span class=\"line\">\tlibc<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /lib64/libc<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x000000353da00000)</span><br><span class=\"line\">\t/lib64/ld-linux-x86-<span class=\"number\">64</span><span class=\"selector-class\">.so</span>.<span class=\"number\">2</span> (<span class=\"number\">0</span>x000000353d600000)</span><br></pre></td></tr></table></figure></p>\n<p>运行:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./<span class=\"built_in\">test</span>-explicit</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> welcome to my code world!</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p> 区别: 隐式调用在编译可执行程序时需要指定库文件的搜索路径，而显式调用编译可执行程序时不用加上.</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://blog.csdn.net/star_xiong/article/details/17301191\" target=\"_blank\" rel=\"noopener\">Linux下静态、动态库（隐式、显式调用）的创建和使用及区别</a></li>\n<li><a href=\"http://hbprotoss.github.io/posts/linuxxia-bian-yi-lian-jie-dong-tai-ku.html\" target=\"_blank\" rel=\"noopener\">Linux下编译链接动态库</a></li>\n<li><a href=\"http://blog.csdn.net/felixit0120/article/details/7652907\" target=\"_blank\" rel=\"noopener\">Linux下动态库(.so)和静态库(.a)</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍Linux下C调用静态库和动态库,使用的样例文件请点击<a href=\"https://github.com/AnSwErYWJ/DogFood/tree/master/C/aso\" target=\"_blank\" rel=\"noopener\">这里</a>.<br></p>","more":"<p></p>\n<h2 id=\"样例文件\"><a href=\"#样例文件\" class=\"headerlink\" title=\"样例文件\"></a>样例文件</h2><p>welcome.c:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"welcome.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">welcome</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"welcome to my code world!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这是一个样例程序,打印一句话.</p>\n</blockquote>\n<p>welcome.h:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _WELCOME_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _WELCOME_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">welcome</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>为上一个文件的声明.</p>\n</blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>动态库和静态库二者的不同点在于代码被载入的时刻不同。</p>\n<p>静态库的代码在编译过程中已经被载入可执行程序,因此体积比较大。动态库(共享库)的代码在可执行程序运行时才载入内存，在编译过程中仅简单的引用，因此代码体积比较小。</p>\n<p>静态情况下,把库直接加载到程序中,而动态库链接的时候,它只是保留接口,将动态库与程序代码独立,这样就可以提高代码的可复用度，和降低程序的耦合度。</p>\n<p>静态库在程序编译时会被连接到目标代码中，程序运行时将不再需要该静态库。动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入，因此在程序运行时还需要动态库存在.</p>\n<h2 id=\"静态库\"><a href=\"#静态库\" class=\"headerlink\" title=\"静态库\"></a>静态库</h2><p>生成静态库文件:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -Wall -O2 -fPIC -I./  -c -o welcome<span class=\"selector-class\">.o</span> welcome.c</span><br><span class=\"line\">$ ar crv libwelcome<span class=\"selector-class\">.a</span> welcome.o</span><br></pre></td></tr></table></figure></p>\n<p>ar命令的参数如下:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数        意义</span><br><span class=\"line\"><span class=\"deletion\">-r      将objfile文件插入静态库尾或者替换静态库中同名文件</span></span><br><span class=\"line\"><span class=\"deletion\">-x      从静态库文件中抽取文件objfile</span></span><br><span class=\"line\"><span class=\"deletion\">-t      打印静态库的成员文件列表</span></span><br><span class=\"line\"><span class=\"deletion\">-d      从静态库中删除文件objfile</span></span><br><span class=\"line\"><span class=\"deletion\">-s      重置静态库文件索引</span></span><br><span class=\"line\"><span class=\"deletion\">-v      创建文件冗余信息</span></span><br><span class=\"line\"><span class=\"deletion\">-c      创建静态库文件</span></span><br></pre></td></tr></table></figure></p>\n<p>test-sta.c:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    welcome();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gcc <span class=\"built_in\">test</span>-sta.c -o <span class=\"built_in\">test</span>-sta ./libwelcome.a</span></span><br></pre></td></tr></table></figure></p>\n<p>运行:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./<span class=\"built_in\">test</span>-sta </span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> welcome to my code world!</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动态库\"><a href=\"#动态库\" class=\"headerlink\" title=\"动态库\"></a>动态库</h2><p>生成动态库文件:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o2 -fPIC -shared welcome<span class=\"selector-class\">.c</span> -o libwelcome.so</span><br><span class=\"line\">or</span><br><span class=\"line\">$ gcc -o2 -fPIC -c welcome<span class=\"selector-class\">.c</span> </span><br><span class=\"line\">$ gcc -shared -o libwelcome<span class=\"selector-class\">.so</span> welcome.o</span><br></pre></td></tr></table></figure></p>\n<p>其中:</p>\n<ul>\n<li>fPIC : 产生与位置无关代码,全部使用相对地址.</li>\n<li>shared : 生成动态库.</li>\n</ul>\n<h3 id=\"编译时加载-隐式\"><a href=\"#编译时加载-隐式\" class=\"headerlink\" title=\"编译时加载(隐式)\"></a>编译时加载(隐式)</h3><p>test-implicit.c:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    welcome();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>和静态库一样,测试代码不需要包含导出函数的头文件.</p>\n</blockquote>\n<p>编译:<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o2 -Wall -L. -lwelcome test-<span class=\"keyword\">implicit</span>.c -o test-<span class=\"keyword\">implicit</span></span><br></pre></td></tr></table></figure></p>\n<p>查看<code>test-implicit</code>动态段信息,发现已经依赖<code>libwelcome.so</code>:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldd test-implicit </span><br><span class=\"line\">\tlinux-vdso<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> =&gt;  (<span class=\"number\">0</span>x00007f0902951000)</span><br><span class=\"line\">\tlibwelcome<span class=\"selector-class\">.so</span> =&gt; ./libwelcome<span class=\"selector-class\">.so</span> (<span class=\"number\">0</span>x00007f090274f000)</span><br><span class=\"line\">\tlibstdc++<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /usr/lib64/libstdc++<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x0000003548600000)</span><br><span class=\"line\">\tlibm<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /lib64/libm<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x000000353de00000)</span><br><span class=\"line\">\tlibgcc_s<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> =&gt; /lib64/libgcc_s<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> (<span class=\"number\">0</span>x0000003548200000)</span><br><span class=\"line\">\tlibc<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /lib64/libc<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x000000353da00000)</span><br><span class=\"line\">\t/lib64/ld-linux-x86-<span class=\"number\">64</span><span class=\"selector-class\">.so</span>.<span class=\"number\">2</span> (<span class=\"number\">0</span>x000000353d600000)</span><br></pre></td></tr></table></figure></p>\n<p>若此时直接运行,会提示找不到动态库:<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./test-<span class=\"keyword\">implicit</span></span><br><span class=\"line\">$ ./test-<span class=\"keyword\">implicit</span>: error <span class=\"keyword\">while</span> loading shared libraries: libwelcome.so: cannot open shared object <span class=\"keyword\">file</span>: No such <span class=\"keyword\">file</span> or directory</span><br></pre></td></tr></table></figure></p>\n<p>可以通过下列三种方法解决:<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法一 修改环境变量</span></span><br><span class=\"line\">$ export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法二 将库文件链接到系统目录下</span></span><br><span class=\"line\">$ ln -s ./libwelcome.so /usr/<span class=\"class\"><span class=\"keyword\">lib</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法三 修改/etc/ld.so.conf</span></span><br><span class=\"line\">$ sudo echo $(pwd) &gt;&gt; <span class=\"regexp\">/etc/ld</span>.so.conf</span><br><span class=\"line\">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p>\n<p>再次运行:<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./test-<span class=\"keyword\">implicit</span></span><br><span class=\"line\">$ welcome to my code world<span class=\"comment\">!</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行时链接-显式\"><a href=\"#运行时链接-显式\" class=\"headerlink\" title=\"运行时链接(显式)\"></a>运行时链接(显式)</h3><p>test-explicit.c:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;dlfcn.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LIB <span class=\"meta-string\">\"./libwelcome.so\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * RTLD_NOW：将共享库中的所有函数加载到内存 </span></span><br><span class=\"line\"><span class=\"comment\">     * RTLD_LAZY：会推后共享库中的函数的加载操作，直到调用dlsym()时方加载某函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *dl = dlopen(LIB,RTLD_LAZY); <span class=\"comment\">//打开动态库</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dl == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"Error:failed to load libary.\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *error = dlerror(); <span class=\"comment\">//检测错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"%s\\n\"</span>,error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*func)() = dlsym(dl,<span class=\"string\">\"welcome\"</span>); <span class=\"comment\">// 获取函数地址</span></span><br><span class=\"line\">    error = dlerror(); <span class=\"comment\">//检测错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"%s\\n\"</span>,error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    func(); <span class=\"comment\">//调用动态库中的函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dlclose(dl); <span class=\"comment\">//关闭动态库</span></span><br><span class=\"line\">    error = dlerror(); <span class=\"comment\">//检测错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"%s\\n\"</span>,error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gcc  -ldl <span class=\"built_in\">test</span>-explicit.c -o <span class=\"built_in\">test</span>-explicit</span></span><br></pre></td></tr></table></figure></p>\n<p>查看<code>test-explicit</code>动态段信息,没有发现依赖<code>libwelcome.so</code>:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldd test-explicit</span><br><span class=\"line\">\tlinux-vdso<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> =&gt;  (<span class=\"number\">0</span>x00007ffed89e5000)</span><br><span class=\"line\">\tlibdl<span class=\"selector-class\">.so</span>.<span class=\"number\">2</span> =&gt; /lib64/libdl<span class=\"selector-class\">.so</span>.<span class=\"number\">2</span> (<span class=\"number\">0</span>x000000353e600000)</span><br><span class=\"line\">\tlibstdc++<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /usr/lib64/libstdc++<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x0000003548600000)</span><br><span class=\"line\">\tlibm<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /lib64/libm<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x000000353de00000)</span><br><span class=\"line\">\tlibgcc_s<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> =&gt; /lib64/libgcc_s<span class=\"selector-class\">.so</span>.<span class=\"number\">1</span> (<span class=\"number\">0</span>x0000003548200000)</span><br><span class=\"line\">\tlibc<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> =&gt; /lib64/libc<span class=\"selector-class\">.so</span>.<span class=\"number\">6</span> (<span class=\"number\">0</span>x000000353da00000)</span><br><span class=\"line\">\t/lib64/ld-linux-x86-<span class=\"number\">64</span><span class=\"selector-class\">.so</span>.<span class=\"number\">2</span> (<span class=\"number\">0</span>x000000353d600000)</span><br></pre></td></tr></table></figure></p>\n<p>运行:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./<span class=\"built_in\">test</span>-explicit</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> welcome to my code world!</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p> 区别: 隐式调用在编译可执行程序时需要指定库文件的搜索路径，而显式调用编译可执行程序时不用加上.</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://blog.csdn.net/star_xiong/article/details/17301191\" target=\"_blank\" rel=\"noopener\">Linux下静态、动态库（隐式、显式调用）的创建和使用及区别</a></li>\n<li><a href=\"http://hbprotoss.github.io/posts/linuxxia-bian-yi-lian-jie-dong-tai-ku.html\" target=\"_blank\" rel=\"noopener\">Linux下编译链接动态库</a></li>\n<li><a href=\"http://blog.csdn.net/felixit0120/article/details/7652907\" target=\"_blank\" rel=\"noopener\">Linux下动态库(.so)和静态库(.a)</a></li>\n</ul>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"},{"title":"Linux下adb devices no permissions解决方案","Antuor":"AnSwEr(Weijie Yuan)","comments":1,"toc":true,"date":"2016-07-14T06:11:03.000Z","_content":"\nLinux下adb工具[下载](http://pan.baidu.com/s/1qYhBG2w)，下载解压到*/usr/bin*目录。\n\n----------\n<!--more-->\n\n## 问题\n当我们在Linux下连接安卓手机，进行adb调试时，执行\n```\n$ adb devices\n```\n会出现如下错误提示：\n```\nList of devices attached\n???????????? no permissions\n```\n\n## 解决方案\n首先创建一个规则配置文件：\n```\n$ sudo vi /etc/udev/rules.d/70-android.rules\n```\n保存并退出。\n\n查看USB设备信息，拔掉设备再查看一次，就可以比较出安卓设备是哪一个了，我的设备信息如下：\n```\n$ lsusb\nBus 003 Device 011: ID 1f3a:1002 Onda (unverified)\n```\n\n打开刚才的规则配置文件，写入如下内容：\n```\nSUBSYSTEM==\"usb\",ATTRS{idVendor}==\"1f3a\",ATTRS{idProduct}==\"1002\", MODE=\"0666\"\n```\n其中idvendor和idProduct指的是usb的id号，ID 1f3a是idVendor ，1002就是 idProduct。\n\n然后赋予文件权限\n```\n$ sudo chmod a+x /etc/udev/rules.d/70-android.rules\n```\n\n重启udev：\n```\n$ sudo /etc/init.d/udev restart\n```\n\n 注意，这里一定要拔掉设备再重连！然后执行如下命令：\n```\n $ sudo adb kill-server\n $ adb devices\n```\n显示信息如下：\n```\n* daemon not running. starting it now on port 5037 *\n* daemon started successfully *\nList of devices attached\n20080411\tdevice\n```\n那么说明连接成功，可以正常进行调试了。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","source":"_posts/solution-of-adb-devices-no-permissions.md","raw":"---\ntitle: Linux下adb devices no permissions解决方案\nAntuor: AnSwEr(Weijie Yuan)\ncomments: true\ntoc: true\ntags:\n  - adb\ndate: 2016-07-14 14:11:03\ncategories: 系统配置\n---\n\nLinux下adb工具[下载](http://pan.baidu.com/s/1qYhBG2w)，下载解压到*/usr/bin*目录。\n\n----------\n<!--more-->\n\n## 问题\n当我们在Linux下连接安卓手机，进行adb调试时，执行\n```\n$ adb devices\n```\n会出现如下错误提示：\n```\nList of devices attached\n???????????? no permissions\n```\n\n## 解决方案\n首先创建一个规则配置文件：\n```\n$ sudo vi /etc/udev/rules.d/70-android.rules\n```\n保存并退出。\n\n查看USB设备信息，拔掉设备再查看一次，就可以比较出安卓设备是哪一个了，我的设备信息如下：\n```\n$ lsusb\nBus 003 Device 011: ID 1f3a:1002 Onda (unverified)\n```\n\n打开刚才的规则配置文件，写入如下内容：\n```\nSUBSYSTEM==\"usb\",ATTRS{idVendor}==\"1f3a\",ATTRS{idProduct}==\"1002\", MODE=\"0666\"\n```\n其中idvendor和idProduct指的是usb的id号，ID 1f3a是idVendor ，1002就是 idProduct。\n\n然后赋予文件权限\n```\n$ sudo chmod a+x /etc/udev/rules.d/70-android.rules\n```\n\n重启udev：\n```\n$ sudo /etc/init.d/udev restart\n```\n\n 注意，这里一定要拔掉设备再重连！然后执行如下命令：\n```\n $ sudo adb kill-server\n $ adb devices\n```\n显示信息如下：\n```\n* daemon not running. starting it now on port 5037 *\n* daemon started successfully *\nList of devices attached\n20080411\tdevice\n```\n那么说明连接成功，可以正常进行调试了。\n\n## About me\n[![forthebadge](http://forthebadge.com/images/badges/ages-20-30.svg)](http://forthebadge.com)\n- GitHub：[AnSwErYWJ](https://github.com/AnSwErYWJ)\n- Blog：[http://www.answerywj.com](http://www.answerywj.com)\n- Email：[yuanweijie1993@gmail.com](https://mail.google.com)\n- Weibo：[@AnSwEr不是答案](http://weibo.com/1783591593)\n- CSDN：[AnSwEr不是答案的专栏](http://blog.csdn.net/u011192270)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。\n\n","slug":"solution-of-adb-devices-no-permissions","published":1,"updated":"2020-07-21T01:40:07.213Z","layout":"post","photos":[],"link":"","_id":"cklumqgj5006079n5sk75bbsc","content":"<p>Linux下adb工具<a href=\"http://pan.baidu.com/s/1qYhBG2w\" target=\"_blank\" rel=\"noopener\">下载</a>，下载解压到<em>/usr/bin</em>目录。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>当我们在Linux下连接安卓手机，进行adb调试时，执行<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>adb devices</span><br></pre></td></tr></table></figure></p>\n<p>会出现如下错误提示：<br><figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">List</span> <span class=\"keyword\">of</span> devices attached</span><br><span class=\"line\">???????????? no permissions</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>首先创建一个规则配置文件：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi <span class=\"regexp\">/etc/u</span>dev<span class=\"regexp\">/rules.d/</span><span class=\"number\">70</span>-android.rules</span><br></pre></td></tr></table></figure></p>\n<p>保存并退出。</p>\n<p>查看USB设备信息，拔掉设备再查看一次，就可以比较出安卓设备是哪一个了，我的设备信息如下：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsusb</span><br><span class=\"line\"><span class=\"keyword\">Bus </span><span class=\"number\">003</span> Device <span class=\"number\">011</span>: ID <span class=\"number\">1</span>f3a:<span class=\"number\">1002</span> Onda (unverified)</span><br></pre></td></tr></table></figure></p>\n<p>打开刚才的规则配置文件，写入如下内容：<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">SUBSYSTEM</span>==<span class=\"string\">\"usb\"</span>,ATTRS&#123;idVendor&#125;==<span class=\"string\">\"1f3a\"</span>,ATTRS&#123;idProduct&#125;==<span class=\"string\">\"1002\"</span>, MODE=<span class=\"string\">\"0666\"</span></span><br></pre></td></tr></table></figure></p>\n<p>其中idvendor和idProduct指的是usb的id号，ID 1f3a是idVendor ，1002就是 idProduct。</p>\n<p>然后赋予文件权限<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod a+x <span class=\"regexp\">/etc/u</span>dev<span class=\"regexp\">/rules.d/</span><span class=\"number\">70</span>-android.rules</span><br></pre></td></tr></table></figure></p>\n<p>重启udev：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"regexp\">/etc/i</span>nit.d<span class=\"regexp\">/udev restart</span></span><br></pre></td></tr></table></figure></p>\n<p> 注意，这里一定要拔掉设备再重连！然后执行如下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo adb <span class=\"built_in\">kill</span>-server</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> adb devices</span></span><br></pre></td></tr></table></figure></p>\n<p>显示信息如下：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* daemon <span class=\"keyword\">not</span> running. starting it now on<span class=\"built_in\"> port </span>5037 *</span><br><span class=\"line\">* daemon started successfully *</span><br><span class=\"line\">List of devices attached</span><br><span class=\"line\">20080411\tdevice</span><br></pre></td></tr></table></figure></p>\n<p>那么说明连接成功，可以正常进行调试了。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>\n","site":{"data":{}},"excerpt":"<p>Linux下adb工具<a href=\"http://pan.baidu.com/s/1qYhBG2w\" target=\"_blank\" rel=\"noopener\">下载</a>，下载解压到<em>/usr/bin</em>目录。</p>\n<hr>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>当我们在Linux下连接安卓手机，进行adb调试时，执行<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>adb devices</span><br></pre></td></tr></table></figure></p>\n<p>会出现如下错误提示：<br><figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">List</span> <span class=\"keyword\">of</span> devices attached</span><br><span class=\"line\">???????????? no permissions</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>首先创建一个规则配置文件：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi <span class=\"regexp\">/etc/u</span>dev<span class=\"regexp\">/rules.d/</span><span class=\"number\">70</span>-android.rules</span><br></pre></td></tr></table></figure></p>\n<p>保存并退出。</p>\n<p>查看USB设备信息，拔掉设备再查看一次，就可以比较出安卓设备是哪一个了，我的设备信息如下：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsusb</span><br><span class=\"line\"><span class=\"keyword\">Bus </span><span class=\"number\">003</span> Device <span class=\"number\">011</span>: ID <span class=\"number\">1</span>f3a:<span class=\"number\">1002</span> Onda (unverified)</span><br></pre></td></tr></table></figure></p>\n<p>打开刚才的规则配置文件，写入如下内容：<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">SUBSYSTEM</span>==<span class=\"string\">\"usb\"</span>,ATTRS&#123;idVendor&#125;==<span class=\"string\">\"1f3a\"</span>,ATTRS&#123;idProduct&#125;==<span class=\"string\">\"1002\"</span>, MODE=<span class=\"string\">\"0666\"</span></span><br></pre></td></tr></table></figure></p>\n<p>其中idvendor和idProduct指的是usb的id号，ID 1f3a是idVendor ，1002就是 idProduct。</p>\n<p>然后赋予文件权限<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod a+x <span class=\"regexp\">/etc/u</span>dev<span class=\"regexp\">/rules.d/</span><span class=\"number\">70</span>-android.rules</span><br></pre></td></tr></table></figure></p>\n<p>重启udev：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"regexp\">/etc/i</span>nit.d<span class=\"regexp\">/udev restart</span></span><br></pre></td></tr></table></figure></p>\n<p> 注意，这里一定要拔掉设备再重连！然后执行如下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo adb <span class=\"built_in\">kill</span>-server</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> adb devices</span></span><br></pre></td></tr></table></figure></p>\n<p>显示信息如下：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* daemon <span class=\"keyword\">not</span> running. starting it now on<span class=\"built_in\"> port </span>5037 *</span><br><span class=\"line\">* daemon started successfully *</span><br><span class=\"line\">List of devices attached</span><br><span class=\"line\">20080411\tdevice</span><br></pre></td></tr></table></figure></p>\n<p>那么说明连接成功，可以正常进行调试了。</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"http://forthebadge.com\" target=\"_blank\" rel=\"noopener\"><img src=\"http://forthebadge.com/images/badges/ages-20-30.svg\" alt=\"forthebadge\"></a></p>\n<ul>\n<li>GitHub：<a href=\"https://github.com/AnSwErYWJ\" target=\"_blank\" rel=\"noopener\">AnSwErYWJ</a></li>\n<li>Blog：<a href=\"http://www.answerywj.com\" target=\"_blank\" rel=\"noopener\">http://www.answerywj.com</a></li>\n<li>Email：<a href=\"https://mail.google.com\" target=\"_blank\" rel=\"noopener\">yuanweijie1993@gmail.com</a></li>\n<li>Weibo：<a href=\"http://weibo.com/1783591593\" target=\"_blank\" rel=\"noopener\">@AnSwEr不是答案</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/u011192270\" target=\"_blank\" rel=\"noopener\">AnSwEr不是答案的专栏</a></li>\n</ul>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\"></a> This work is licensed under a <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>"}],"PostAsset":[{"_id":"source/_posts/wav/wav_header.png","slug":"wav_header.png","post":"cklumqgfh003b79n529cnmexx","modified":0,"renderable":0},{"_id":"source/_posts/big-little-endian/big-little-endian.png","slug":"big-little-endian.png","post":"cklumqge4000379n5neoiawht","modified":0,"renderable":0},{"_id":"source/_posts/cjson/cjson-tree.png","slug":"cjson-tree.png","post":"cklumqgeb000979n52krls1e7","modified":0,"renderable":0},{"_id":"source/_posts/git-clone-extra-large-project/source_code.png","slug":"source_code.png","post":"cklumqger001e79n5izpboogj","modified":0,"renderable":0},{"_id":"source/_posts/introduction-to-four-service-of-cloud-computing/Introduction-to-four-service-of-cloud-computing.jpg","slug":"Introduction-to-four-service-of-cloud-computing.jpg","post":"cklumqgew001o79n5ddpqehiy","modified":0,"renderable":0},{"_id":"source/_posts/git-help-v3/git-work-flow.jpg","slug":"git-work-flow.jpg","post":"cklumqgex001s79n5zvzg8f75","modified":0,"renderable":0},{"_id":"source/_posts/git-help-v2/git-work-flow.jpg","slug":"git-work-flow.jpg","post":"cklumqgey001u79n5801cz1ag","modified":0,"renderable":0},{"_id":"source/_posts/standard-of-headphone/headset.png","slug":"headset.png","post":"cklumqgfc002y79n5317kiczm","modified":0,"renderable":0},{"_id":"source/_posts/speex/aec.png","slug":"aec.png","post":"cklumqgfg003979n5jhc2w9bg","modified":0,"renderable":0},{"_id":"source/_posts/floating-point-operation-in-script/awk.png","slug":"awk.png","post":"cklumqgek000q79n5vvgavokf","modified":0,"renderable":0},{"_id":"source/_posts/floating-point-operation-in-script/bc.png","slug":"bc.png","post":"cklumqgek000q79n5vvgavokf","modified":0,"renderable":0},{"_id":"source/_posts/coverage-of-code/gcovr_xxx.png","slug":"gcovr_xxx.png","post":"cklumqgel000v79n59q4j7yv4","modified":0,"renderable":0},{"_id":"source/_posts/coverage-of-code/gcovr_xxx_detail.png","slug":"gcovr_xxx_detail.png","post":"cklumqgel000v79n59q4j7yv4","modified":0,"renderable":0},{"_id":"source/_posts/coverage-of-code/gcovr_xxx_main.png","slug":"gcovr_xxx_main.png","post":"cklumqgel000v79n59q4j7yv4","modified":0,"renderable":0},{"_id":"source/_posts/wav/audio_code.png","slug":"audio_code.png","post":"cklumqgfh003b79n529cnmexx","modified":0,"renderable":0},{"_id":"source/_posts/wav/audio_code.txt","slug":"audio_code.txt","post":"cklumqgfh003b79n529cnmexx","modified":0,"renderable":0},{"_id":"source/_posts/wav/wav_header.txt","slug":"wav_header.txt","post":"cklumqgfh003b79n529cnmexx","modified":0,"renderable":0},{"_id":"source/_posts/io-model/asyn-io.png","slug":"asyn-io.png","post":"cklumqgf1002279n5pi0l0l2f","modified":0,"renderable":0},{"_id":"source/_posts/io-model/blocking-io.png","slug":"blocking-io.png","post":"cklumqgf1002279n5pi0l0l2f","modified":0,"renderable":0},{"_id":"source/_posts/io-model/compare-io.png","slug":"compare-io.png","post":"cklumqgf1002279n5pi0l0l2f","modified":0,"renderable":0},{"_id":"source/_posts/io-model/io-model.png","slug":"io-model.png","post":"cklumqgf1002279n5pi0l0l2f","modified":0,"renderable":0},{"_id":"source/_posts/io-model/multi-io.png","slug":"multi-io.png","post":"cklumqgf1002279n5pi0l0l2f","modified":0,"renderable":0},{"_id":"source/_posts/io-model/no-blocking-io.png","slug":"no-blocking-io.png","post":"cklumqgf1002279n5pi0l0l2f","modified":0,"renderable":0},{"_id":"source/_posts/io-model/signal-io.png","slug":"signal-io.png","post":"cklumqgf1002279n5pi0l0l2f","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cklumqge0000179n5yehlycx3","category_id":"cklumqge7000579n5779v0xll","_id":"cklumqgef000f79n5vx2j9o2i"},{"post_id":"cklumqgee000d79n590gfars8","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgei000k79n57rlb8hic"},{"post_id":"cklumqge4000379n5neoiawht","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgej000o79n5459qjjpu"},{"post_id":"cklumqgeb000979n52krls1e7","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgel000s79n5ohxbvhvh"},{"post_id":"cklumqgeh000j79n5054prscf","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgem000w79n5d9in6grd"},{"post_id":"cklumqgec000a79n5gh9gyl3t","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgem000z79n5symsy9ie"},{"post_id":"cklumqgel000v79n59q4j7yv4","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgeo001679n53h6pn67l"},{"post_id":"cklumqgef000e79n55g01ots0","category_id":"cklumqgek000r79n5ecaafqi1","_id":"cklumqgep001979n5lo1vzpel"},{"post_id":"cklumqgeg000i79n50abvakig","category_id":"cklumqgen001179n5jhcp3lxl","_id":"cklumqger001d79n58hwbl8bu"},{"post_id":"cklumqgep001879n54hm7vd3u","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqget001h79n5gefno2li"},{"post_id":"cklumqgej000n79n5wti3vw3c","category_id":"cklumqgen001179n5jhcp3lxl","_id":"cklumqgev001l79n528g8fqvs"},{"post_id":"cklumqgeq001b79n5lhdhow0x","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgew001p79n5cm7itop0"},{"post_id":"cklumqger001e79n5izpboogj","category_id":"cklumqgek000r79n5ecaafqi1","_id":"cklumqgey001t79n5zp7ysbzs"},{"post_id":"cklumqgek000q79n5vvgavokf","category_id":"cklumqgen001179n5jhcp3lxl","_id":"cklumqgez001v79n53qkur7lr"},{"post_id":"cklumqgem000y79n51arcxpma","category_id":"cklumqgen001179n5jhcp3lxl","_id":"cklumqgf0001z79n59ylgg0zw"},{"post_id":"cklumqgex001s79n5zvzg8f75","category_id":"cklumqgek000r79n5ecaafqi1","_id":"cklumqgf1002379n553a3ndc3"},{"post_id":"cklumqgey001u79n5801cz1ag","category_id":"cklumqgek000r79n5ecaafqi1","_id":"cklumqgf2002779n57lnlp4fn"},{"post_id":"cklumqgen001279n56wgmoyq1","category_id":"cklumqgex001r79n5ajbp9mt3","_id":"cklumqgf3002b79n5go9n9vm6"},{"post_id":"cklumqgeo001579n58mldib35","category_id":"cklumqgex001r79n5ajbp9mt3","_id":"cklumqgf5002e79n5929ce2df"},{"post_id":"cklumqgf2002679n5zeig3dm4","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgf6002i79n5qu08wrn1"},{"post_id":"cklumqgf3002a79n5pd34ikuq","category_id":"cklumqgex001r79n5ajbp9mt3","_id":"cklumqgf8002l79n5y39h228x"},{"post_id":"cklumqges001g79n5ic2cexro","category_id":"cklumqgf2002879n5cgi2lq7i","_id":"cklumqgf9002p79n5qfcrgxg4"},{"post_id":"cklumqgf4002d79n5e0edw203","category_id":"cklumqgex001r79n5ajbp9mt3","_id":"cklumqgfa002s79n5ojlv8elr"},{"post_id":"cklumqgeu001k79n5790tnfk5","category_id":"cklumqgex001r79n5ajbp9mt3","_id":"cklumqgfb002w79n5ua7kowlg"},{"post_id":"cklumqgf7002k79n53c1l0s2h","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgfc002z79n5dfmcokw8"},{"post_id":"cklumqgf9002o79n595o9qugd","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgfe003379n5nnkq0fnt"},{"post_id":"cklumqgew001o79n5ddpqehiy","category_id":"cklumqgf2002879n5cgi2lq7i","_id":"cklumqgff003579n5oqskzgeb"},{"post_id":"cklumqgf0001y79n59mrv5niw","category_id":"cklumqgfa002t79n5ifqhm78y","_id":"cklumqgfh003a79n5zqe8subf"},{"post_id":"cklumqgfc002y79n5317kiczm","category_id":"cklumqgf2002879n5cgi2lq7i","_id":"cklumqgfi003c79n513p00s66"},{"post_id":"cklumqgfd003279n5zlyufddn","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgfj003g79n5jjf1y1ho"},{"post_id":"cklumqgf1002279n5pi0l0l2f","category_id":"cklumqgf2002879n5cgi2lq7i","_id":"cklumqgfl003i79n5y27kmclp"},{"post_id":"cklumqgfe003479n55m3u9lkl","category_id":"cklumqged000b79n5z0kg4m92","_id":"cklumqgfn003m79n57r3ymjr7"},{"post_id":"cklumqgf6002h79n5w9rtt3iz","category_id":"cklumqgfa002t79n5ifqhm78y","_id":"cklumqgfo003n79n5a3hr3g7r"},{"post_id":"cklumqgfa002r79n5u4uyvkmm","category_id":"cklumqgfa002t79n5ifqhm78y","_id":"cklumqgfp003q79n5z2akxa2i"},{"post_id":"cklumqgfk003h79n57l37ftb7","category_id":"cklumqgex001r79n5ajbp9mt3","_id":"cklumqgfp003s79n554nfl1zu"},{"post_id":"cklumqgfm003l79n5zof467a2","category_id":"cklumqgex001r79n5ajbp9mt3","_id":"cklumqgfq003v79n5kd8wgcn5"},{"post_id":"cklumqgfb002v79n5twvhtuwj","category_id":"cklumqgfl003j79n5erf0fnxd","_id":"cklumqgfq003y79n5rpwz6k3b"},{"post_id":"cklumqgfg003979n5jhc2w9bg","category_id":"cklumqgfp003o79n5kz01syqc","_id":"cklumqgfr004179n5sjv0izxl"},{"post_id":"cklumqgfh003b79n529cnmexx","category_id":"cklumqgfp003o79n5kz01syqc","_id":"cklumqgfr004479n5wuwcea0m"},{"post_id":"cklumqgfj003f79n5gykput91","category_id":"cklumqgfl003j79n5erf0fnxd","_id":"cklumqgfs004779n57byhnmh4"},{"post_id":"cklumqgj5006079n5sk75bbsc","category_id":"cklumqgfa002t79n5ifqhm78y","_id":"cklumqgj6006279n5cr5xf9x4"}],"PostTag":[{"post_id":"cklumqge0000179n5yehlycx3","tag_id":"cklumqge8000679n5fpojug7f","_id":"cklumqgek000p79n5u5d02h25"},{"post_id":"cklumqge0000179n5yehlycx3","tag_id":"cklumqged000c79n5jdwdvb4d","_id":"cklumqgel000t79n5n83b8oxi"},{"post_id":"cklumqge0000179n5yehlycx3","tag_id":"cklumqgef000h79n5a32hzvtp","_id":"cklumqgem000x79n5lyuygbaw"},{"post_id":"cklumqge4000379n5neoiawht","tag_id":"cklumqgei000m79n5bmj2rmfb","_id":"cklumqgem001079n5tlv52wyu"},{"post_id":"cklumqgeb000979n52krls1e7","tag_id":"cklumqgel000u79n55x2pnqg0","_id":"cklumqgeo001479n5v8ivh4ms"},{"post_id":"cklumqgec000a79n5gh9gyl3t","tag_id":"cklumqgen001379n5gs4mjizf","_id":"cklumqget001i79n5rrrd9xso"},{"post_id":"cklumqgec000a79n5gh9gyl3t","tag_id":"cklumqgeq001a79n5adt2a26b","_id":"cklumqgev001m79n5lyt1zzc6"},{"post_id":"cklumqgee000d79n590gfars8","tag_id":"cklumqges001f79n53n1akfa4","_id":"cklumqgex001q79n5eklc74ty"},{"post_id":"cklumqgex001s79n5zvzg8f75","tag_id":"cklumqge8000679n5fpojug7f","_id":"cklumqgez001x79n5289odbnz"},{"post_id":"cklumqgef000e79n55g01ots0","tag_id":"cklumqgev001n79n5rimze249","_id":"cklumqgf1002179n5scb0dg5y"},{"post_id":"cklumqgey001u79n5801cz1ag","tag_id":"cklumqge8000679n5fpojug7f","_id":"cklumqgf2002579n5kb470y8u"},{"post_id":"cklumqgeg000i79n50abvakig","tag_id":"cklumqges001f79n53n1akfa4","_id":"cklumqgf3002979n53ijddqdu"},{"post_id":"cklumqgeh000j79n5054prscf","tag_id":"cklumqgf1002479n5a7fcbdf1","_id":"cklumqgf5002f79n53lyr7zr2"},{"post_id":"cklumqgej000n79n5wti3vw3c","tag_id":"cklumqgf4002c79n5c3ryh8yj","_id":"cklumqgf8002n79n5j77fseq2"},{"post_id":"cklumqgek000q79n5vvgavokf","tag_id":"cklumqgf4002c79n5c3ryh8yj","_id":"cklumqgfa002u79n5adttojli"},{"post_id":"cklumqgel000v79n59q4j7yv4","tag_id":"cklumqgf9002q79n5ea1wtckt","_id":"cklumqgfc003179n5w80ajsfx"},{"post_id":"cklumqgem000y79n51arcxpma","tag_id":"cklumqgfb002x79n56yiko0sw","_id":"cklumqgfg003879n5onjllvs4"},{"post_id":"cklumqgen001279n56wgmoyq1","tag_id":"cklumqgff003679n54kzeuv17","_id":"cklumqgfp003r79n5uzplsn2f"},{"post_id":"cklumqgen001279n56wgmoyq1","tag_id":"cklumqgfi003d79n55mgbrm1e","_id":"cklumqgfq003t79n58kcr49hm"},{"post_id":"cklumqgen001279n56wgmoyq1","tag_id":"cklumqgfl003k79n5q5ba0h8a","_id":"cklumqgfq003x79n5hz3fztf3"},{"post_id":"cklumqgeo001579n58mldib35","tag_id":"cklumqgfp003p79n5mjsalbmh","_id":"cklumqgfq003z79n5bxqxb8t3"},{"post_id":"cklumqgep001879n54hm7vd3u","tag_id":"cklumqgfq003w79n5m9zp94ut","_id":"cklumqgfr004379n5g2ot7fpg"},{"post_id":"cklumqgeq001b79n5lhdhow0x","tag_id":"cklumqgfr004279n5fq4m4xgj","_id":"cklumqgfs004679n5zu032tso"},{"post_id":"cklumqger001e79n5izpboogj","tag_id":"cklumqgfr004579n5yzwwe1b7","_id":"cklumqgfs004979n5es8g740b"},{"post_id":"cklumqges001g79n5ic2cexro","tag_id":"cklumqgfs004879n5mxbek1ry","_id":"cklumqgfu004d79n5v56cnwq7"},{"post_id":"cklumqges001g79n5ic2cexro","tag_id":"cklumqgfs004a79n55prso7bo","_id":"cklumqgfu004e79n5bvmcroqy"},{"post_id":"cklumqges001g79n5ic2cexro","tag_id":"cklumqgft004b79n5z1njvmx3","_id":"cklumqgfu004g79n50025n0n8"},{"post_id":"cklumqgeu001k79n5790tnfk5","tag_id":"cklumqgft004c79n5mbs04dae","_id":"cklumqgfv004i79n5ac2d9711"},{"post_id":"cklumqgeu001k79n5790tnfk5","tag_id":"cklumqgfu004f79n5az3oqy56","_id":"cklumqgfv004j79n51y58jeqr"},{"post_id":"cklumqgew001o79n5ddpqehiy","tag_id":"cklumqgfv004h79n5khwu26k2","_id":"cklumqgfw004l79n54f4sm37a"},{"post_id":"cklumqgf0001y79n59mrv5niw","tag_id":"cklumqgfv004k79n5fb970ovd","_id":"cklumqgfy004o79n5o77an03m"},{"post_id":"cklumqgf0001y79n59mrv5niw","tag_id":"cklumqgfw004m79n5ef2w1iki","_id":"cklumqgfy004p79n542cz810u"},{"post_id":"cklumqgf1002279n5pi0l0l2f","tag_id":"cklumqgfx004n79n5bdgf0odp","_id":"cklumqgfy004r79n5m1geycrf"},{"post_id":"cklumqgf2002679n5zeig3dm4","tag_id":"cklumqgen001379n5gs4mjizf","_id":"cklumqgfz004t79n5kcetp7hq"},{"post_id":"cklumqgf2002679n5zeig3dm4","tag_id":"cklumqgfy004q79n5e0kwo1qh","_id":"cklumqgfz004u79n5jz1mgsfb"},{"post_id":"cklumqgf3002a79n5pd34ikuq","tag_id":"cklumqgfp003p79n5mjsalbmh","_id":"cklumqgg0004y79n5i8p8jtbt"},{"post_id":"cklumqgf3002a79n5pd34ikuq","tag_id":"cklumqgfz004v79n5v8twf19e","_id":"cklumqgg0004z79n5t93dv853"},{"post_id":"cklumqgf3002a79n5pd34ikuq","tag_id":"cklumqgfz004w79n54a040fyg","_id":"cklumqgg1005179n587cjxidy"},{"post_id":"cklumqgf4002d79n5e0edw203","tag_id":"cklumqgg0004x79n5pfjp1z4n","_id":"cklumqgg1005279n5eg551e0h"},{"post_id":"cklumqgf6002h79n5w9rtt3iz","tag_id":"cklumqgg0005079n5ebsyexe0","_id":"cklumqgg1005479n5rw0xtuee"},{"post_id":"cklumqgf7002k79n53c1l0s2h","tag_id":"cklumqgen001379n5gs4mjizf","_id":"cklumqgg2005679n5upz7lq4w"},{"post_id":"cklumqgf7002k79n53c1l0s2h","tag_id":"cklumqgg1005379n5orvlzack","_id":"cklumqgg2005779n52pes12zt"},{"post_id":"cklumqgf9002o79n595o9qugd","tag_id":"cklumqgg2005579n50rmsoxd2","_id":"cklumqgg2005a79n51345gyaa"},{"post_id":"cklumqgf9002o79n595o9qugd","tag_id":"cklumqgg2005879n5iosnbo0z","_id":"cklumqgg2005b79n5pa6ikk3j"},{"post_id":"cklumqgfa002r79n5u4uyvkmm","tag_id":"cklumqgf4002c79n5c3ryh8yj","_id":"cklumqgg3005d79n53ot8zku5"},{"post_id":"cklumqgfa002r79n5u4uyvkmm","tag_id":"cklumqgg2005979n5gefyhhz1","_id":"cklumqgg3005e79n52tul16hh"},{"post_id":"cklumqgfb002v79n5twvhtuwj","tag_id":"cklumqgg3005c79n5g4yfsr3z","_id":"cklumqgg3005g79n5qpi5m6us"},{"post_id":"cklumqgfc002y79n5317kiczm","tag_id":"cklumqgg3005f79n5d1dpn5a2","_id":"cklumqgg3005i79n599k7s21w"},{"post_id":"cklumqgfd003279n5zlyufddn","tag_id":"cklumqgg3005h79n5mzcmqm5z","_id":"cklumqgg3005l79n5bs11fc0p"},{"post_id":"cklumqgfd003279n5zlyufddn","tag_id":"cklumqgg3005j79n55iyehw6x","_id":"cklumqgg4005m79n5c6mtu5th"},{"post_id":"cklumqgfe003479n55m3u9lkl","tag_id":"cklumqgg3005k79n5c0kmg7bz","_id":"cklumqgg4005o79n59979sv4u"},{"post_id":"cklumqgfg003979n5jhc2w9bg","tag_id":"cklumqgg4005n79n5v4tik81g","_id":"cklumqgg5005q79n5yqv83z3v"},{"post_id":"cklumqgfh003b79n529cnmexx","tag_id":"cklumqgg4005p79n5bbnaiqio","_id":"cklumqgg5005s79n5appwl29r"},{"post_id":"cklumqgfj003f79n5gykput91","tag_id":"cklumqgg5005r79n5zir2yvv2","_id":"cklumqgg5005u79n538yaxjnv"},{"post_id":"cklumqgfk003h79n57l37ftb7","tag_id":"cklumqgfz004v79n5v8twf19e","_id":"cklumqgg6005x79n5upr8ri5f"},{"post_id":"cklumqgfk003h79n57l37ftb7","tag_id":"cklumqgg5005v79n535t5r6nh","_id":"cklumqgg6005y79n5w1b3ycml"},{"post_id":"cklumqgfm003l79n5zof467a2","tag_id":"cklumqgg5005w79n52w0wc1oj","_id":"cklumqgg6005z79n5av8yfhyd"},{"post_id":"cklumqgj5006079n5sk75bbsc","tag_id":"cklumqgj6006179n5rw6r97qq","_id":"cklumqgj6006379n5xywofl6i"}],"Tag":[{"name":"git","_id":"cklumqge8000679n5fpojug7f"},{"name":"hexo","_id":"cklumqged000c79n5jdwdvb4d"},{"name":"blog","_id":"cklumqgef000h79n5a32hzvtp"},{"name":"大小端字节序","_id":"cklumqgei000m79n5bmj2rmfb"},{"name":"cJSON","_id":"cklumqgel000u79n55x2pnqg0"},{"name":"tcp","_id":"cklumqgen001379n5gs4mjizf"},{"name":"connect","_id":"cklumqgeq001a79n5adt2a26b"},{"name":"debug","_id":"cklumqges001f79n53n1akfa4"},{"name":"github徽章","_id":"cklumqgev001n79n5rimze249"},{"name":"pthread","_id":"cklumqgf1002479n5a7fcbdf1"},{"name":"script","_id":"cklumqgf4002c79n5c3ryh8yj"},{"name":"代码覆盖率","_id":"cklumqgf9002q79n5ea1wtckt"},{"name":"fork bomb","_id":"cklumqgfb002x79n56yiko0sw"},{"name":"RPATH","_id":"cklumqgff003679n54kzeuv17"},{"name":"RUNPATH","_id":"cklumqgfi003d79n55mgbrm1e"},{"name":"LD_DEBUG","_id":"cklumqgfl003k79n5q5ba0h8a"},{"name":"gcc","_id":"cklumqgfp003p79n5mjsalbmh"},{"name":"随机数","_id":"cklumqgfq003w79n5m9zp94ut"},{"name":"getw","_id":"cklumqgfr004279n5fq4m4xgj"},{"name":"git仓库过大","_id":"cklumqgfr004579n5yzwwe1b7"},{"name":"resume","_id":"cklumqgfs004879n5mxbek1ry"},{"name":"技术简历","_id":"cklumqgfs004a79n55prso7bo"},{"name":"求职招聘","_id":"cklumqgft004b79n5z1njvmx3"},{"name":"hidden","_id":"cklumqgft004c79n5mbs04dae"},{"name":"objcopy","_id":"cklumqgfu004f79n5az3oqy56"},{"name":"Cloud Computing","_id":"cklumqgfv004h79n5khwu26k2"},{"name":"mac","_id":"cklumqgfv004k79n5fb970ovd"},{"name":"Homebrew","_id":"cklumqgfw004m79n5ef2w1iki"},{"name":"IO","_id":"cklumqgfx004n79n5bdgf0odp"},{"name":"keepalive","_id":"cklumqgfy004q79n5e0kwo1qh"},{"name":"ld","_id":"cklumqgfz004v79n5v8twf19e"},{"name":"hash-style","_id":"cklumqgfz004w79n54a040fyg"},{"name":"link","_id":"cklumqgg0004x79n5pfjp1z4n"},{"name":"json","_id":"cklumqgg0005079n5ebsyexe0"},{"name":"listen","_id":"cklumqgg1005379n5orvlzack"},{"name":"read","_id":"cklumqgg2005579n50rmsoxd2"},{"name":"write","_id":"cklumqgg2005879n5iosnbo0z"},{"name":"scriptreplay","_id":"cklumqgg2005979n5gefyhhz1"},{"name":"OpenResty","_id":"cklumqgg3005c79n5g4yfsr3z"},{"name":"headset","_id":"cklumqgg3005f79n5d1dpn5a2"},{"name":"strtok","_id":"cklumqgg3005h79n5mzcmqm5z"},{"name":"strtok_r","_id":"cklumqgg3005j79n55iyehw6x"},{"name":"core dump","_id":"cklumqgg3005k79n5c0kmg7bz"},{"name":"Speex","_id":"cklumqgg4005n79n5v4tik81g"},{"name":"wav","_id":"cklumqgg4005p79n5bbnaiqio"},{"name":"lua-cjson","_id":"cklumqgg5005r79n5zir2yvv2"},{"name":"sysroot","_id":"cklumqgg5005v79n535t5r6nh"},{"name":"lib","_id":"cklumqgg5005w79n52w0wc1oj"},{"name":"adb","_id":"cklumqgj6006179n5rw6r97qq"}]}}