<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Linux的硬链接和软链接]]></title>
      <url>http://answerywj.com/2016/08/02/Linux%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E8%BD%AF%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>Linux下链接的命令是<em>ln</em>,可以通过<code>man ln</code>查看.</p>
<h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><ol>
<li>链接的是索引节点(<em>inode</em>),硬链接文件<em>inode</em>值相同(在Linux的文件系统的文件不管是什么类型都给它分配一个<em>indoe</em>号),所以硬链接文件不占用磁盘空间.相当于创建一个别名.</li>
<li>有两个限制:目录不能创建硬链接;只能在同一个文件系统中进行硬链接.</li>
<li>命令:<br> <code>ln srouce dest</code></li>
<li>对源文件进行修改或删除,硬链接文件会同步修改.但删除硬链接的源文件,硬链接文件仍然存在.</li>
</ol>
<h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><ol>
<li>软链接又称为符号链接,链接的是路径(<em>path</em>),链接文件中包含的是另一个文件的位置信息.</li>
<li>可以是任意文件或者目录,可以链接不同文件系统的文件.</li>
<li>可以链接不存在的文件,这种现象称为”断链”;也可以链接自己</li>
<li>命令:<br> <code>ln -s srouce dest</code><br> <em>source</em>最好用绝对路径表示,这样可以在任何目录下进行链接.若使用相对路径，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接.</li>
<li>对源文件进行修改或删除,软链接文件会同步修改.</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h3><ol>
<li>因为链接文件中包含的是另一个文件的位置信息，所以当源文件从一个目录移到其它目录中,再访问链接文件,系统就找不到了.</li>
<li>需要系统分配额外的空间用于建立新的索引节点和保存源文件的路径.</li>
</ol>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul>
<li>与windows类比</li>
</ul>
<ol>
<li>硬链接类似复制,但与复制不同的是存在同步机制,一处的更改会同步到另一处,删除一处不会影响另一出.</li>
<li>软链接相当于windows中的快捷方式.</li>
</ol>
<ul>
<li><p>硬链接可以防止误删<br>硬连接的作用是允许一个文件拥有多个有效路径名，因为多个硬链接文件指向同一个索引节点.这样用户就可以建立硬连接到重要文件,以防止“误删”的功能.只删除一个链接并不影响索引节点本身和其它的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件才会被真正删除。</p>
</li>
<li><p>硬链接的两个限制<br>虽然系统有目录不能创建硬链接的限制,但是命令<code>ln -d</code>可以让超级用户对目录作硬连接，这说明系统限制对目录进行硬连接只是一个硬性规定，并不是逻辑上不允许或技术上的不可行。那么为什么要做出这个硬性规定呢?<br>第一,如果引入了对目录的硬连接就有可能在目录中引入循环，那么在目录遍历的时候系统就会陷入无限循环当中。可是符号连接不也可以引入循环吗？因为在linux系统中，每个文件(目录也是文件)都对应着一个inode结构，其中inode数据结构中包含了文件类型(目录，普通文件，符号连接文件等等)的信息，也就是说操作系统在遍历目录时可以判断出符号连接，既然可以判断出符号连接当然就可以采取一些措施来防范进入过大的循环了，系统在连续遇到8个符号连接后就停止遍历，这就是为什么对目录符号连接不会进入死循环的原因了。但是对于硬连接，由于操作系统中采用的数据结构和算法限制，目前是不能防范这种死循环的。<br>第二,文件的dentry结构主要包含了文件名,文件的inode号,指向父目录dentry结构的指针和其他一些指针,这里关键是那个指向父目录的指针;系统中所有的dentry结构都是按杂凑值存放在杂凑表中的，这里的杂凑算法很重要，它是取文件名和文件的父目录dentry结构的地址一起杂凑运算出杂凑值的。现在我们假设有两个目录 /a和/b，其中/b是我们通过<code>ln -d</code>命令建立起来的对/a的硬连接。这个时候内核空间中就会存在一个/a的dentry结构和一个/b的dentry结构，由上面的知识可知，/a和/b目录下面的每一个文件或目录都各自有对应的dentry结构(因为虽然/a目录下面的文件名没有改变，但是因为dentry结构有指向父目录dentry 的指针和计算杂凑值时考虑了父目录dentry结构的地址，这个时候dentry结构就分身乏术了),而且这种继承还会影响到所有子目录下面的文件，这样下来就会浪费很多系统空间了,特别是如果被硬连接的目录中存在大量文件和子目录的时候就更加明显了.</p>
</li>
</ul>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux socket编程的心跳机制总结]]></title>
      <url>http://answerywj.com/2016/07/14/Linux-socket%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="什么是心跳机制"><a href="#什么是心跳机制" class="headerlink" title="什么是心跳机制"></a>什么是心跳机制</h2><p><strong>心跳机制</strong>就是当客户端与服务端建立连接后，每隔几分钟发送一个固定消息给服务端，服务端收到后回复一个固定消息给客户端，如果服务端几分钟内没有收到客户端消息，则视客户端断开。发送方可以是客户端和服务端，看具体需求。</p>
<h2 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h2><p>我们都知道在TCP这种长连接情况下下，有可能有一大段时间是没有数据往来的，即处于空闲状态。理论上说，这个连接是一直保持连接的，但是在实际应用中，如果中间节点出现什么故障是难以预测的。更可怕的是，有的节点会自动把一定时间之内没有数据交互的连接切断。所以，需要我们利用心跳机制，来维持长连接，保活通信。</p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul>
<li><strong>应用层：</strong> 由应用程序自己每隔一定时间向客户/服务端发送一个短小的数据包，然后启动一个线程，在线程中不断检测客户端的回应， 如果在一定时间内没有收到客户/服务端的回应，即认为客户/服务端已经掉线，连接不可用。</li>
<li><strong>设置SO_KEEPALIVE套接字选项：</strong>在TCP通信中，存在heartbeat机制。其实就是TCP的选项。当服务/客户端，一方开启KeepAlive功能后，就会自动在规定时间内向对方发送心跳包， 而另一方在收到心跳包后就会自动回复，以告诉对方我仍然在线。<blockquote>
<p><strong>注意：</strong>因为开启KeepAlive功能需要消耗额外的宽带和流量，所以TCP协议层默认并不默认开启KeepAlive。KeepAlive超时需要7,200，000 MilliSeconds， 即2小时，探测次数为5次。对于很多应用程序来说，空闲时间太长。因此，我们可以手工开启KeepAlive功能并设置合理的KeepAlive参数。</p>
</blockquote>
</li>
</ul>
<h3 id="我的实现"><a href="#我的实现" class="headerlink" title="我的实现"></a>我的实现</h3><p>这里具体介绍设置SO_KEEPALIVE套接字选项这个方法。</p>
<h4 id="SO-KEEPALIVE的三个参数"><a href="#SO-KEEPALIVE的三个参数" class="headerlink" title="SO_KEEPALIVE的三个参数:"></a>SO_KEEPALIVE的三个参数:</h4><ol>
<li>tcp_keepalive_intvl：探测发包间隔为intvl。</li>
<li>tcp_keepalive_idle：连接在idle时间内没有任何数据往来,则进行此TCP层的探测。</li>
<li>tcp_keepalive_cnt：尝试探测的次数。</li>
</ol>
<h4 id="setsockopt-函数介绍"><a href="#setsockopt-函数介绍" class="headerlink" title="setsockopt()函数介绍"></a>setsockopt()函数介绍</h4><ol>
<li>用法：设置与某个套接字关联的选 项。选项可能存在于多层协议中，它们总会出现在最上面的套接字层。</li>
<li>函数原型：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">setsockopt</span><span class="params">(<span class="keyword">int</span> sock, <span class="keyword">int</span> level, <span class="keyword">int</span> optname, <span class="keyword">const</span> <span class="keyword">void</span> *optval, <span class="keyword">socklen_t</span> optlen)</span></span>;</div><div class="line"></div><div class="line">参数：</div><div class="line">sock：将要被设置或者获取选项的套接字。</div><div class="line">level：选项所在的协议层。</div><div class="line">optname：需要访问的选项名。</div><div class="line">optval：对于getsockopt()，指向返回选项值的缓冲。对于setsockopt()，指向包含新选项值的缓冲。</div><div class="line">optlen：对于getsockopt()，作为入口参数时，选项值的最大长度。作为出口参数时，选项值的实际长度。对于setsockopt()，现选项的长度。</div><div class="line"></div><div class="line">返回说明：</div><div class="line">成功执行时，返回<span class="number">0</span>。失败返回<span class="number">-1</span>，errno被设为以下的某个值</div><div class="line">EBADF：sock不是有效的文件描述词</div><div class="line">EFAULT：optval指向的内存并非有效的进程空间</div><div class="line">EINVAL：在调用setsockopt()时，optlen无效</div><div class="line">ENOPROTOOPT：指定的协议层不能识别选项</div><div class="line">ENOTSOCK：sock描述的不是套接字</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">heartbeat</span><span class="params">(<span class="keyword">int</span> fd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> alive,error,idle,cnt,intv;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * open keepalive on fd</div><div class="line">     */</div><div class="line">    Restart:</div><div class="line">    alive = <span class="number">1</span>;<span class="comment">//set keepalive open</span></div><div class="line">    ret=setsockopt(fd,SOL_SOCKET,SO_KEEPALIVE,&amp;alive,<span class="keyword">sizeof</span>(alive));</div><div class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        DEBUG(<span class="string">"set socket option error.\n"</span>);</div><div class="line">        <span class="keyword">goto</span> Restart;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 60S without data,send heartbeat package</div><div class="line">     */</div><div class="line">    idle = <span class="number">60</span>;</div><div class="line">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPIDLE,&amp;idle,<span class="keyword">sizeof</span>(idle));</div><div class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        DEBUG(<span class="string">"set keepalive idle error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * without any respond,3m later resend package</div><div class="line">     */</div><div class="line">    intv = <span class="number">180</span>;</div><div class="line">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPINTVL,&amp;intv,<span class="keyword">sizeof</span>(intv));</div><div class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        DEBUG(<span class="string">"set keepalive intv error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * send 5 times,without any response,mean connect lose</div><div class="line">     */</div><div class="line">    cnt = <span class="number">5</span>;</div><div class="line">    ret = setsockopt(fd,SOL_TCP,TCP_KEEPCNT,&amp;cnt,<span class="keyword">sizeof</span>(cnt));</div><div class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        DEBUG(<span class="string">"set keepalive cnt error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然，还是有很多方法去实现心跳机制的，比如利用select实现的超时控制，或者利用守护进程或线程的单独检测。不过我个人认为设置SO_KEEPALIVE实现起来最简单，最方便。如果大家发现有什么问题，也欢迎大家交流。</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下Socket编程---connect（）函数的包裹函数介绍]]></title>
      <url>http://answerywj.com/2016/07/14/Linux%E4%B8%8BSocket%E7%BC%96%E7%A8%8B-connect%EF%BC%88%EF%BC%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%85%E8%A3%B9%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这里主要介绍的是在TCP连接中的应用</p>
</blockquote>
<h2 id="connect（）函数简介"><a href="#connect（）函数简介" class="headerlink" title="connect（）函数简介"></a>connect（）函数简介</h2><p><strong>1. 功能：</strong> 用于客户端建立tcp连接，发起三次握手过程。<br><strong>2. 原型：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#include&lt;sys/socket.h&gt;</div><div class="line">#include&lt;sys/types.h&gt;</div><div class="line">int connect(int sockfd, const struct sockaddr* server_addr, socklen_t addrlen)</div><div class="line">返回值：0──成功， -1──失败。</div></pre></td></tr></table></figure></p>
<p><strong>3. 参数：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sockfd：标识一个套接字。</div><div class="line">serv_addr：套接字s想要连接的主机地址和端口号。</div><div class="line">addrlen：serv_addr缓冲区的长度。</div></pre></td></tr></table></figure></p>
<p><strong>4. 错误代码：</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">EBADF 参数sockfd 非合法<span class="built_in">socket</span>处理代码</div><div class="line">EFAULT 参数serv_addr指针指向无法存取的内存空间</div><div class="line">ENOTSOCK 参数sockfd为一文件描述词，非<span class="built_in">socket</span>。</div><div class="line">EISCONN 参数sockfd的<span class="built_in">socket</span>已是连线状态</div><div class="line">ECONNREFUSED 连线要求被server端拒绝。</div><div class="line">ETIMEDOUT 企图连线的操作超过限定时间仍未有响应。</div><div class="line">ENETUNREACH 无法传送数据包至指定的主机。</div><div class="line">EAFNOSUPPORT sockaddr结构的sa_family不正确。</div><div class="line">EALREADY <span class="built_in">socket</span>为不可阻塞且先前的连线操作还未完成。</div></pre></td></tr></table></figure></p>
<h2 id="connect（）的包裹函数"><a href="#connect（）的包裹函数" class="headerlink" title="connect（）的包裹函数"></a>connect（）的包裹函数</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSLEEP 128</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_connect</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *servaddr,<span class="keyword">socklen_t</span> addrlen)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nsec;</div><div class="line">    <span class="keyword">for</span>(nsec = <span class="number">1</span>;nsec &lt;= MAXSLEEP;nsec &lt;&lt;= <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(connect(sockfd,servaddr,addrlen) == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//connection accepted</span></div><div class="line">        <span class="keyword">if</span>(nsec &lt;= MAXSLEEP/<span class="number">2</span>)<span class="comment">//sleep nesc,then connect retry</span></div><div class="line">            sleep(nsec);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这是一个connect超时重连的函数，如果连接成功，则这个函数返回0。如果连接失败，则每次等待1、2、4、8。。。秒后继续尝试重新连接，直到MAXSLEEP为止，则说明连接失败，返回-1。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也许你会觉得这样实现会有些麻烦，但这样确实可以使你的程序更加健壮，如果因为一些时间差或者阻塞的原因，使得你的第一次connect失败，利用这个包裹函数就不至于使整个客户端程序错误，而进行重连，消除这些客观因素的影响。</p>
<blockquote>
<p>代码<a href="https://github.com/AnSwErYWJ/DogFood/blob/master/C/network/client.c" target="_blank" rel="external">下载</a></p>
</blockquote>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux C编程的DEBUG宏]]></title>
      <url>http://answerywj.com/2016/07/14/Linux-C%E7%BC%96%E7%A8%8B%E7%9A%84DEBUG%E5%AE%8F/</url>
      <content type="html"><![CDATA[<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span></span></div><div class="line"><span class="code">	&gt; File Name: debug.c</span></div><div class="line"><span class="code">	&gt; Author: AnSwEr</span></div><div class="line"><span class="code">	&gt; Mail: 1045837697@qq.com</span></div><div class="line"><span class="code">	&gt; Created Time: 2015年07月23日 星期四 18时19分48秒</span></div><div class="line"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**/</div><div class="line"></div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#define DEBUG_PRINT <span class="keyword">do</span>&#123;&#125;<span class="keyword">while</span>(<span class="number">0</span>)</div><div class="line"></div><div class="line">#<span class="keyword">if</span> defined(DEBUG_PRINT)</div><div class="line">#define DEBUG(...)\</div><div class="line">        <span class="keyword">do</span>&#123;\</div><div class="line">            fprintf(stderr,<span class="string">"-----DEBUG-----\n"</span>);\</div><div class="line">            fprintf(stderr,<span class="string">"%s %s\n"</span>,__TIME__,__DATE__);\</div><div class="line">            fprintf(stderr,<span class="string">"%s:%d:%s():"</span>,__FILE__,__LINE__,__func__);\</div><div class="line">            fprintf(stderr,__VA_ARGS__);\</div><div class="line">        &#125;<span class="keyword">while</span>(<span class="number">0</span>)</div><div class="line">#endif</div><div class="line"></div><div class="line"><span class="built_in">int</span> main(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    DEBUG(<span class="string">"Debug successfully!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li><em>do{}while(0)</em>：使用<em>do{…}while(0)</em>构造后的宏定义不会受到大括号、分号等的影响，而且可以定义空宏而不受警告。</li>
<li>参数介绍：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="strong">__LINE__</span>：在源代码中插入当前源代码行号；</div><div class="line"><span class="strong">__FILE__</span>：在源文件中插入当前源文件名；</div><div class="line"><span class="strong">__DATE__</span>：在源文件中插入当前的编译日期</div><div class="line"><span class="strong">__TIME__</span>：在源文件中插入当前编译时间；</div><div class="line"><span class="strong">__func__</span>：输出函数名称,功能与<span class="emphasis">_Function_</span>相同；</div><div class="line"><span class="strong">__VA_ARGS__</span>：可变参数类型。</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>代码<a href="https://github.com/AnSwErYWJ/DogFood/blob/master/C/debug.c" target="_blank" rel="external">下载</a>。</p>
</blockquote>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UNIX编程安全读写函数——readn和writen]]></title>
      <url>http://answerywj.com/2016/07/14/UNIX%E7%BC%96%E7%A8%8B%E5%AE%89%E5%85%A8%E8%AF%BB%E5%86%99%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94readn%E5%92%8Cwriten/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong>字节流套接字（TCP套接字）上的read和write函数所表现的行为不同于通常的文件I/O。字节流套接字调用read或write输入或输出的字节数可能比请求的数量少，然而这并不是出错的状态。<strong>这是因为内核中用于套接字的缓冲区可能达到了极限。</strong>通常这种情况出现在一次读多于4096个字节或write在非阻塞情况下返回不足字节数。为了不多次调用read或防止write返回不足字节数，我们用下面的两个函数来替代read和write。</p>
<h2 id="readn"><a href="#readn" class="headerlink" title="readn"></a>readn</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span> safe_read(<span class="keyword">int</span> fd,<span class="keyword">void</span> *vptr,<span class="keyword">size_t</span> n)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">size_t</span> nleft;</div><div class="line">    <span class="keyword">ssize_t</span> nread;</div><div class="line">    <span class="keyword">char</span> *ptr;</div><div class="line"></div><div class="line">    ptr=vptr;</div><div class="line">    nleft=n;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(nleft &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((nread = read(fd,ptr,nleft)) &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(errno == EINTR) <span class="comment">//被信号中断，重读</span></div><div class="line">                nread = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> <span class="comment">//出错</span></div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nread == <span class="number">0</span>) <span class="comment">//EOF</span></div><div class="line">	        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        nleft -= nread;</div><div class="line">        ptr += nread;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (n-nleft);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="writen"><a href="#writen" class="headerlink" title="writen"></a>writen</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span>	safe_write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *vptr, <span class="keyword">size_t</span> n)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">size_t</span>  nleft;</div><div class="line">    <span class="keyword">ssize_t</span> nwritten;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ptr;</div><div class="line"></div><div class="line">    ptr = vptr;</div><div class="line">    nleft = n;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(nleft &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>((nwritten = write(fd, ptr, nleft)) &lt;= <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nwritten &lt; <span class="number">0</span> &amp;&amp; errno == EINTR) <span class="comment">//被信号中断，重写</span></div><div class="line">                nwritten = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> <span class="comment">//error</span></div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">		nleft -= nwritten;</div><div class="line">		ptr   += nwritten;</div><div class="line">     &#125;</div><div class="line">	<span class="keyword">return</span>(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面介绍了两个安全读写函数，但是并不意味着这两个函数在任何地方都完全适用，所以不要强迫自己使用。需要注意阻塞、效率等问题，当你只是读写少量字节时，就没必要使用了。</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言生成随机数]]></title>
      <url>http://answerywj.com/2016/07/14/C%E8%AF%AD%E8%A8%80%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="rand函数"><a href="#rand函数" class="headerlink" title="rand函数"></a>rand函数</h2><h3 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h3><p><em>rand()</em>函数是产生随机数的一个随机函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div></pre></td></tr></table></figure></p>
<p>返回值：<br><em>rand()</em>返回值为一随机数值，范围在0至RAND_MAX 间（RAND_MAX定义在stdlib.h，其值为2147483647）。</p>
<blockquote>
<p><strong>注：</strong>在调用此函数前，必须先利用srand()设好随机数种子。如果未设随机数种子，rand()在调用时会自动设随机数种子为1。</p>
</blockquote>
<h3 id="示例一："><a href="#示例一：" class="headerlink" title="示例一："></a>示例一：</h3><p>代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span></span></div><div class="line"><span class="code">	&gt; File Name: rand.c</span></div><div class="line"><span class="code">	&gt; Author: AnSwEr</span></div><div class="line"><span class="code">	&gt; Mail: 1045837697@qq.com</span></div><div class="line"><span class="code">	&gt; Created Time: 2015年10月24日 星期六 20时50分59秒</span></div><div class="line"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**/</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 产生1到6的随机数</div><div class="line"> */</div><div class="line"></div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line"></div><div class="line"><span class="built_in">int</span> main(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">    &#123;</div><div class="line">        printf(<span class="string">"%d "</span>,rand()%<span class="number">6</span>+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    printf(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="http://img.blog.csdn.net/20151024205732527" alt="这里写图片描述"></p>
<p><strong>说明：</strong>这里两次运行的结果相同，是因为未利用<em>srand()</em>设置随机数种子，所以rand()在调用时会自动设随机数种子为1。</p>
<h2 id="srand函数"><a href="#srand函数" class="headerlink" title="srand函数"></a>srand函数</h2><h3 id="函数介绍-1"><a href="#函数介绍-1" class="headerlink" title="函数介绍"></a>函数介绍</h3><p><em>srand()</em>函数是随机数发生器的初始化函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span>;</div></pre></td></tr></table></figure></p>
<p>参数：<br>seed必须是个整数，通常可以利用<em>geypid()</em>或<em>time(0)</em>的返回值来当做seed。如果每次seed都设相同值，那么<em>rand()</em>所产生的随机数值会像上面的示例一每次就会一样。</p>
<h3 id="示例二："><a href="#示例二：" class="headerlink" title="示例二："></a>示例二：</h3><p>代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span></span></div><div class="line"><span class="code">	&gt; File Name: srand.c</span></div><div class="line"><span class="code">	&gt; Author: AnSwEr</span></div><div class="line"><span class="code">	&gt; Mail: 1045837697@qq.com</span></div><div class="line"><span class="code">	&gt; Created Time: 2015年10月24日 星期六 21时01分58秒</span></div><div class="line"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**/</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 产生1-6的随机数</div><div class="line"> */</div><div class="line"></div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#include&lt;time.h&gt;</div><div class="line"></div><div class="line"><span class="built_in">int</span> main(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">    &#123;</div><div class="line">        printf(<span class="string">"%d "</span>,rand()%<span class="number">6</span>+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    printf(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="http://img.blog.csdn.net/20151024210616461" alt="这里写图片描述"></p>
<p>哈哈，这下两次结果就不同了吧。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于随机数的知识就先总结这么多，以后碰到更复杂的再继续。</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux Shell 脚本调试总结]]></title>
      <url>http://answerywj.com/2016/07/14/Linux-Shell-%E8%84%9A%E6%9C%AC%E8%B0%83%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="Linux-Shell-脚本调试总结"><a href="#Linux-Shell-脚本调试总结" class="headerlink" title="Linux Shell 脚本调试总结"></a>Linux Shell 脚本调试总结</h1><blockquote>
<p>Shell脚本是用户与Linux操作系统交互的一种方式,在脚本编程过程中自然少不了进行调试工作,本文将介绍三种常用的调试方法.(默认使用bash shell)</p>
</blockquote>
<h2 id="追踪脚本的执行"><a href="#追踪脚本的执行" class="headerlink" title="追踪脚本的执行"></a>追踪脚本的执行</h2><p>使用<strong>-x</strong>选项可以打印出脚本执行的每一行命令以及当前状态.<br>有如下脚本,打印数字1到10:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>我们使用<strong>-x</strong>选项进行调试如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#在每一行前加上行号</div><div class="line">export PS4=<span class="string">'+$&#123;BASH_SOURCE&#125;:$&#123;LINENO&#125;:$&#123;FUNCNAME[0]&#125;: '</span></div><div class="line">#进行调试</div><div class="line">sh -x test<span class="selector-class">.sh</span></div><div class="line">#调试结果</div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">2</span></div><div class="line"><span class="number">2</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">3</span></div><div class="line"><span class="number">3</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">4</span></div><div class="line"><span class="number">4</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">5</span></div><div class="line"><span class="number">5</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">6</span></div><div class="line"><span class="number">6</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">7</span></div><div class="line"><span class="number">7</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">8</span></div><div class="line"><span class="number">8</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">9</span></div><div class="line"><span class="number">9</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">3</span>:: <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="string">'&#123;1..10&#125;'</span></div><div class="line">+test<span class="selector-class">.sh</span>:<span class="number">5</span>:: echo <span class="number">10</span></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>有时候,你只需要对脚本的一部分进行调试,那么可以使用如下命令:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> -x <span class="comment">#在执行时显示参数和命令</span></div><div class="line"><span class="keyword">set</span> +x <span class="comment">#禁止调试</span></div><div class="line"><span class="keyword">set</span> -v <span class="comment">#当命令行读取时显示输入</span></div><div class="line"><span class="keyword">set</span> +v <span class="comment">#禁止打印输入</span></div></pre></td></tr></table></figure></p>
<p>可以使用<strong>set builtin</strong>来启用或者禁止调试打印.<br>对上文脚本做如下修改:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">set</span> -x</div><div class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line">    <span class="built_in">set</span> +x</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>结果如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 1</div><div class="line">1</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 2</div><div class="line">2</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 3</div><div class="line">3</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 4</div><div class="line">4</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 5</div><div class="line">5</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 6</div><div class="line">6</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 7</div><div class="line">7</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 8</div><div class="line">8</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 9</div><div class="line">9</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:6:: echo 10</div><div class="line">10</div><div class="line">+<span class="keyword">test</span>.<span class="keyword">sh</span>:7:: <span class="keyword">set</span> +x</div></pre></td></tr></table></figure></p>
<h2 id="自定义日志"><a href="#自定义日志" class="headerlink" title="自定义日志"></a>自定义日志</h2><p>上面这种调试手段是bash内建的,而且输出格式固定而且繁琐.所以我们需要根据需要的信息,自定义格式来显示调试信息,通过设定_DEBUG环境变量来完成:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># run:_DEBUG=on sh debug.sh</span></div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">DEBUG</span></span>()</div><div class="line">&#123;</div><div class="line">    [ <span class="string">"<span class="variable">$_DEBUG</span>"</span> == <span class="string">"on"</span> ] &amp;&amp; <span class="variable">$@</span> || :</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">    DEBUG <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"This is debug line!"</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>我们将_DEBUG环境变量设定为一个开关,只有打开时才会输出调试日志.<br>使用如上脚本结果如下:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[aidu1602@ResU10 tools]$ _DEBUG=<span class="keyword">on</span> <span class="keyword">sh</span> <span class="keyword">debug</span>.<span class="keyword">sh</span></div><div class="line">This <span class="keyword">is</span> <span class="keyword">debug</span> line!</div><div class="line"><span class="number">1</span></div><div class="line">This <span class="keyword">is</span> <span class="keyword">debug</span> line!</div><div class="line"><span class="number">2</span></div><div class="line">This <span class="keyword">is</span> <span class="keyword">debug</span> line!</div><div class="line"><span class="number">3</span></div><div class="line">This <span class="keyword">is</span> <span class="keyword">debug</span> line!</div><div class="line"><span class="number">4</span></div><div class="line">This <span class="keyword">is</span> <span class="keyword">debug</span> line!</div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>这样我们就可以自定义调试信息,并且可以控制调试开关啦.</p>
<h2 id="使用专用调试器"><a href="#使用专用调试器" class="headerlink" title="使用专用调试器"></a>使用专用调试器</h2><p>如果你需要调试一个非常复杂的脚本,并且需要一个及其专业的调试器,像GDB那样,那么我推荐这款开源的脚本调试器<a href="http://bashdb.sourceforge.net/" target="_blank" rel="external">bashdb</a>,具体使用可以参考它的<a href="http://bashdb.sourceforge.net/bashdb.html" target="_blank" rel="external">文档</a>.</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下adb devices no permissions解决方案]]></title>
      <url>http://answerywj.com/2016/07/14/Linux%E4%B8%8Badb-devices-no-permissions%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Linux下adb工具<a href="http://pan.baidu.com/s/1qYhBG2w" target="_blank" rel="external">下载</a>，下载解压到<em>/usr/bin</em>目录。</p>
</blockquote>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当我们在Linux下连接安卓手机，进行adb调试时，执行<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">adb</span> devices</div></pre></td></tr></table></figure></p>
<p>会出现如下错误提示：<br><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span> <span class="keyword">of</span> devices attached</div><div class="line">???????????? no permissions</div></pre></td></tr></table></figure></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先创建一个规则配置文件：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi <span class="regexp">/etc/u</span>dev<span class="regexp">/rules.d/</span><span class="number">70</span>-android.rules</div></pre></td></tr></table></figure></p>
<p>保存并退出。</p>
<p>查看USB设备信息，拔掉设备再查看一次，就可以比较出安卓设备是哪一个了，我的设备信息如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">answer<span class="variable">@localhost:</span>~/Desktop$ lsusb</div><div class="line">Bus <span class="number">003</span> Device <span class="number">011</span>: ID <span class="number">1</span><span class="attribute">f3a</span>:<span class="number">1002</span> Onda (unverified)</div></pre></td></tr></table></figure></p>
<p>打开刚才的规则配置文件，写入如下内容：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">SUBSYSTEM</span>==<span class="string">"usb"</span>,ATTRS&#123;idVendor&#125;==<span class="string">"1f3a"</span>,ATTRS&#123;idProduct&#125;==<span class="string">"1002"</span>, MODE=<span class="string">"0666"</span></div></pre></td></tr></table></figure></p>
<p>其中idvendor和idProduct指的是usb的id号，ID 1f3a是idVendor ，1002就是 idProduct。</p>
<p>然后赋予文件权限<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod a+x <span class="regexp">/etc/u</span>dev<span class="regexp">/rules.d/</span><span class="number">70</span>-android.rules</div></pre></td></tr></table></figure></p>
<p>重启udev：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="meta-keyword">/etc/</span>init.d/udev restart</div></pre></td></tr></table></figure></p>
<p> 注意，这里一定要拔掉设备再重连！然后执行如下命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo adb <span class="keyword">kill</span>-<span class="keyword">server</span></div><div class="line">adb devices</div></pre></td></tr></table></figure></p>
<p>显示信息如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* daemon <span class="keyword">not</span> <span class="built_in">running</span>. starting <span class="keyword">it</span> now <span class="keyword">on</span> port <span class="number">5037</span> *</div><div class="line">* daemon started successfully *</div><div class="line">List <span class="keyword">of</span> devices attached</div><div class="line"><span class="number">20080411</span>	device</div></pre></td></tr></table></figure></p>
<p>那么说明连接成功，可以正常进行调试了。</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下脚本录制工具——script和scriptreplay]]></title>
      <url>http://answerywj.com/2016/07/14/Linux%E4%B8%8B%E8%84%9A%E6%9C%AC%E5%BD%95%E5%88%B6%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94script%E5%92%8Cscriptreplay/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Linux开发环境下，想要录制一段屏幕视屏不是特别方便。这里分享给大家一种方便而且快捷的方法。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Linux下有script和scriptreplay这两个工具组合用于录制命令行。在新版本系统中，已经集成了这两个工具，所以直接使用即可：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">script -t <span class="number">2</span>&gt;timing<span class="selector-class">.log</span> -<span class="selector-tag">a</span> &gt;output<span class="selector-class">.session</span></div><div class="line">&lt;command&gt;</div><div class="line">&lt;command&gt;</div><div class="line">exit</div><div class="line">scriptreplay timing<span class="selector-class">.log</span> output.session</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>选项-t用于存储时序文件，这里导入到stderr，再重定向到timing.log。</li>
<li>选项-a用于将命令输出信息，重定向到output.session文件。</li>
<li>这两个文件很小，可以拷贝到需要播放的机器上进行播放。</li>
</ul>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux fork炸弹解析]]></title>
      <url>http://answerywj.com/2016/07/14/Linux-fork%E7%82%B8%E5%BC%B9%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="Linux-Fork-Bomb"><a href="#Linux-Fork-Bomb" class="headerlink" title="Linux Fork Bomb"></a>Linux Fork Bomb</h1><p><strong>:(){ :|: &amp; };:</strong>是一个bash函数，以Fork Bomb闻名，是一个拒绝服务攻击 的Linux 系统。如果你好奇地去执行了这个命令，那么赶快重启系统吧~！</p>
<h2 id="命令解析"><a href="#命令解析" class="headerlink" title="命令解析"></a>命令解析</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:()</span></div><div class="line">&#123;</div><div class="line">	: | : <span class="selector-tag">&amp;</span></div><div class="line">&#125;;:</div></pre></td></tr></table></figure>
<ol>
<li><strong>：</strong>在这里是一个函数名，我们定义之，并在后面执行它。</li>
<li><strong>：|：&amp;</strong>，：函数的输出通过管道传给另一个冒号函数作为输入，并且在后台执行。</li>
<li><strong>{ };</strong>标识着里面的内容是一个函数主体。</li>
<li>最后一个<strong>：</strong>为定义完成后的一次函数执行。</li>
</ol>
<h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><ol>
<li>首先需要说明的是<strong>:</strong>是一个shell内置命令，所以上面这段代码只有在bash中才可能产生fork炸弹，因为在其他一些shell中，内置命令的优先级高于函数，所以执行<em>:</em>，总是执行内置命令。（<strong>：</strong>是一个空命令，while true等同于 while <strong>：</strong>，常用作占位符）</li>
<li>先来看看函数的主体<strong>：|：&amp;</strong>，使用管道的时候是两个进程同时开始执行。</li>
<li>所以当执行一个<strong>：</strong>函数时，产生两个新进程，然后一个原来的进程退出，这样不停地递归下去，就产生了一个无限递归。按照这个增长模式的化，其增长趋势约为$2^n$。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Linux中还有很多这样存在这陷阱的命令，这也正是我喜欢Linux系统的原因，充满着探索性。</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="https://mail.google.com" target="_blank" rel="external">yuanweijie1993@gmail.com</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
<li>CSDN：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git实用命令补充]]></title>
      <url>http://answerywj.com/2016/07/08/Git%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h1 id="Git实用命令补充"><a href="#Git实用命令补充" class="headerlink" title="Git实用命令补充"></a>Git实用命令补充</h1><p>这是对<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰老师的git教程</a>的一个补充,增加了一些实用却很少被提及的命令.如果你是初学者,建议先阅读廖雪峰老师的git教程.</p>
<h2 id="ssh连接检查"><a href="#ssh连接检查" class="headerlink" title="ssh连接检查"></a>ssh连接检查</h2><p>git支持https和ssh等协议.https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令,而ssh支持的原生git协议速度最快.<br>当ssh配置完成后,再次检查ssh连接情况:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<p>如果看到如下所示，则表示添加成功:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi! You’ve successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span> provide shell access.</div></pre></td></tr></table></figure></p>
<h2 id="git-commit-信息"><a href="#git-commit-信息" class="headerlink" title="git commit 信息"></a>git commit 信息</h2><p>在这里,我强烈建议一定要写git commit 信息.这里给大家推荐一篇文章,<a href="http://blog.jobbole.com/92713/" target="_blank" rel="external">写好 Git Commit 信息的 7 个建议</a>(<a href="http://chris.beams.io/posts/git-commit/" target="_blank" rel="external">英文版</a>).</p>
<h2 id="远程分支清理"><a href="#远程分支清理" class="headerlink" title="远程分支清理"></a>远程分支清理</h2><p>当你使用<code>git branch -a</code>查看全部分支时,有可能会发现一些以前开发时残留的远程分支,可以使用如下命令进行清除:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote prune <span class="built_in">origin</span></div></pre></td></tr></table></figure></p>
<h2 id="获取远程分支到本地"><a href="#获取远程分支到本地" class="headerlink" title="获取远程分支到本地"></a>获取远程分支到本地</h2><p>在clone项目后,你会发现本地只有默认分支,其它的分支并没有被clone到本地,所以就需要我们手动去获取:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span><span class="keyword">branch-name </span>remotebranchname</div></pre></td></tr></table></figure></p>
<h2 id="gitignore无效解决"><a href="#gitignore无效解决" class="headerlink" title=".gitignore无效解决"></a>.gitignore无效解决</h2><p>当你在项目开发过程中,突然想把一些文件加入到.gitignore规则中,可是却发现不起作用.那是因为.gitignore只忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。解决方法就是先把本地缓存删除,改变成未track状态:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm -r <span class="comment">--cached .</span></div></pre></td></tr></table></figure></p>
<h2 id="配置可视化diff和merge工具"><a href="#配置可视化diff和merge工具" class="headerlink" title="配置可视化diff和merge工具"></a>配置可视化diff和merge工具</h2><p>在Linux下推荐使用meld工具:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global diff<span class="selector-class">.tool</span> meld</div><div class="line">$ git config --global merge<span class="selector-class">.tool</span> meld</div></pre></td></tr></table></figure></p>
<p>然后就可以使用工具查看了:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git difftool XXX</div><div class="line"><span class="variable">$ </span>git mergetool XXX</div></pre></td></tr></table></figure></p>
<h2 id="自定义配置git"><a href="#自定义配置git" class="headerlink" title="自定义配置git"></a>自定义配置git</h2><p>先谈谈<code>git config</code>的作用域,一共有三个:</p>
<ol>
<li>–system :作用于当前系统的所有用户,配置文件目录为<code>/etc/gitconfig</code>.</li>
<li>–global :作用于当前用户,配置文件目录为<code>~/.gitconfig</code>.</li>
<li>–local : 作用于当前仓库,配置文件目录为<code>repo/.git/config</code>,缺省可以省略该参数,优先级最高.</li>
</ol>
<p>使命令输出和文件显示看起来更醒目,有不同颜色区别:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --<span class="keyword">global</span> color.ui <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>查看已有的配置信息:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config <span class="comment">--list</span></div></pre></td></tr></table></figure></p>
<p>可以通过设置作用域,查看不同作用域的信息.</p>
<h2 id="处理大型二进制文件"><a href="#处理大型二进制文件" class="headerlink" title="处理大型二进制文件"></a>处理大型二进制文件</h2><p>由于git在存储二进制文件时效率不高,所以需要借助第三方组件,<a href="http://www.oschina.net/news/71365/git-annex-lfs-bigfiles-fat-media-bigstore-sym" target="_blank" rel="external">这里</a>介绍了几种处理大型二进制文件的组件.</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>这里推荐一份阮一峰老师整理的<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用 Git 命令清单</a>.<br>最后给大家推荐一本Git Book,可以从网上免费<a href="https://git-scm.com/book/en/v2" target="_blank" rel="external">获取</a>.</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>WebSite：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="">yuanweijie1993@gmail.com</a></li>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Github徽章整理]]></title>
      <url>http://answerywj.com/2016/07/08/Github%E5%BE%BD%E7%AB%A0%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="Github徽章整理"><a href="#Github徽章整理" class="headerlink" title="Github徽章整理"></a>Github徽章整理</h1><blockquote>
<p>相信很多在Github上玩耍过的同学们都会发现，在很多项目的README里会有各式各样的徽章，是不是顿时感觉到很高上大？没关系，读完这篇文章你就也可以拥有这些徽章了，甚至可以定制自己的徽章。</p>
</blockquote>
<hr>
<h2 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h2><p>如果这是一个用npm管理的一个包,请添加：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">版本图片</span>](<span class="link">https://www.npmjs.com/package/项目名</span>)</div></pre></td></tr></table></figure></p>
<p>如果你使用了第三方的组件,那可以<a href="https://david-dm.org/" target="_blank" rel="external">标识</a>是否为最新版本。</p>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>如果你是TypeScript开发者,那么请把下面的这些徽章用起来吧：  </p>
<p><a href="https://github.com/ellerbrock/typescript-badges/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/typescript/love/typescript.svg?v=101" alt="TypeScript"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![TypeScript</span>](<span class="link">https://badges.frapsoft.com/typescript/love/typescript.svg?v=101</span>)](<span class="link">https://github.com/ellerbrock/typescript-badges/</span>)</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ellerbrock/typescript-badges/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/typescript/code/typescript.svg?v=101" alt="TypeScript"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![TypeScript</span>](<span class="link">https://badges.frapsoft.com/typescript/code/typescript.svg?v=101</span>)](<span class="link">https://github.com/ellerbrock/typescript-badges/</span>)</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ellerbrock/typescript-badges/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101" alt="TypeScript"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![TypeScript</span>](<span class="link">https://badges.frapsoft.com/typescript/awesome/typescript.png?v=101</span>)](<span class="link">https://github.com/ellerbrock/typescript-badges/</span>)</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ellerbrock/typescript-badges/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101" alt="TypeScript"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![TypeScript</span>](<span class="link">https://badges.frapsoft.com/typescript/version/typescript-v18.svg?v=101</span>)](<span class="link">https://github.com/ellerbrock/typescript-badges/</span>)</div></pre></td></tr></table></figure></p>
<p>还有更多的格式与尺寸详见<a href="https://github.com/ellerbrock/typescript-badges/" target="_blank" rel="external">这里</a>。</p>
<h2 id="awesome"><a href="#awesome" class="headerlink" title="awesome"></a>awesome</h2><p>如果你是<a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">awesome</a>系列的项目,那可以添加awesome徽章：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">图片</span>](<span class="link">https://github.com/sindresorhus/awesome</span>)</div></pre></td></tr></table></figure></p>
<h2 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h2><p>Google Analytics是通过嵌入图像追踪项目访问量的一种方法。<br>如<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">我</a>的<a href="https://github.com/AnSwErYWJ/DogFood" target="_blank" rel="external">DogFood</a>项目就内嵌了一个追踪图像：<br><a href="https://github.com/AnSwErYWJ/DogFood" target="_blank" rel="external"><img src="https://ga-beacon.appspot.com/UA-79885141-1/welcome-page" alt="Analytics"></a></p>
<p>具体制作过程可以<a href="https://github.com/igrigorik/ga-beacon" target="_blank" rel="external">参考</a>。</p>
<h2 id="Gitter"><a href="#Gitter" class="headerlink" title="Gitter"></a>Gitter</h2><p>这是对issue功能的一个补充。正常情况下，当你给某个项目提出问题时，需要新建一个issue提出，并且需要等待开发者的回复（短则一两天，长则大半年），效率不是很高。而<a href="https://gitter.im" target="_blank" rel="external">Gitter</a>就提供了一个实时的聊天室，项目的开发者可以用github账号登陆之，为某个项目创建一个聊天室，然后再项目的Readme中加入如下代码：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![Gitter</span>](<span class="link">https://badges.gitter.im/Join Chat.svg</span>)](<span class="link">聊天室 URL</span>)</div></pre></td></tr></table></figure></p>
<p>就可以显示聊天室的徽章啦：<br><a href="https://gitter.im/AnSwErYWJ/DogFood" target="_blank" rel="external"><img src="https://badges.gitter.im/Join Chat.svg" alt="Gitter"></a>  </p>
<p>单击即可进入聊天室，与开发者进行实时沟通。</p>
<h2 id="Code-Related"><a href="#Code-Related" class="headerlink" title="Code Related"></a>Code Related</h2><p>有很多的在线测试平台都提供测试状态标识,你可以把他们放到相应项目中的README中：</p>
<ul>
<li><a href="https://travis-ci.org/getting_started" target="_blank" rel="external">Travis Ci</a></li>
<li><a href="https://codecov.io/gh" target="_blank" rel="external">Codecov</a></li>
<li><a href="https://codeclimate.com" target="_blank" rel="external">Code Climate</a></li>
<li><a href="https://www.bithound.io/" target="_blank" rel="external">bithound</a></li>
</ul>
<h2 id="Version-Stability"><a href="#Version-Stability" class="headerlink" title="Version Stability"></a>Version Stability</h2><p><a href="http://github.com/badges/stability-badges" target="_blank" rel="external"><img src="http://badges.github.io/stability-badges/dist/deprecated.svg" alt="deprecated"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![deprecated</span>](<span class="link">http://badges.github.io/stability-badges/dist/deprecated.svg</span>)](<span class="link">http://github.com/badges/stability-badges</span>)</div></pre></td></tr></table></figure></p>
<p><a href="http://github.com/badges/stability-badges" target="_blank" rel="external"><img src="http://badges.github.io/stability-badges/dist/experimental.svg" alt="experimental"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![experimental</span>](<span class="link">http://badges.github.io/stability-badges/dist/experimental.svg</span>)](<span class="link">http://github.com/badges/stability-badges</span>)</div></pre></td></tr></table></figure></p>
<p><a href="http://github.com/badges/stability-badges" target="_blank" rel="external"><img src="http://badges.github.io/stability-badges/dist/unstable.svg" alt="unstable"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![unstable</span>](<span class="link">http://badges.github.io/stability-badges/dist/unstable.svg</span>)](<span class="link">http://github.com/badges/stability-badges</span>)</div></pre></td></tr></table></figure></p>
<p><a href="http://github.com/badges/stability-badges" target="_blank" rel="external"><img src="http://badges.github.io/stability-badges/dist/stable.svg" alt="stable"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![stable</span>](<span class="link">http://badges.github.io/stability-badges/dist/stable.svg</span>)](<span class="link">http://github.com/badges/stability-badges</span>)</div></pre></td></tr></table></figure></p>
<p><a href="http://github.com/badges/stability-badges" target="_blank" rel="external"><img src="http://badges.github.io/stability-badges/dist/frozen.svg" alt="frozen"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![frozen</span>](<span class="link">http://badges.github.io/stability-badges/dist/frozen.svg</span>)](<span class="link">http://github.com/badges/stability-badges</span>)</div></pre></td></tr></table></figure></p>
<p><a href="http://github.com/badges/stability-badges" target="_blank" rel="external"><img src="http://badges.github.io/stability-badges/dist/locked.svg" alt="locked"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![locked</span>](<span class="link">http://badges.github.io/stability-badges/dist/locked.svg</span>)](<span class="link">http://github.com/badges/stability-badges</span>)</div></pre></td></tr></table></figure></p>
<p>更多请看<a href="https://github.com/badges/stability-badges" target="_blank" rel="external">这里</a>。</p>
<h2 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h2><p><a href="https://github.com/ellerbrock/open-source-badge/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/os/v1/open-source.svg?v=103" alt="Open Source Love"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![Open Source Love</span>](<span class="link">https://badges.frapsoft.com/os/v1/open-source.svg?v=103</span>)](<span class="link">https://github.com/ellerbrock/open-source-badge/</span>)</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ellerbrock/open-source-badge/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/os/v2/open-source.svg?v=103" alt="Open Source Love"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![Open Source Love</span>](<span class="link">https://badges.frapsoft.com/os/v2/open-source.svg?v=103</span>)](<span class="link">https://github.com/ellerbrock/open-source-badge/</span>)</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ellerbrock/open-source-badge/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/os/v3/open-source.svg?v=103" alt="Open Source Love"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![Open Source Love</span>](<span class="link">https://badges.frapsoft.com/os/v3/open-source.svg?v=103</span>)](<span class="link">https://github.com/ellerbrock/open-source-badge/</span>)</div></pre></td></tr></table></figure></p>
<p>还有更多的徽章格式与尺寸详见<a href="https://github.com/ellerbrock/open-source-badges" target="_blank" rel="external">这里</a>。</p>
<h2 id="Licences"><a href="#Licences" class="headerlink" title="Licences"></a>Licences</h2><h3 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h3><p>开源软件协议的种类非常多,具体可以参考<a href="https://github.com/ruanyf" target="_blank" rel="external">阮一峰</a>的<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="external">如何选择开源许可证？</a>,本文列举了<a href="https://opensource.org/licenses/mit-license.php" target="_blank" rel="external">MIT</a>和<a href="https://opensource.org/licenses/GPL-3.0/" target="_blank" rel="external">GPL</a>：</p>
<p><a href="https://opensource.org/licenses/mit-license.php" target="_blank" rel="external"><img src="https://badges.frapsoft.com/os/mit/mit.svg?v=103" alt="MIT Licence"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![MIT Licence</span>](<span class="link">https://badges.frapsoft.com/os/mit/mit.svg?v=103</span>)](<span class="link">https://opensource.org/licenses/mit-license.php</span>)</div></pre></td></tr></table></figure></p>
<p><a href="https://opensource.org/licenses/GPL-3.0/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/os/gpl/gpl.svg?v=103" alt="GPL Licence"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![GPL Licence</span>](<span class="link">https://badges.frapsoft.com/os/gpl/gpl.svg?v=103</span>)](<span class="link">https://opensource.org/licenses/GPL-3.0/</span>)</div></pre></td></tr></table></figure></p>
<p>还有更多的徽章格式与尺寸详见<a href="https://github.com/ellerbrock/open-source-badges" target="_blank" rel="external">这里</a>。</p>
<h3 id="Creative-Commons"><a href="#Creative-Commons" class="headerlink" title="Creative Commons"></a>Creative Commons</h3><p><a href="https://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8" target="_blank" rel="external">知识共享</a>是一系列著作权许可方式，我们可以在<a href="https://creativecommons.org/choose/#metadata" target="_blank" rel="external">官网</a>选择自己的许可协议。如我采用了知识共享署名-相同方式共享：  </p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.</p>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>Github上有一个<a href="https://github.com/boennemann/badges" target="_blank" rel="external">badges</a>的仓库,里面收集了一些常用的,大家可以参考一下。</p>
<h2 id="Your-Badges"><a href="#Your-Badges" class="headerlink" title="Your Badges"></a>Your Badges</h2><p>如果你需要自己定制一个徽章的话,可以参考<a href="http://shields.io/" target="_blank" rel="external">这里</a>。</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p><a href="http://forthebadge.com" target="_blank" rel="external"><img src="http://forthebadge.com/images/badges/ages-20-30.svg" alt="forthebadge"></a></p>
<ul>
<li>WebSite：<a href="http://www.answerywj.com" target="_blank" rel="external">http://www.answerywj.com</a></li>
<li>Email：<a href="">yuanweijie1993@gmail.com</a></li>
<li>GitHub：<a href="https://github.com/AnSwErYWJ" target="_blank" rel="external">AnSwErYWJ</a></li>
<li>Blog：<a href="http://blog.csdn.net/u011192270" target="_blank" rel="external">AnSwEr不是答案的专栏</a></li>
<li>Weibo：<a href="http://weibo.com/1783591593" target="_blank" rel="external">@AnSwEr不是答案</a></li>
</ul>
<p><a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"></a> This work is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</p>
]]></content>
    </entry>
    
  
  
</search>
